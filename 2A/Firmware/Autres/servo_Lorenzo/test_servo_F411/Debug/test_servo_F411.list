
test_servo_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002968  08002968  00003968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002980  08002980  00003980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002988  08002988  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002988  08002988  00003988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800298c  0800298c  0000398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002990  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  0800299c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800299c  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b898  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001853  00000000  00000000  0000f8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00011128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090b  00000000  00000000  00011ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015621  00000000  00000000  000125b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c27c  00000000  00000000  00027bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a50c  00000000  00000000  00033e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be35c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  000be3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c1464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002950 	.word	0x08002950

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002950 	.word	0x08002950

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fade 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f92e 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f902 	bl	80006e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80004e0:	2100      	movs	r1, #0
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <main+0x34>)
 80004e4:	f001 fad4 	bl	8001a90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM1 -> CCR1 = 1000;
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <main+0x38>)
 80004ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004ee:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 80004f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004f4:	f000 fb3c 	bl	8000b70 <HAL_Delay>
	  TIM1 -> CCR1 = 1000;
 80004f8:	bf00      	nop
 80004fa:	e7f5      	b.n	80004e8 <main+0x20>
 80004fc:	20000028 	.word	0x20000028
 8000500:	40010000 	.word	0x40010000

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f9f0 	bl	80028f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	@ (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	@ (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000574:	2310      	movs	r3, #16
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000578:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057e:	2304      	movs	r3, #4
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000582:	2304      	movs	r3, #4
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fd98 	bl	80010c0 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 f93b 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fffa 	bl	80015b0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c2:	f000 f925 	bl	8000810 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	@ 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b092      	sub	sp, #72	@ 0x48
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2220      	movs	r2, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f978 	bl	80028f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000608:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <MX_TIM1_Init+0x100>)
 800060a:	4a34      	ldr	r2, [pc, #208]	@ (80006dc <MX_TIM1_Init+0x104>)
 800060c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800060e:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000610:	2253      	movs	r2, #83	@ 0x53
 8000612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <MX_TIM1_Init+0x100>)
 800061c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000628:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_TIM1_Init+0x100>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000634:	4828      	ldr	r0, [pc, #160]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000636:	f001 f9db 	bl	80019f0 <HAL_TIM_PWM_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000640:	f000 f8e6 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000650:	4619      	mov	r1, r3
 8000652:	4821      	ldr	r0, [pc, #132]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000654:	f001 fdcc 	bl	80021f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800065e:	f000 f8d7 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000662:	2360      	movs	r3, #96	@ 0x60
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <MX_TIM1_Init+0x100>)
 8000688:	f001 fab2 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000692:	f000 f8bd 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <MX_TIM1_Init+0x100>)
 80006ba:	f001 fe07 	bl	80022cc <HAL_TIMEx_ConfigBreakDeadTime>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80006c4:	f000 f8a4 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <MX_TIM1_Init+0x100>)
 80006ca:	f000 f8f1 	bl	80008b0 <HAL_TIM_MspPostInit>

}
 80006ce:	bf00      	nop
 80006d0:	3748      	adds	r7, #72	@ 0x48
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40010000 	.word	0x40010000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fe2a 	bl	8002370 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f875 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000070 	.word	0x20000070
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f000 fc64 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fad2 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fac4 	bl	8000d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	@ (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000830:	6453      	str	r3, [r2, #68]	@ 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085a:	2007      	movs	r0, #7
 800085c:	f000 fa5e 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d10d      	bne.n	800089a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_TIM_PWM_MspInit+0x40>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <HAL_TIM_PWM_MspInit+0x40>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_TIM_PWM_MspInit+0x40>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40010000 	.word	0x40010000
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <HAL_TIM_MspPostInit+0x68>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d11e      	bne.n	8000910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_TIM_MspPostInit+0x6c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	@ (800091c <HAL_TIM_MspPostInit+0x6c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_TIM_MspPostInit+0x6c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_TIM_MspPostInit+0x70>)
 800090c:	f000 fa3a 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40010000 	.word	0x40010000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f000 f9f3 	bl	8000d84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f891 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3c:	f7ff ffea 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f001 ff4f 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd2d 	bl	80004c8 <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08002990 	.word	0x08002990
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	200000bc 	.word	0x200000bc

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f931 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff feac 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f93b 	bl	8000d6a <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b0c:	f000 f911 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200000b8 	.word	0x200000b8

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000b8 	.word	0x200000b8

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff5c 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffb0 	bl	8000cd8 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e159      	b.n	8001054 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8148 	bne.w	800104e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80a2 	beq.w	800104e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b57      	ldr	r3, [pc, #348]	@ (800106c <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a56      	ldr	r2, [pc, #344]	@ (800106c <HAL_GPIO_Init+0x2e8>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b54      	ldr	r3, [pc, #336]	@ (800106c <HAL_GPIO_Init+0x2e8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a52      	ldr	r2, [pc, #328]	@ (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	@ (8001074 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x202>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_GPIO_Init+0x2f4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1fe>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a47      	ldr	r2, [pc, #284]	@ (800107c <HAL_GPIO_Init+0x2f8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a46      	ldr	r2, [pc, #280]	@ (8001080 <HAL_GPIO_Init+0x2fc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1f2>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	@ (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b38      	ldr	r3, [pc, #224]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a2f      	ldr	r2, [pc, #188]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f aea2 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e267      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010de:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b82      	ldr	r3, [pc, #520]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d157      	bne.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e242      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x74>
 8001126:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a75      	ldr	r2, [pc, #468]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b70      	ldr	r3, [pc, #448]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6f      	ldr	r2, [pc, #444]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6d      	ldr	r3, [pc, #436]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6c      	ldr	r2, [pc, #432]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001158:	4b69      	ldr	r3, [pc, #420]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a68      	ldr	r2, [pc, #416]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a65      	ldr	r2, [pc, #404]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcee 	bl	8000b58 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcea 	bl	8000b58 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e207      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xc0>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcda 	bl	8000b58 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcd6 	bl	8000b58 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1f3      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1c7      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fc8f 	bl	8000b58 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc8b 	bl	8000b58 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1a8      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4925      	ldr	r1, [pc, #148]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc6e 	bl	8000b58 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc6a 	bl	8000b58 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e187      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d036      	beq.n	8001318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc4e 	bl	8000b58 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc4a 	bl	8000b58 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e167      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80012d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x200>
 80012de:	e01b      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc37 	bl	8000b58 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	e00e      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc33 	bl	8000b58 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d907      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e150      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ea      	bne.n	80012ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8097 	beq.w	8001454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132a:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b7d      	ldr	r3, [pc, #500]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a7c      	ldr	r2, [pc, #496]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a73      	ldr	r2, [pc, #460]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbf3 	bl	8000b58 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fbef 	bl	8000b58 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e10c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x2ea>
 800139c:	4b64      	ldr	r3, [pc, #400]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a0:	4a63      	ldr	r2, [pc, #396]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x30c>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013cc:	4b58      	ldr	r3, [pc, #352]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d0:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013dc:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fbb4 	bl	8000b58 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fbb0 	bl	8000b58 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0cb      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ee      	beq.n	80013f4 <HAL_RCC_OscConfig+0x334>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fb9e 	bl	8000b58 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fb9a 	bl	8000b58 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ee      	bne.n	8001420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a38      	ldr	r2, [pc, #224]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a1 	beq.w	80015a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d05c      	beq.n	8001524 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d141      	bne.n	80014f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb6e 	bl	8000b58 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb6a 	bl	8000b58 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e087      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	491b      	ldr	r1, [pc, #108]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb43 	bl	8000b58 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb3f 	bl	8000b58 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e05c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x416>
 80014f4:	e054      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb2c 	bl	8000b58 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb28 	bl	8000b58 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e045      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x444>
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e038      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000
 8001538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x4ec>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d028      	beq.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d121      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001574:	4293      	cmp	r3, r2
 8001576:	d111      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa5a 	bl	8000b58 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa56 	bl	8000b58 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9ba 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08002968 	.word	0x08002968
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b094      	sub	sp, #80	@ 0x50
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80e1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e0db      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b4:	e0db      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x208>)
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ba:	e0d8      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	6139      	str	r1, [r7, #16]
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001820:	4659      	mov	r1, fp
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4651      	mov	r1, sl
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4651      	mov	r1, sl
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4651      	mov	r1, sl
 8001830:	ebb2 0801 	subs.w	r8, r2, r1
 8001834:	4659      	mov	r1, fp
 8001836:	eb63 0901 	sbc.w	r9, r3, r1
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184e:	4690      	mov	r8, r2
 8001850:	4699      	mov	r9, r3
 8001852:	4623      	mov	r3, r4
 8001854:	eb18 0303 	adds.w	r3, r8, r3
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	462b      	mov	r3, r5
 800185c:	eb49 0303 	adc.w	r3, r9, r3
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800186e:	4629      	mov	r1, r5
 8001870:	024b      	lsls	r3, r1, #9
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001878:	4621      	mov	r1, r4
 800187a:	024a      	lsls	r2, r1, #9
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001882:	2200      	movs	r2, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800188c:	f7fe fca4 	bl	80001d8 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001898:	e058      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b38      	ldr	r3, [pc, #224]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	2200      	movs	r2, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	4611      	mov	r1, r2
 80018a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b4:	4642      	mov	r2, r8
 80018b6:	464b      	mov	r3, r9
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c6:	0150      	lsls	r0, r2, #5
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4641      	mov	r1, r8
 80018ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d2:	4649      	mov	r1, r9
 80018d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018ec:	ebb2 040a 	subs.w	r4, r2, sl
 80018f0:	eb63 050b 	sbc.w	r5, r3, fp
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	00eb      	lsls	r3, r5, #3
 80018fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001902:	00e2      	lsls	r2, r4, #3
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4643      	mov	r3, r8
 800190a:	18e3      	adds	r3, r4, r3
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	464b      	mov	r3, r9
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	2200      	movs	r2, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001940:	f7fe fc4a 	bl	80001d8 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800195c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800195e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001970:	4618      	mov	r0, r3
 8001972:	3750      	adds	r7, #80	@ 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08002978 	.word	0x08002978

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	@ (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08002978 	.word	0x08002978

080019f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e041      	b.n	8001a86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe ff28 	bl	800086c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f000 f9a0 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_TIM_PWM_Start+0x24>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e022      	b.n	8001afa <HAL_TIM_PWM_Start+0x6a>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d109      	bne.n	8001ace <HAL_TIM_PWM_Start+0x3e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e015      	b.n	8001afa <HAL_TIM_PWM_Start+0x6a>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d109      	bne.n	8001ae8 <HAL_TIM_PWM_Start+0x58>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e008      	b.n	8001afa <HAL_TIM_PWM_Start+0x6a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	bf14      	ite	ne
 8001af4:	2301      	movne	r3, #1
 8001af6:	2300      	moveq	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e068      	b.n	8001bd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d104      	bne.n	8001b12 <HAL_TIM_PWM_Start+0x82>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b10:	e013      	b.n	8001b3a <HAL_TIM_PWM_Start+0xaa>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d104      	bne.n	8001b22 <HAL_TIM_PWM_Start+0x92>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b20:	e00b      	b.n	8001b3a <HAL_TIM_PWM_Start+0xaa>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_PWM_Start+0xa2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b30:	e003      	b.n	8001b3a <HAL_TIM_PWM_Start+0xaa>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fb2e 	bl	80021a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_TIM_PWM_Start+0x14c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d107      	bne.n	8001b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_TIM_PWM_Start+0x14c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d018      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x10e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b74:	d013      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x10e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_TIM_PWM_Start+0x150>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00e      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x10e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_TIM_PWM_Start+0x154>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x10e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <HAL_TIM_PWM_Start+0x158>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x10e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a14      	ldr	r2, [pc, #80]	@ (8001bec <HAL_TIM_PWM_Start+0x15c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d111      	bne.n	8001bc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d010      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc0:	e007      	b.n	8001bd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40000c00 	.word	0x40000c00
 8001bec:	40014000 	.word	0x40014000

08001bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0ae      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f200 809f 	bhi.w	8001d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c59 	.word	0x08001c59
 8001c28:	08001d5d 	.word	0x08001d5d
 8001c2c:	08001d5d 	.word	0x08001d5d
 8001c30:	08001d5d 	.word	0x08001d5d
 8001c34:	08001c99 	.word	0x08001c99
 8001c38:	08001d5d 	.word	0x08001d5d
 8001c3c:	08001d5d 	.word	0x08001d5d
 8001c40:	08001d5d 	.word	0x08001d5d
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001d5d 	.word	0x08001d5d
 8001c4c:	08001d5d 	.word	0x08001d5d
 8001c50:	08001d5d 	.word	0x08001d5d
 8001c54:	08001d1b 	.word	0x08001d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f914 	bl	8001e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0208 	orr.w	r2, r2, #8
 8001c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0204 	bic.w	r2, r2, #4
 8001c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6999      	ldr	r1, [r3, #24]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	619a      	str	r2, [r3, #24]
      break;
 8001c96:	e064      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f95a 	bl	8001f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6999      	ldr	r1, [r3, #24]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	619a      	str	r2, [r3, #24]
      break;
 8001cd8:	e043      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f9a5 	bl	8002030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0208 	orr.w	r2, r2, #8
 8001cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0204 	bic.w	r2, r2, #4
 8001d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69d9      	ldr	r1, [r3, #28]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
      break;
 8001d18:	e023      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f9ef 	bl	8002104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69d9      	ldr	r1, [r3, #28]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3a      	ldr	r2, [pc, #232]	@ (8001e70 <TIM_Base_SetConfig+0xfc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00f      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d92:	d00b      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a37      	ldr	r2, [pc, #220]	@ (8001e74 <TIM_Base_SetConfig+0x100>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a36      	ldr	r2, [pc, #216]	@ (8001e78 <TIM_Base_SetConfig+0x104>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d003      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a35      	ldr	r2, [pc, #212]	@ (8001e7c <TIM_Base_SetConfig+0x108>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d108      	bne.n	8001dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <TIM_Base_SetConfig+0xfc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01b      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dcc:	d017      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a28      	ldr	r2, [pc, #160]	@ (8001e74 <TIM_Base_SetConfig+0x100>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a27      	ldr	r2, [pc, #156]	@ (8001e78 <TIM_Base_SetConfig+0x104>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00f      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a26      	ldr	r2, [pc, #152]	@ (8001e7c <TIM_Base_SetConfig+0x108>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a25      	ldr	r2, [pc, #148]	@ (8001e80 <TIM_Base_SetConfig+0x10c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a24      	ldr	r2, [pc, #144]	@ (8001e84 <TIM_Base_SetConfig+0x110>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <TIM_Base_SetConfig+0x114>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <TIM_Base_SetConfig+0xfc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d103      	bne.n	8001e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f023 0201 	bic.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  }
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800

08001e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f023 0201 	bic.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f023 0302 	bic.w	r3, r3, #2
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f54 <TIM_OC1_SetConfig+0xc8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10c      	bne.n	8001f02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f023 0308 	bic.w	r3, r3, #8
 8001eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <TIM_OC1_SetConfig+0xc8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	621a      	str	r2, [r3, #32]
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40010000 	.word	0x40010000

08001f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f023 0210 	bic.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0320 	bic.w	r3, r3, #32
 8001fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <TIM_OC2_SetConfig+0xd4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10d      	bne.n	8001fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	@ (800202c <TIM_OC2_SetConfig+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d113      	bne.n	8002004 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000

08002030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1d      	ldr	r2, [pc, #116]	@ (8002100 <TIM_OC3_SetConfig+0xd0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <TIM_OC3_SetConfig+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d113      	bne.n	80020da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	621a      	str	r2, [r3, #32]
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40010000 	.word	0x40010000

08002104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800214e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	031b      	lsls	r3, r3, #12
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <TIM_OC4_SetConfig+0x9c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d109      	bne.n	8002178 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800216a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	621a      	str	r2, [r3, #32]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000

080021a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2201      	movs	r2, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a1a      	ldr	r2, [r3, #32]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	431a      	orrs	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	621a      	str	r2, [r3, #32]
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002204:	2302      	movs	r3, #2
 8002206:	e050      	b.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1c      	ldr	r2, [pc, #112]	@ (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002254:	d013      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a18      	ldr	r2, [pc, #96]	@ (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a13      	ldr	r2, [pc, #76]	@ (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10c      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4313      	orrs	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40014000 	.word	0x40014000

080022cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e03d      	b.n	8002364 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e042      	b.n	8002408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fac4 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f82b 	bl	8002410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002414:	b0c0      	sub	sp, #256	@ 0x100
 8002416:	af00      	add	r7, sp, #0
 8002418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	ea40 0301 	orr.w	r3, r0, r1
 8002438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	431a      	orrs	r2, r3
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002468:	f021 010c 	bic.w	r1, r1, #12
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002476:	430b      	orrs	r3, r1
 8002478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800248a:	6999      	ldr	r1, [r3, #24]
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	ea40 0301 	orr.w	r3, r0, r1
 8002496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b8f      	ldr	r3, [pc, #572]	@ (80026dc <UART_SetConfig+0x2cc>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d005      	beq.n	80024b0 <UART_SetConfig+0xa0>
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b8d      	ldr	r3, [pc, #564]	@ (80026e0 <UART_SetConfig+0x2d0>)
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d104      	bne.n	80024ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b0:	f7ff fa8a 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 80024b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80024b8:	e003      	b.n	80024c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ba:	f7ff fa71 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80024be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024cc:	f040 810c 	bne.w	80026e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024e2:	4622      	mov	r2, r4
 80024e4:	462b      	mov	r3, r5
 80024e6:	1891      	adds	r1, r2, r2
 80024e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024ea:	415b      	adcs	r3, r3
 80024ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024f2:	4621      	mov	r1, r4
 80024f4:	eb12 0801 	adds.w	r8, r2, r1
 80024f8:	4629      	mov	r1, r5
 80024fa:	eb43 0901 	adc.w	r9, r3, r1
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002512:	4690      	mov	r8, r2
 8002514:	4699      	mov	r9, r3
 8002516:	4623      	mov	r3, r4
 8002518:	eb18 0303 	adds.w	r3, r8, r3
 800251c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002520:	462b      	mov	r3, r5
 8002522:	eb49 0303 	adc.w	r3, r9, r3
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800252a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800253a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800253e:	460b      	mov	r3, r1
 8002540:	18db      	adds	r3, r3, r3
 8002542:	653b      	str	r3, [r7, #80]	@ 0x50
 8002544:	4613      	mov	r3, r2
 8002546:	eb42 0303 	adc.w	r3, r2, r3
 800254a:	657b      	str	r3, [r7, #84]	@ 0x54
 800254c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002554:	f7fd fe40 	bl	80001d8 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4b61      	ldr	r3, [pc, #388]	@ (80026e4 <UART_SetConfig+0x2d4>)
 800255e:	fba3 2302 	umull	r2, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	011c      	lsls	r4, r3, #4
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	1891      	adds	r1, r2, r2
 800257e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002580:	415b      	adcs	r3, r3
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002588:	4641      	mov	r1, r8
 800258a:	eb12 0a01 	adds.w	sl, r2, r1
 800258e:	4649      	mov	r1, r9
 8002590:	eb43 0b01 	adc.w	fp, r3, r1
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025a8:	4692      	mov	sl, r2
 80025aa:	469b      	mov	fp, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	eb1a 0303 	adds.w	r3, sl, r3
 80025b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025b6:	464b      	mov	r3, r9
 80025b8:	eb4b 0303 	adc.w	r3, fp, r3
 80025bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025d4:	460b      	mov	r3, r1
 80025d6:	18db      	adds	r3, r3, r3
 80025d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80025da:	4613      	mov	r3, r2
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025ea:	f7fd fdf5 	bl	80001d8 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <UART_SetConfig+0x2d4>)
 80025f6:	fba3 2301 	umull	r2, r3, r3, r1
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2264      	movs	r2, #100	@ 0x64
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	1acb      	subs	r3, r1, r3
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800260a:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <UART_SetConfig+0x2d4>)
 800260c:	fba3 2302 	umull	r2, r3, r3, r2
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002618:	441c      	add	r4, r3
 800261a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002634:	415b      	adcs	r3, r3
 8002636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800263c:	4641      	mov	r1, r8
 800263e:	1851      	adds	r1, r2, r1
 8002640:	6339      	str	r1, [r7, #48]	@ 0x30
 8002642:	4649      	mov	r1, r9
 8002644:	414b      	adcs	r3, r1
 8002646:	637b      	str	r3, [r7, #52]	@ 0x34
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002654:	4659      	mov	r1, fp
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265e:	4651      	mov	r1, sl
 8002660:	00ca      	lsls	r2, r1, #3
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	4642      	mov	r2, r8
 800266a:	189b      	adds	r3, r3, r2
 800266c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002670:	464b      	mov	r3, r9
 8002672:	460a      	mov	r2, r1
 8002674:	eb42 0303 	adc.w	r3, r2, r3
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800268c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002690:	460b      	mov	r3, r1
 8002692:	18db      	adds	r3, r3, r3
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002696:	4613      	mov	r3, r2
 8002698:	eb42 0303 	adc.w	r3, r2, r3
 800269c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800269e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026a6:	f7fd fd97 	bl	80001d8 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <UART_SetConfig+0x2d4>)
 80026b0:	fba3 1302 	umull	r1, r3, r3, r2
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	2164      	movs	r1, #100	@ 0x64
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	3332      	adds	r3, #50	@ 0x32
 80026c2:	4a08      	ldr	r2, [pc, #32]	@ (80026e4 <UART_SetConfig+0x2d4>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 0207 	and.w	r2, r3, #7
 80026ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4422      	add	r2, r4
 80026d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026d8:	e106      	b.n	80028e8 <UART_SetConfig+0x4d8>
 80026da:	bf00      	nop
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40011400 	.word	0x40011400
 80026e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026fa:	4642      	mov	r2, r8
 80026fc:	464b      	mov	r3, r9
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	6239      	str	r1, [r7, #32]
 8002702:	415b      	adcs	r3, r3
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
 8002706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800270a:	4641      	mov	r1, r8
 800270c:	1854      	adds	r4, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb43 0501 	adc.w	r5, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	00eb      	lsls	r3, r5, #3
 800271e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002722:	00e2      	lsls	r2, r4, #3
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	4643      	mov	r3, r8
 800272a:	18e3      	adds	r3, r4, r3
 800272c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002730:	464b      	mov	r3, r9
 8002732:	eb45 0303 	adc.w	r3, r5, r3
 8002736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002756:	4629      	mov	r1, r5
 8002758:	008b      	lsls	r3, r1, #2
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002760:	4621      	mov	r1, r4
 8002762:	008a      	lsls	r2, r1, #2
 8002764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002768:	f7fd fd36 	bl	80001d8 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4b60      	ldr	r3, [pc, #384]	@ (80028f4 <UART_SetConfig+0x4e4>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011c      	lsls	r4, r3, #4
 800277a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277e:	2200      	movs	r2, #0
 8002780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800278c:	4642      	mov	r2, r8
 800278e:	464b      	mov	r3, r9
 8002790:	1891      	adds	r1, r2, r2
 8002792:	61b9      	str	r1, [r7, #24]
 8002794:	415b      	adcs	r3, r3
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	4641      	mov	r1, r8
 800279e:	1851      	adds	r1, r2, r1
 80027a0:	6139      	str	r1, [r7, #16]
 80027a2:	4649      	mov	r1, r9
 80027a4:	414b      	adcs	r3, r1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b4:	4659      	mov	r1, fp
 80027b6:	00cb      	lsls	r3, r1, #3
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027be:	4651      	mov	r1, sl
 80027c0:	00ca      	lsls	r2, r1, #3
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	4642      	mov	r2, r8
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027d0:	464b      	mov	r3, r9
 80027d2:	460a      	mov	r2, r1
 80027d4:	eb42 0303 	adc.w	r3, r2, r3
 80027d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027f4:	4649      	mov	r1, r9
 80027f6:	008b      	lsls	r3, r1, #2
 80027f8:	4641      	mov	r1, r8
 80027fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027fe:	4641      	mov	r1, r8
 8002800:	008a      	lsls	r2, r1, #2
 8002802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002806:	f7fd fce7 	bl	80001d8 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4611      	mov	r1, r2
 8002810:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <UART_SetConfig+0x4e4>)
 8002812:	fba3 2301 	umull	r2, r3, r3, r1
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2264      	movs	r2, #100	@ 0x64
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	1acb      	subs	r3, r1, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	@ 0x32
 8002824:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <UART_SetConfig+0x4e4>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002830:	441c      	add	r4, r3
 8002832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002836:	2200      	movs	r2, #0
 8002838:	673b      	str	r3, [r7, #112]	@ 0x70
 800283a:	677a      	str	r2, [r7, #116]	@ 0x74
 800283c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	415b      	adcs	r3, r3
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002850:	4641      	mov	r1, r8
 8002852:	1851      	adds	r1, r2, r1
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	4649      	mov	r1, r9
 8002858:	414b      	adcs	r3, r1
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002868:	4659      	mov	r1, fp
 800286a:	00cb      	lsls	r3, r1, #3
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002872:	4651      	mov	r1, sl
 8002874:	00ca      	lsls	r2, r1, #3
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4603      	mov	r3, r0
 800287c:	4642      	mov	r2, r8
 800287e:	189b      	adds	r3, r3, r2
 8002880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002882:	464b      	mov	r3, r9
 8002884:	460a      	mov	r2, r1
 8002886:	eb42 0303 	adc.w	r3, r2, r3
 800288a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	663b      	str	r3, [r7, #96]	@ 0x60
 8002896:	667a      	str	r2, [r7, #100]	@ 0x64
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80028a4:	4649      	mov	r1, r9
 80028a6:	008b      	lsls	r3, r1, #2
 80028a8:	4641      	mov	r1, r8
 80028aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ae:	4641      	mov	r1, r8
 80028b0:	008a      	lsls	r2, r1, #2
 80028b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80028b6:	f7fd fc8f 	bl	80001d8 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <UART_SetConfig+0x4e4>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	@ 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	3332      	adds	r3, #50	@ 0x32
 80028d2:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <UART_SetConfig+0x4e4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4422      	add	r2, r4
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028ee:	46bd      	mov	sp, r7
 80028f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f4:	51eb851f 	.word	0x51eb851f

080028f8 <memset>:
 80028f8:	4402      	add	r2, r0
 80028fa:	4603      	mov	r3, r0
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d100      	bne.n	8002902 <memset+0xa>
 8002900:	4770      	bx	lr
 8002902:	f803 1b01 	strb.w	r1, [r3], #1
 8002906:	e7f9      	b.n	80028fc <memset+0x4>

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d0d      	ldr	r5, [pc, #52]	@ (8002940 <__libc_init_array+0x38>)
 800290c:	4c0d      	ldr	r4, [pc, #52]	@ (8002944 <__libc_init_array+0x3c>)
 800290e:	1b64      	subs	r4, r4, r5
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	2600      	movs	r6, #0
 8002914:	42a6      	cmp	r6, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	4d0b      	ldr	r5, [pc, #44]	@ (8002948 <__libc_init_array+0x40>)
 800291a:	4c0c      	ldr	r4, [pc, #48]	@ (800294c <__libc_init_array+0x44>)
 800291c:	f000 f818 	bl	8002950 <_init>
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	2600      	movs	r6, #0
 8002926:	42a6      	cmp	r6, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002930:	4798      	blx	r3
 8002932:	3601      	adds	r6, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	f855 3b04 	ldr.w	r3, [r5], #4
 800293a:	4798      	blx	r3
 800293c:	3601      	adds	r6, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	08002988 	.word	0x08002988
 8002944:	08002988 	.word	0x08002988
 8002948:	08002988 	.word	0x08002988
 800294c:	0800298c 	.word	0x0800298c

08002950 <_init>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr

0800295c <_fini>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr
