
stepper_ares.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e38  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e38  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009994  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019db  00000000  00000000  0000d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085f  00000000  00000000  0000fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172d4  00000000  00000000  000106d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4ea  00000000  00000000  000279ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097847  00000000  00000000  00033e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb6dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  000cb720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cdda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d78 	.word	0x08002d78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002d78 	.word	0x08002d78

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb76 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f840 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9c6 	bl	80005b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f89a 	bl	8000364 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000230:	f000 f942 	bl	80004b8 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//enable
 8000234:	23a0      	movs	r3, #160	@ 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2200      	movs	r2, #0
 800023a:	2120      	movs	r1, #32
 800023c:	0018      	movs	r0, r3
 800023e:	f000 fe29 	bl	8000e94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000242:	23a0      	movs	r3, #160	@ 0xa0
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2200      	movs	r2, #0
 8000248:	2110      	movs	r1, #16
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fe22 	bl	8000e94 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <main+0x88>)
 8000252:	2100      	movs	r1, #0
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fd87 	bl	8001d68 <HAL_TIM_PWM_Start>
  //  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  //  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1);
  while (1)
  {
	  // Sens horaire
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800025a:	23a0      	movs	r3, #160	@ 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fe16 	bl	8000e94 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499); // Ajuster la vitesse, 500
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <main+0x88>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	22f4      	movs	r2, #244	@ 0xf4
 800026e:	32ff      	adds	r2, #255	@ 0xff
 8000270:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000); // Attendre 2 secondes, precaller 360
 8000272:	23fa      	movs	r3, #250	@ 0xfa
 8000274:	00db      	lsls	r3, r3, #3
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fbd0 	bl	8000a1c <HAL_Delay>

	  // Sens antihoraire
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800027c:	23a0      	movs	r3, #160	@ 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2201      	movs	r2, #1
 8000282:	2110      	movs	r1, #16
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fe05 	bl	8000e94 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499);
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <main+0x88>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	22f4      	movs	r2, #244	@ 0xf4
 8000290:	32ff      	adds	r2, #255	@ 0xff
 8000292:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 8000294:	23fa      	movs	r3, #250	@ 0xfa
 8000296:	00db      	lsls	r3, r3, #3
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fbbf 	bl	8000a1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	e7db      	b.n	800025a <main+0x3e>
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	20000074 	.word	0x20000074

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	@ 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2410      	movs	r4, #16
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2338      	movs	r3, #56	@ 0x38
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fd31 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fd2a 	bl	8002d20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	2380      	movs	r3, #128	@ 0x80
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fdfd 	bl	8000ed0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2202      	movs	r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2280      	movs	r2, #128	@ 0x80
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2240      	movs	r2, #64	@ 0x40
 80002f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2209      	movs	r2, #9
 8000308:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	0292      	lsls	r2, r2, #10
 8000310:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	22a0      	movs	r2, #160	@ 0xa0
 8000316:	0512      	lsls	r2, r2, #20
 8000318:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	@ 0x80
 800031e:	05d2      	lsls	r2, r2, #23
 8000320:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fe13 	bl	8000f50 <HAL_RCC_OscConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800032e:	f000 f9c1 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	003b      	movs	r3, r7
 8000334:	2207      	movs	r2, #7
 8000336:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	003b      	movs	r3, r7
 800033a:	2202      	movs	r2, #2
 800033c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	003b      	movs	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034a:	003b      	movs	r3, r7
 800034c:	2101      	movs	r1, #1
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f918 	bl	8001584 <HAL_RCC_ClockConfig>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000358:	f000 f9ac 	bl	80006b4 <Error_Handler>
  }
}
 800035c:	46c0      	nop			@ (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b013      	add	sp, #76	@ 0x4c
 8000362:	bd90      	pop	{r4, r7, pc}

08000364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b098      	sub	sp, #96	@ 0x60
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036a:	2354      	movs	r3, #84	@ 0x54
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	0018      	movs	r0, r3
 8000370:	230c      	movs	r3, #12
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f002 fcd3 	bl	8002d20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037a:	2338      	movs	r3, #56	@ 0x38
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	231c      	movs	r3, #28
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f002 fccb 	bl	8002d20 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	0018      	movs	r0, r3
 800038e:	2334      	movs	r3, #52	@ 0x34
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f002 fcc4 	bl	8002d20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000398:	4b45      	ldr	r3, [pc, #276]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 800039a:	4a46      	ldr	r2, [pc, #280]	@ (80004b4 <MX_TIM1_Init+0x150>)
 800039c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800039e:	4b44      	ldr	r3, [pc, #272]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b42      	ldr	r3, [pc, #264]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8-1;
 80003aa:	4b41      	ldr	r3, [pc, #260]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b3f      	ldr	r3, [pc, #252]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b6:	4b3e      	ldr	r3, [pc, #248]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003bc:	4b3c      	ldr	r3, [pc, #240]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003c2:	4b3b      	ldr	r3, [pc, #236]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fc77 	bl	8001cb8 <HAL_TIM_PWM_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003ce:	f000 f971 	bl	80006b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d2:	2154      	movs	r1, #84	@ 0x54
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 fb8d 	bl	8002b0c <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003f6:	f000 f95d 	bl	80006b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fa:	2138      	movs	r1, #56	@ 0x38
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2260      	movs	r2, #96	@ 0x60
 8000400:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000426:	1879      	adds	r1, r7, r1
 8000428:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 800042a:	2208      	movs	r2, #8
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fd85 	bl	8001f3c <HAL_TIM_PWM_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000436:	f000 f93d 	bl	80006b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0192      	lsls	r2, r2, #6
 800045e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	0492      	lsls	r2, r2, #18
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800048c:	1d3a      	adds	r2, r7, #4
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fba8 	bl	8002be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800049c:	f000 f90a 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <MX_TIM1_Init+0x14c>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 f984 	bl	80007b0 <HAL_TIM_MspPostInit>

}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b018      	add	sp, #96	@ 0x60
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000028 	.word	0x20000028
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	@ 0x38
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	2328      	movs	r3, #40	@ 0x28
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	0018      	movs	r0, r3
 80004c4:	2310      	movs	r3, #16
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 fc29 	bl	8002d20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	231c      	movs	r3, #28
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	230c      	movs	r3, #12
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fc21 	bl	8002d20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004de:	003b      	movs	r3, r7
 80004e0:	0018      	movs	r0, r3
 80004e2:	231c      	movs	r3, #28
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f002 fc1a 	bl	8002d20 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004ee:	4a30      	ldr	r2, [pc, #192]	@ (80005b0 <MX_TIM3_Init+0xf8>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004f4:	22ef      	movs	r2, #239	@ 0xef
 80004f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b2c      	ldr	r3, [pc, #176]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80004fe:	4b2b      	ldr	r3, [pc, #172]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000500:	4a2c      	ldr	r2, [pc, #176]	@ (80005b4 <MX_TIM3_Init+0xfc>)
 8000502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b29      	ldr	r3, [pc, #164]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800050a:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800050c:	2280      	movs	r2, #128	@ 0x80
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000510:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fb78 	bl	8001c08 <HAL_TIM_Base_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800051c:	f000 f8ca 	bl	80006b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000520:	2128      	movs	r1, #40	@ 0x28
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	0152      	lsls	r2, r2, #5
 8000528:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052a:	187a      	adds	r2, r7, r1
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fe03 	bl	800213c <HAL_TIM_ConfigClockSource>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800053a:	f000 f8bb 	bl	80006b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800053e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fbb9 	bl	8001cb8 <HAL_TIM_PWM_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800054a:	f000 f8b3 	bl	80006b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	211c      	movs	r1, #28
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800055c:	187a      	adds	r2, r7, r1
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f002 fad2 	bl	8002b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800056c:	f000 f8a2 	bl	80006b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	003b      	movs	r3, r7
 8000572:	2260      	movs	r2, #96	@ 0x60
 8000574:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000588:	0039      	movs	r1, r7
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fcd4 	bl	8001f3c <HAL_TIM_PWM_ConfigChannel>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000598:	f000 f88c 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 f906 	bl	80007b0 <HAL_TIM_MspPostInit>

}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b00e      	add	sp, #56	@ 0x38
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000074 	.word	0x20000074
 80005b0:	40000400 	.word	0x40000400
 80005b4:	000003e7 	.word	0x000003e7

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	@ 0x24
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	240c      	movs	r4, #12
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 fba9 	bl	8002d20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b36      	ldr	r3, [pc, #216]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005da:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ea:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005ec:	2104      	movs	r1, #4
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005f2:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f6:	2204      	movs	r2, #4
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b2a      	ldr	r3, [pc, #168]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000602:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000604:	2102      	movs	r1, #2
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	@ 0x34
 800060a:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060e:	2202      	movs	r2, #2
 8000610:	4013      	ands	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dir2_Pin|EN2_Pin|dir1_Pin, GPIO_PIN_RESET);
 8000616:	238c      	movs	r3, #140	@ 0x8c
 8000618:	0099      	lsls	r1, r3, #2
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fc37 	bl	8000e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_GPIO_Init+0xf4>)
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	@ 0x40
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fc31 	bl	8000e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dir2_Pin EN2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin|EN2_Pin|dir1_Pin;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	228c      	movs	r2, #140	@ 0x8c
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2201      	movs	r2, #1
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	193a      	adds	r2, r7, r4
 800064e:	23a0      	movs	r3, #160	@ 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fab9 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2240      	movs	r2, #64	@ 0x40
 800065e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2201      	movs	r2, #1
 8000664:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000672:	193b      	adds	r3, r7, r4
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <MX_GPIO_Init+0xf4>)
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f000 faa7 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Imput_1_Pin GPIO_Imput_2_Pin */
  GPIO_InitStruct.Pin = GPIO_Imput_1_Pin|GPIO_Imput_2_Pin;
 800067e:	0021      	movs	r1, r4
 8000680:	187b      	adds	r3, r7, r1
 8000682:	22c0      	movs	r2, #192	@ 0xc0
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	187b      	adds	r3, r7, r1
 8000694:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <MX_GPIO_Init+0xf8>)
 8000696:	0019      	movs	r1, r3
 8000698:	0010      	movs	r0, r2
 800069a:	f000 fa97 	bl	8000bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b009      	add	sp, #36	@ 0x24
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000
 80006ac:	50000800 	.word	0x50000800
 80006b0:	50000400 	.word	0x50000400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x44>)
 80006c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <HAL_MspInit+0x44>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x44>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x44>)
 80006e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_MspInit+0x44>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	0549      	lsls	r1, r1, #21
 80006e8:	430a      	orrs	r2, r1
 80006ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_MspInit+0x44>)
 80006ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	055b      	lsls	r3, r3, #21
 80006f4:	4013      	ands	r3, r2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b091      	sub	sp, #68	@ 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	240c      	movs	r4, #12
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 fb00 	bl	8002d20 <memset>
  if(htim_pwm->Instance==TIM1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a11      	ldr	r2, [pc, #68]	@ (800076c <HAL_TIM_PWM_MspInit+0x64>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d11c      	bne.n	8000764 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	0392      	lsls	r2, r2, #14
 8000730:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f8ac 	bl	8001898 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000744:	f7ff ffb6 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_TIM_PWM_MspInit+0x68>)
 800074a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <HAL_TIM_PWM_MspInit+0x68>)
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	0109      	lsls	r1, r1, #4
 8000752:	430a      	orrs	r2, r1
 8000754:	641a      	str	r2, [r3, #64]	@ 0x40
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_TIM_PWM_MspInit+0x68>)
 8000758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	4013      	ands	r3, r2
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b011      	add	sp, #68	@ 0x44
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40012c00 	.word	0x40012c00
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <HAL_TIM_Base_MspInit+0x34>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d10b      	bne.n	800079e <HAL_TIM_Base_MspInit+0x2a>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_TIM_Base_MspInit+0x38>)
 8000788:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_TIM_Base_MspInit+0x38>)
 800078c:	2102      	movs	r1, #2
 800078e:	430a      	orrs	r2, r1
 8000790:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_TIM_Base_MspInit+0x38>)
 8000794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000796:	2202      	movs	r2, #2
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	40000400 	.word	0x40000400
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b08b      	sub	sp, #44	@ 0x2c
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	2414      	movs	r4, #20
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	2314      	movs	r3, #20
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 faac 	bl	8002d20 <memset>
  if(htim->Instance==TIM1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <HAL_TIM_MspPostInit+0xc4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d124      	bne.n	800081c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 80007d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007d6:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 80007d8:	2101      	movs	r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 80007e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	00d2      	lsls	r2, r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2202      	movs	r2, #2
 80007f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2202      	movs	r2, #2
 800080a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 800080c:	187a      	adds	r2, r7, r1
 800080e:	23a0      	movs	r3, #160	@ 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 f9d9 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800081a:	e027      	b.n	800086c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a16      	ldr	r2, [pc, #88]	@ (800087c <HAL_TIM_MspPostInit+0xcc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d122      	bne.n	800086c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_TIM_MspPostInit+0xc8>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = step2_Pin;
 800083e:	2114      	movs	r1, #20
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2240      	movs	r2, #64	@ 0x40
 8000844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f9b0 	bl	8000bcc <HAL_GPIO_Init>
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00b      	add	sp, #44	@ 0x2c
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40012c00 	.word	0x40012c00
 8000878:	40021000 	.word	0x40021000
 800087c:	40000400 	.word	0x40000400

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f89c 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f7ff fff7 	bl	80008b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	@ (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f002 fa21 	bl	8002d30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008ee:	f7ff fc95 	bl	800021c <main>

080008f2 <LoopForever>:

LoopForever:
  b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000900:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8000904:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000908:	200000c4 	.word	0x200000c4

0800090c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_COMP_IRQHandler>
	...

08000910 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_Init+0x3c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_Init+0x3c>)
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	0049      	lsls	r1, r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092a:	2003      	movs	r0, #3
 800092c:	f000 f810 	bl	8000950 <HAL_InitTick>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d003      	beq.n	800093c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e001      	b.n	8000940 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fec0 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	230f      	movs	r3, #15
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <HAL_InitTick+0x88>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d02b      	beq.n	80009c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_InitTick+0x8c>)
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_InitTick+0x88>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0019      	movs	r1, r3
 8000972:	23fa      	movs	r3, #250	@ 0xfa
 8000974:	0098      	lsls	r0, r3, #2
 8000976:	f7ff fbc5 	bl	8000104 <__udivsi3>
 800097a:	0003      	movs	r3, r0
 800097c:	0019      	movs	r1, r3
 800097e:	0020      	movs	r0, r4
 8000980:	f7ff fbc0 	bl	8000104 <__udivsi3>
 8000984:	0003      	movs	r3, r0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f913 	bl	8000bb2 <HAL_SYSTICK_Config>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d112      	bne.n	80009b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d80a      	bhi.n	80009ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2301      	movs	r3, #1
 800099a:	425b      	negs	r3, r3
 800099c:	2200      	movs	r2, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f8f2 	bl	8000b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_InitTick+0x90>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	e00d      	b.n	80009c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009ac:	230f      	movs	r3, #15
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e008      	b.n	80009c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b6:	230f      	movs	r3, #15
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e003      	b.n	80009c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009c8:	230f      	movs	r3, #15
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	781b      	ldrb	r3, [r3, #0]
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b005      	add	sp, #20
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000c0 	.word	0x200000c0

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	200000c0 	.word	0x200000c0

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a78:	d828      	bhi.n	8000acc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <__NVIC_SetPriority+0xd4>)
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	33c0      	adds	r3, #192	@ 0xc0
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	589b      	ldr	r3, [r3, r2]
 8000a8a:	1dfa      	adds	r2, r7, #7
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	400a      	ands	r2, r1
 8000a94:	00d2      	lsls	r2, r2, #3
 8000a96:	21ff      	movs	r1, #255	@ 0xff
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	43d2      	mvns	r2, r2
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	22ff      	movs	r2, #255	@ 0xff
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	481f      	ldr	r0, [pc, #124]	@ (8000b38 <__NVIC_SetPriority+0xd4>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	33c0      	adds	r3, #192	@ 0xc0
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aca:	e031      	b.n	8000b30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <__NVIC_SetPriority+0xd8>)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	400b      	ands	r3, r1
 8000ad8:	3b08      	subs	r3, #8
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3306      	adds	r3, #6
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1dfa      	adds	r2, r7, #7
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	0011      	movs	r1, r2
 8000aec:	2203      	movs	r2, #3
 8000aee:	400a      	ands	r2, r1
 8000af0:	00d2      	lsls	r2, r2, #3
 8000af2:	21ff      	movs	r1, #255	@ 0xff
 8000af4:	4091      	lsls	r1, r2
 8000af6:	000a      	movs	r2, r1
 8000af8:	43d2      	mvns	r2, r2
 8000afa:	401a      	ands	r2, r3
 8000afc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	019b      	lsls	r3, r3, #6
 8000b02:	22ff      	movs	r2, #255	@ 0xff
 8000b04:	401a      	ands	r2, r3
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	4003      	ands	r3, r0
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b14:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <__NVIC_SetPriority+0xd8>)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	001c      	movs	r4, r3
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	4023      	ands	r3, r4
 8000b20:	3b08      	subs	r3, #8
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	430a      	orrs	r2, r1
 8000b26:	3306      	adds	r3, #6
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	18c3      	adds	r3, r0, r3
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b003      	add	sp, #12
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	045b      	lsls	r3, r3, #17
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d301      	bcc.n	8000b58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b54:	2301      	movs	r3, #1
 8000b56:	e010      	b.n	8000b7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <SysTick_Config+0x44>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2103      	movs	r1, #3
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff7c 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <SysTick_Config+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SysTick_Config+0x44>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	210f      	movs	r1, #15
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	1c02      	adds	r2, r0, #0
 8000b98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ffbf 	bl	8000b40 <SysTick_Config>
 8000bc2:	0003      	movs	r3, r0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e147      	b.n	8000e6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x28>
 8000bf2:	e138      	b.n	8000e66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <HAL_GPIO_Init+0x40>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	2201      	movs	r2, #1
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2203      	movs	r2, #3
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d017      	beq.n	8000caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d123      	bne.n	8000cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	58d3      	ldr	r3, [r2, r3]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	4013      	ands	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2107      	movs	r1, #7
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	23c0      	movs	r3, #192	@ 0xc0
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_GPIO_Init+0x174>
 8000d3e:	e092      	b.n	8000e66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d40:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3318      	adds	r3, #24
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	589b      	ldr	r3, [r3, r2]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2203      	movs	r2, #3
 8000d52:	4013      	ands	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	220f      	movs	r2, #15
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	23a0      	movs	r3, #160	@ 0xa0
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x1ca>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a45      	ldr	r2, [pc, #276]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x1c6>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a44      	ldr	r2, [pc, #272]	@ (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x1c2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a43      	ldr	r2, [pc, #268]	@ (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x1be>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x1cc>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x1cc>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x1cc>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x1cc>
 8000d96:	2300      	movs	r3, #0
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	4093      	lsls	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000da8:	4936      	ldr	r1, [pc, #216]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3318      	adds	r3, #24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db6:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	035b      	lsls	r3, r3, #13
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dda:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000de0:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	039b      	lsls	r3, r3, #14
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000e0c:	2384      	movs	r3, #132	@ 0x84
 8000e0e:	58d3      	ldr	r3, [r2, r3]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e30:	4914      	ldr	r1, [pc, #80]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000e32:	2284      	movs	r2, #132	@ 0x84
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e38:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	58d3      	ldr	r3, [r2, r3]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	4013      	ands	r3, r2
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5e:	4909      	ldr	r1, [pc, #36]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e13      	subs	r3, r2, #0
 8000e76:	d000      	beq.n	8000e7a <HAL_GPIO_Init+0x2ae>
 8000e78:	e6b0      	b.n	8000bdc <HAL_GPIO_Init+0x10>
  }
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021800 	.word	0x40021800
 8000e88:	50000400 	.word	0x50000400
 8000e8c:	50000800 	.word	0x50000800
 8000e90:	50000c00 	.word	0x50000c00

08000e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	0008      	movs	r0, r1
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	1cbb      	adds	r3, r7, #2
 8000ea2:	1c02      	adds	r2, r0, #0
 8000ea4:	801a      	strh	r2, [r3, #0]
 8000ea6:	1c7b      	adds	r3, r7, #1
 8000ea8:	1c0a      	adds	r2, r1, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	1c7b      	adds	r3, r7, #1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb4:	1cbb      	adds	r3, r7, #2
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	1cbb      	adds	r3, r7, #2
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d11f      	bne.n	8000f34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	0013      	movs	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4912      	ldr	r1, [pc, #72]	@ (8000f4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff f8fe 	bl	8000104 <__udivsi3>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f0e:	e008      	b.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e001      	b.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e009      	b.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d0ed      	beq.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	40007000 	.word	0x40007000
 8000f44:	fffff9ff 	.word	0xfffff9ff
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	000f4240 	.word	0x000f4240

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e2fe      	b.n	8001560 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d100      	bne.n	8000f6e <HAL_RCC_OscConfig+0x1e>
 8000f6c:	e07c      	b.n	8001068 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6e:	4bc3      	ldr	r3, [pc, #780]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2238      	movs	r2, #56	@ 0x38
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f78:	4bc0      	ldr	r3, [pc, #768]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d102      	bne.n	8000f8e <HAL_RCC_OscConfig+0x3e>
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d002      	beq.n	8000f94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d10b      	bne.n	8000fac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	4bb9      	ldr	r3, [pc, #740]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	029b      	lsls	r3, r3, #10
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d062      	beq.n	8001066 <HAL_RCC_OscConfig+0x116>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d15e      	bne.n	8001066 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e2d9      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d107      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x78>
 8000fb8:	4bb0      	ldr	r3, [pc, #704]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4baf      	ldr	r3, [pc, #700]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e020      	b.n	800100a <HAL_RCC_OscConfig+0xba>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	23a0      	movs	r3, #160	@ 0xa0
 8000fce:	02db      	lsls	r3, r3, #11
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d10e      	bne.n	8000ff2 <HAL_RCC_OscConfig+0xa2>
 8000fd4:	4ba9      	ldr	r3, [pc, #676]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4ba8      	ldr	r3, [pc, #672]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fda:	2180      	movs	r1, #128	@ 0x80
 8000fdc:	02c9      	lsls	r1, r1, #11
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	4ba6      	ldr	r3, [pc, #664]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4ba5      	ldr	r3, [pc, #660]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	0249      	lsls	r1, r1, #9
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e00b      	b.n	800100a <HAL_RCC_OscConfig+0xba>
 8000ff2:	4ba2      	ldr	r3, [pc, #648]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4ba1      	ldr	r3, [pc, #644]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	49a1      	ldr	r1, [pc, #644]	@ (8001280 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	4b9f      	ldr	r3, [pc, #636]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b9e      	ldr	r3, [pc, #632]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001004:	499f      	ldr	r1, [pc, #636]	@ (8001284 <HAL_RCC_OscConfig+0x334>)
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d014      	beq.n	800103c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff fcf9 	bl	8000a08 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fcf4 	bl	8000a08 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	@ 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e298      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800102e:	4b93      	ldr	r3, [pc, #588]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	029b      	lsls	r3, r3, #10
 8001036:	4013      	ands	r3, r2
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0xcc>
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103c:	f7ff fce4 	bl	8000a08 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff fcdf 	bl	8000a08 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e283      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001058:	4b88      	ldr	r3, [pc, #544]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0xf6>
 8001064:	e000      	b.n	8001068 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001066:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	4013      	ands	r3, r2
 8001070:	d100      	bne.n	8001074 <HAL_RCC_OscConfig+0x124>
 8001072:	e099      	b.n	80011a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001074:	4b81      	ldr	r3, [pc, #516]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2238      	movs	r2, #56	@ 0x38
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800107e:	4b7f      	ldr	r3, [pc, #508]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2203      	movs	r2, #3
 8001084:	4013      	ands	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x144>
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d002      	beq.n	800109a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d135      	bne.n	8001106 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109a:	4b78      	ldr	r3, [pc, #480]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x162>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e256      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b72      	ldr	r3, [pc, #456]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a74      	ldr	r2, [pc, #464]	@ (8001288 <HAL_RCC_OscConfig+0x338>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	0019      	movs	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	021a      	lsls	r2, r3, #8
 80010c2:	4b6e      	ldr	r3, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80010c4:	430a      	orrs	r2, r1
 80010c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010ce:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6e      	ldr	r2, [pc, #440]	@ (800128c <HAL_RCC_OscConfig+0x33c>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	0019      	movs	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	4b67      	ldr	r3, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010e2:	4b66      	ldr	r3, [pc, #408]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	2207      	movs	r2, #7
 80010ea:	4013      	ands	r3, r2
 80010ec:	4a68      	ldr	r2, [pc, #416]	@ (8001290 <HAL_RCC_OscConfig+0x340>)
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	4b68      	ldr	r3, [pc, #416]	@ (8001294 <HAL_RCC_OscConfig+0x344>)
 80010f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010f4:	4b68      	ldr	r3, [pc, #416]	@ (8001298 <HAL_RCC_OscConfig+0x348>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff fc29 	bl	8000950 <HAL_InitTick>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d051      	beq.n	80011a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e22c      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d030      	beq.n	8001170 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800110e:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a5e      	ldr	r2, [pc, #376]	@ (800128c <HAL_RCC_OscConfig+0x33c>)
 8001114:	4013      	ands	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	4b57      	ldr	r3, [pc, #348]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	4b56      	ldr	r3, [pc, #344]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b55      	ldr	r3, [pc, #340]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0049      	lsls	r1, r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fc6a 	bl	8000a08 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fc65 	bl	8000a08 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e209      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800114c:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4013      	ands	r3, r2
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a4a      	ldr	r2, [pc, #296]	@ (8001288 <HAL_RCC_OscConfig+0x338>)
 800115e:	4013      	ands	r3, r2
 8001160:	0019      	movs	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	021a      	lsls	r2, r3, #8
 8001168:	4b44      	ldr	r3, [pc, #272]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800116a:	430a      	orrs	r2, r1
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	e01b      	b.n	80011a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001170:	4b42      	ldr	r3, [pc, #264]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b41      	ldr	r3, [pc, #260]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001176:	4949      	ldr	r1, [pc, #292]	@ (800129c <HAL_RCC_OscConfig+0x34c>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc44 	bl	8000a08 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fc3f 	bl	8000a08 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1e3      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001198:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x236>
 80011a4:	e000      	b.n	80011a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2208      	movs	r2, #8
 80011ae:	4013      	ands	r3, r2
 80011b0:	d047      	beq.n	8001242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011b2:	4b32      	ldr	r3, [pc, #200]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2238      	movs	r2, #56	@ 0x38
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b18      	cmp	r3, #24
 80011bc:	d10a      	bne.n	80011d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	d03c      	beq.n	8001242 <HAL_RCC_OscConfig+0x2f2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d138      	bne.n	8001242 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e1c5      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d019      	beq.n	8001210 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80011de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011e0:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc0e 	bl	8000a08 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc09 	bl	8000a08 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1ad      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001208:	2202      	movs	r2, #2
 800120a:	4013      	ands	r3, r2
 800120c:	d0f1      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2a2>
 800120e:	e018      	b.n	8001242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001212:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fbf4 	bl	8000a08 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fbef 	bl	8000a08 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e193      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123c:	2202      	movs	r2, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d1f1      	bne.n	8001226 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2204      	movs	r2, #4
 8001248:	4013      	ands	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x2fe>
 800124c:	e0c6      	b.n	80013dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124e:	231f      	movs	r3, #31
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2238      	movs	r2, #56	@ 0x38
 800125c:	4013      	ands	r3, r2
 800125e:	2b20      	cmp	r3, #32
 8001260:	d11e      	bne.n	80012a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_RCC_OscConfig+0x32c>)
 8001264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x31e>
 800126c:	e0b6      	b.n	80013dc <HAL_RCC_OscConfig+0x48c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d000      	beq.n	8001278 <HAL_RCC_OscConfig+0x328>
 8001276:	e0b1      	b.n	80013dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e171      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
 800127c:	40021000 	.word	0x40021000
 8001280:	fffeffff 	.word	0xfffeffff
 8001284:	fffbffff 	.word	0xfffbffff
 8001288:	ffff80ff 	.word	0xffff80ff
 800128c:	ffffc7ff 	.word	0xffffc7ff
 8001290:	00f42400 	.word	0x00f42400
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004
 800129c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80012a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	4013      	ands	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_OscConfig+0x360>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x362>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d011      	beq.n	80012da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4bac      	ldr	r3, [pc, #688]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80012b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ba:	4bab      	ldr	r3, [pc, #684]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	0549      	lsls	r1, r1, #21
 80012c0:	430a      	orrs	r2, r1
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80012c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	055b      	lsls	r3, r3, #21
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012d2:	231f      	movs	r3, #31
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	4ba4      	ldr	r3, [pc, #656]	@ (800156c <HAL_RCC_OscConfig+0x61c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d11a      	bne.n	800131c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e6:	4ba1      	ldr	r3, [pc, #644]	@ (800156c <HAL_RCC_OscConfig+0x61c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4ba0      	ldr	r3, [pc, #640]	@ (800156c <HAL_RCC_OscConfig+0x61c>)
 80012ec:	2180      	movs	r1, #128	@ 0x80
 80012ee:	0049      	lsls	r1, r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb88 	bl	8000a08 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7ff fb83 	bl	8000a08 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e127      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001310:	4b96      	ldr	r3, [pc, #600]	@ (800156c <HAL_RCC_OscConfig+0x61c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x3e2>
 8001324:	4b90      	ldr	r3, [pc, #576]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001328:	4b8f      	ldr	r3, [pc, #572]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800132a:	2101      	movs	r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001330:	e01c      	b.n	800136c <HAL_RCC_OscConfig+0x41c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x404>
 800133a:	4b8b      	ldr	r3, [pc, #556]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800133c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800133e:	4b8a      	ldr	r3, [pc, #552]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001340:	2104      	movs	r1, #4
 8001342:	430a      	orrs	r2, r1
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001346:	4b88      	ldr	r3, [pc, #544]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800134a:	4b87      	ldr	r3, [pc, #540]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0x41c>
 8001354:	4b84      	ldr	r3, [pc, #528]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001358:	4b83      	ldr	r3, [pc, #524]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800135a:	2101      	movs	r1, #1
 800135c:	438a      	bics	r2, r1
 800135e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001360:	4b81      	ldr	r3, [pc, #516]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001364:	4b80      	ldr	r3, [pc, #512]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001366:	2104      	movs	r1, #4
 8001368:	438a      	bics	r2, r1
 800136a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d014      	beq.n	800139e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fb48 	bl	8000a08 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137c:	e009      	b.n	8001392 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fb43 	bl	8000a08 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a79      	ldr	r2, [pc, #484]	@ (8001570 <HAL_RCC_OscConfig+0x620>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e0e6      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	4b75      	ldr	r3, [pc, #468]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x42e>
 800139c:	e013      	b.n	80013c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fb33 	bl	8000a08 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a6:	e009      	b.n	80013bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f7ff fb2e 	bl	8000a08 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001570 <HAL_RCC_OscConfig+0x620>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0d1      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80013be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013c6:	231f      	movs	r3, #31
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013d0:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80013d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d4:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80013d6:	4967      	ldr	r1, [pc, #412]	@ (8001574 <HAL_RCC_OscConfig+0x624>)
 80013d8:	400a      	ands	r2, r1
 80013da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x496>
 80013e4:	e0bb      	b.n	800155e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e6:	4b60      	ldr	r3, [pc, #384]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2238      	movs	r2, #56	@ 0x38
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d100      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4a4>
 80013f2:	e07b      	b.n	80014ec <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d156      	bne.n	80014aa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b59      	ldr	r3, [pc, #356]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001402:	495d      	ldr	r1, [pc, #372]	@ (8001578 <HAL_RCC_OscConfig+0x628>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fafe 	bl	8000a08 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff faf9 	bl	8000a08 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e09d      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	049b      	lsls	r3, r3, #18
 800142c:	4013      	ands	r3, r2
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001430:	4b4d      	ldr	r3, [pc, #308]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a51      	ldr	r2, [pc, #324]	@ (800157c <HAL_RCC_OscConfig+0x62c>)
 8001436:	4013      	ands	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145c:	431a      	orrs	r2, r3
 800145e:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800146a:	2180      	movs	r1, #128	@ 0x80
 800146c:	0449      	lsls	r1, r1, #17
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	0549      	lsls	r1, r1, #21
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fac2 	bl	8000a08 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fabd 	bl	8000a08 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e061      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	049b      	lsls	r3, r3, #18
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x53a>
 80014a8:	e059      	b.n	800155e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014b0:	4931      	ldr	r1, [pc, #196]	@ (8001578 <HAL_RCC_OscConfig+0x628>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff faa7 	bl	8000a08 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff faa2 	bl	8000a08 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e046      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d2:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	049b      	lsls	r3, r3, #18
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014e4:	4926      	ldr	r1, [pc, #152]	@ (8001580 <HAL_RCC_OscConfig+0x630>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	e038      	b.n	800155e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e033      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_RCC_OscConfig+0x618>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2203      	movs	r2, #3
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	429a      	cmp	r2, r3
 800150a:	d126      	bne.n	800155a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2270      	movs	r2, #112	@ 0x70
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d11f      	bne.n	800155a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	23fe      	movs	r3, #254	@ 0xfe
 800151e:	01db      	lsls	r3, r3, #7
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d116      	bne.n	800155a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	23f8      	movs	r3, #248	@ 0xf8
 8001530:	039b      	lsls	r3, r3, #14
 8001532:	401a      	ands	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d10e      	bne.n	800155a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	23e0      	movs	r3, #224	@ 0xe0
 8001540:	051b      	lsls	r3, r3, #20
 8001542:	401a      	ands	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	0f5b      	lsrs	r3, r3, #29
 8001550:	075a      	lsls	r2, r3, #29
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b008      	add	sp, #32
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	40007000 	.word	0x40007000
 8001570:	00001388 	.word	0x00001388
 8001574:	efffffff 	.word	0xefffffff
 8001578:	feffffff 	.word	0xfeffffff
 800157c:	11c1808c 	.word	0x11c1808c
 8001580:	eefefffc 	.word	0xeefefffc

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0e9      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b76      	ldr	r3, [pc, #472]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2207      	movs	r2, #7
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d91e      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b73      	ldr	r3, [pc, #460]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2207      	movs	r2, #7
 80015ac:	4393      	bics	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	4b70      	ldr	r3, [pc, #448]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fa26 	bl	8000a08 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015c0:	e009      	b.n	80015d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c2:	f7ff fa21 	bl	8000a08 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <HAL_RCC_ClockConfig+0x1f4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0ca      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d6:	4b67      	ldr	r3, [pc, #412]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2207      	movs	r2, #7
 80015dc:	4013      	ands	r3, r2
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d015      	beq.n	800161a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	d006      	beq.n	8001606 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015f8:	4b60      	ldr	r3, [pc, #384]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 80015fe:	21e0      	movs	r1, #224	@ 0xe0
 8001600:	01c9      	lsls	r1, r1, #7
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001606:	4b5d      	ldr	r3, [pc, #372]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4a5d      	ldr	r2, [pc, #372]	@ (8001780 <HAL_RCC_ClockConfig+0x1fc>)
 800160c:	4013      	ands	r3, r2
 800160e:	0019      	movs	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	4013      	ands	r3, r2
 8001622:	d057      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d107      	bne.n	800163c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d12b      	bne.n	8001690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e097      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d107      	bne.n	8001654 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001644:	4b4d      	ldr	r3, [pc, #308]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	049b      	lsls	r3, r3, #18
 800164c:	4013      	ands	r3, r2
 800164e:	d11f      	bne.n	8001690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e08b      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4013      	ands	r3, r2
 8001666:	d113      	bne.n	8001690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e07f      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d106      	bne.n	8001682 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001674:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d108      	bne.n	8001690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e074      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001682:	4b3e      	ldr	r3, [pc, #248]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e06d      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001690:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2207      	movs	r2, #7
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a4:	f7ff f9b0 	bl	8000a08 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ac:	e009      	b.n	80016c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ae:	f7ff f9ab 	bl	8000a08 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001778 <HAL_RCC_ClockConfig+0x1f4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e054      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2238      	movs	r2, #56	@ 0x38
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1ec      	bne.n	80016ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2207      	movs	r2, #7
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d21e      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f988 	bl	8000a08 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f983 	bl	8000a08 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_RCC_ClockConfig+0x1f4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e02c      	b.n	800176c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2207      	movs	r2, #7
 8001718:	4013      	ands	r3, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2204      	movs	r2, #4
 8001726:	4013      	ands	r3, r2
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <HAL_RCC_ClockConfig+0x200>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800173e:	f000 f829 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001742:	0001      	movs	r1, r0
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	220f      	movs	r2, #15
 800174c:	401a      	ands	r2, r3
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_RCC_ClockConfig+0x204>)
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	58d3      	ldr	r3, [r2, r3]
 8001754:	221f      	movs	r2, #31
 8001756:	4013      	ands	r3, r2
 8001758:	000a      	movs	r2, r1
 800175a:	40da      	lsrs	r2, r3
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_RCC_ClockConfig+0x208>)
 800175e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_RCC_ClockConfig+0x20c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff f8f3 	bl	8000950 <HAL_InitTick>
 800176a:	0003      	movs	r3, r0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40022000 	.word	0x40022000
 8001778:	00001388 	.word	0x00001388
 800177c:	40021000 	.word	0x40021000
 8001780:	fffff0ff 	.word	0xfffff0ff
 8001784:	ffff8fff 	.word	0xffff8fff
 8001788:	08002d90 	.word	0x08002d90
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2238      	movs	r2, #56	@ 0x38
 80017a0:	4013      	ands	r3, r2
 80017a2:	d10f      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0adb      	lsrs	r3, r3, #11
 80017aa:	2207      	movs	r2, #7
 80017ac:	4013      	ands	r3, r2
 80017ae:	2201      	movs	r2, #1
 80017b0:	409a      	lsls	r2, r3
 80017b2:	0013      	movs	r3, r2
 80017b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	4835      	ldr	r0, [pc, #212]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ba:	f7fe fca3 	bl	8000104 <__udivsi3>
 80017be:	0003      	movs	r3, r0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e05d      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2238      	movs	r2, #56	@ 0x38
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017d0:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x100>)
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e054      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2238      	movs	r2, #56	@ 0x38
 80017dc:	4013      	ands	r3, r2
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d138      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017e2:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	2207      	movs	r2, #7
 80017f4:	4013      	ands	r3, r2
 80017f6:	3301      	adds	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d10d      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	4824      	ldr	r0, [pc, #144]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x100>)
 8001804:	f7fe fc7e 	bl	8000104 <__udivsi3>
 8001808:	0003      	movs	r3, r0
 800180a:	0019      	movs	r1, r3
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	227f      	movs	r2, #127	@ 0x7f
 8001814:	4013      	ands	r3, r2
 8001816:	434b      	muls	r3, r1
 8001818:	617b      	str	r3, [r7, #20]
        break;
 800181a:	e00d      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	481c      	ldr	r0, [pc, #112]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001820:	f7fe fc70 	bl	8000104 <__udivsi3>
 8001824:	0003      	movs	r3, r0
 8001826:	0019      	movs	r1, r3
 8001828:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	227f      	movs	r2, #127	@ 0x7f
 8001830:	4013      	ands	r3, r2
 8001832:	434b      	muls	r3, r1
 8001834:	617b      	str	r3, [r7, #20]
        break;
 8001836:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0f5b      	lsrs	r3, r3, #29
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	3301      	adds	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	6978      	ldr	r0, [r7, #20]
 800184a:	f7fe fc5b 	bl	8000104 <__udivsi3>
 800184e:	0003      	movs	r3, r0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	e015      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2238      	movs	r2, #56	@ 0x38
 800185a:	4013      	ands	r3, r2
 800185c:	2b20      	cmp	r3, #32
 800185e:	d103      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2238      	movs	r2, #56	@ 0x38
 800186e:	4013      	ands	r3, r2
 8001870:	2b18      	cmp	r3, #24
 8001872:	d103      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001874:	23fa      	movs	r3, #250	@ 0xfa
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e001      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001880:	693b      	ldr	r3, [r7, #16]
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b006      	add	sp, #24
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	40021000 	.word	0x40021000
 8001890:	00f42400 	.word	0x00f42400
 8001894:	007a1200 	.word	0x007a1200

08001898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80018a0:	2313      	movs	r3, #19
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018a8:	2312      	movs	r3, #18
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d100      	bne.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018bc:	e0a3      	b.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2011      	movs	r0, #17
 80018c0:	183b      	adds	r3, r7, r0
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c6:	4bc3      	ldr	r3, [pc, #780]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	055b      	lsls	r3, r3, #21
 80018ce:	4013      	ands	r3, r2
 80018d0:	d110      	bne.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4bc0      	ldr	r3, [pc, #768]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d6:	4bbf      	ldr	r3, [pc, #764]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018d8:	2180      	movs	r1, #128	@ 0x80
 80018da:	0549      	lsls	r1, r1, #21
 80018dc:	430a      	orrs	r2, r1
 80018de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018e0:	4bbc      	ldr	r3, [pc, #752]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	183b      	adds	r3, r7, r0
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f4:	4bb8      	ldr	r3, [pc, #736]	@ (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4bb7      	ldr	r3, [pc, #732]	@ (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	0049      	lsls	r1, r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001902:	f7ff f881 	bl	8000a08 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800190a:	e00b      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190c:	f7ff f87c 	bl	8000a08 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d904      	bls.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800191a:	2313      	movs	r3, #19
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2203      	movs	r2, #3
 8001920:	701a      	strb	r2, [r3, #0]
        break;
 8001922:	e005      	b.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001924:	4bac      	ldr	r3, [pc, #688]	@ (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d0ed      	beq.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001930:	2313      	movs	r3, #19
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d154      	bne.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800193a:	4ba6      	ldr	r3, [pc, #664]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800193c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800193e:	23c0      	movs	r3, #192	@ 0xc0
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4013      	ands	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d019      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	429a      	cmp	r2, r3
 8001954:	d014      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001956:	4b9f      	ldr	r3, [pc, #636]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	4aa0      	ldr	r2, [pc, #640]	@ (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800195c:	4013      	ands	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001960:	4b9c      	ldr	r3, [pc, #624]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001962:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001964:	4b9b      	ldr	r3, [pc, #620]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001966:	2180      	movs	r1, #128	@ 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	430a      	orrs	r2, r1
 800196c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800196e:	4b99      	ldr	r3, [pc, #612]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001972:	4b98      	ldr	r3, [pc, #608]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001974:	499a      	ldr	r1, [pc, #616]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001976:	400a      	ands	r2, r1
 8001978:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800197a:	4b96      	ldr	r3, [pc, #600]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	d016      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f83e 	bl	8000a08 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001990:	e00c      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f839 	bl	8000a08 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a91      	ldr	r2, [pc, #580]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d904      	bls.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80019a2:	2313      	movs	r3, #19
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2203      	movs	r2, #3
 80019a8:	701a      	strb	r2, [r3, #0]
            break;
 80019aa:	e004      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ac:	4b89      	ldr	r3, [pc, #548]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0ed      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80019b6:	2313      	movs	r3, #19
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019c0:	4b84      	ldr	r3, [pc, #528]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c4:	4a85      	ldr	r2, [pc, #532]	@ (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ce:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019d4:	e00c      	b.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019d6:	2312      	movs	r3, #18
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2213      	movs	r2, #19
 80019dc:	18ba      	adds	r2, r7, r2
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e005      	b.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019e4:	2312      	movs	r3, #18
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2213      	movs	r2, #19
 80019ea:	18ba      	adds	r2, r7, r2
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019f0:	2311      	movs	r3, #17
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b76      	ldr	r3, [pc, #472]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fe:	4b75      	ldr	r3, [pc, #468]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a00:	4979      	ldr	r1, [pc, #484]	@ (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d009      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a10:	4b70      	ldr	r3, [pc, #448]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a14:	2203      	movs	r2, #3
 8001a16:	4393      	bics	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a2e:	4b69      	ldr	r3, [pc, #420]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a32:	220c      	movs	r2, #12
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b65      	ldr	r3, [pc, #404]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a4c:	4b61      	ldr	r3, [pc, #388]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a50:	4a66      	ldr	r2, [pc, #408]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d009      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a70:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a8c:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	4a58      	ldr	r2, [pc, #352]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69da      	ldr	r2, [r3, #28]
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aae:	4a52      	ldr	r2, [pc, #328]	@ (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	01db      	lsls	r3, r3, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001aca:	4b42      	ldr	r3, [pc, #264]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	0899      	lsrs	r1, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b39      	ldr	r3, [pc, #228]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	0249      	lsls	r1, r1, #9
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	031b      	lsls	r3, r3, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b10:	4b30      	ldr	r3, [pc, #192]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	039b      	lsls	r3, r3, #14
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d016      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001b22:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	4a35      	ldr	r2, [pc, #212]	@ (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b30:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	03db      	lsls	r3, r3, #15
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d106      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b42:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0449      	lsls	r1, r1, #17
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	03db      	lsls	r3, r3, #15
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d016      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b60:	4a27      	ldr	r2, [pc, #156]	@ (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	045b      	lsls	r3, r3, #17
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	0449      	lsls	r1, r1, #17
 8001b86:	430a      	orrs	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d016      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	01db      	lsls	r3, r3, #7
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bb6:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	0249      	lsls	r1, r1, #9
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	fffffcff 	.word	0xfffffcff
 8001be0:	fffeffff 	.word	0xfffeffff
 8001be4:	00001388 	.word	0x00001388
 8001be8:	efffffff 	.word	0xefffffff
 8001bec:	fffff3ff 	.word	0xfffff3ff
 8001bf0:	fff3ffff 	.word	0xfff3ffff
 8001bf4:	ffcfffff 	.word	0xffcfffff
 8001bf8:	ffffcfff 	.word	0xffffcfff
 8001bfc:	ffbfffff 	.word	0xffbfffff
 8001c00:	feffffff 	.word	0xfeffffff
 8001c04:	ffff3fff 	.word	0xffff3fff

08001c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e04a      	b.n	8001cb0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	223d      	movs	r2, #61	@ 0x3d
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	223c      	movs	r2, #60	@ 0x3c
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe fd9f 	bl	8000774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	223d      	movs	r2, #61	@ 0x3d
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	0019      	movs	r1, r3
 8001c48:	0010      	movs	r0, r2
 8001c4a:	f000 fb4d 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2248      	movs	r2, #72	@ 0x48
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	223e      	movs	r2, #62	@ 0x3e
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	223f      	movs	r2, #63	@ 0x3f
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2240      	movs	r2, #64	@ 0x40
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2241      	movs	r2, #65	@ 0x41
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2242      	movs	r2, #66	@ 0x42
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2243      	movs	r2, #67	@ 0x43
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2244      	movs	r2, #68	@ 0x44
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2245      	movs	r2, #69	@ 0x45
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2246      	movs	r2, #70	@ 0x46
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2247      	movs	r2, #71	@ 0x47
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223d      	movs	r2, #61	@ 0x3d
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e04a      	b.n	8001d60 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223d      	movs	r2, #61	@ 0x3d
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223c      	movs	r2, #60	@ 0x3c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fd11 	bl	8000708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	@ 0x3d
 8001cea:	2102      	movs	r1, #2
 8001cec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	f000 faf5 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2248      	movs	r2, #72	@ 0x48
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	223e      	movs	r2, #62	@ 0x3e
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223f      	movs	r2, #63	@ 0x3f
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2240      	movs	r2, #64	@ 0x40
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2241      	movs	r2, #65	@ 0x41
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2242      	movs	r2, #66	@ 0x42
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2243      	movs	r2, #67	@ 0x43
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2244      	movs	r2, #68	@ 0x44
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2245      	movs	r2, #69	@ 0x45
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2246      	movs	r2, #70	@ 0x46
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2247      	movs	r2, #71	@ 0x47
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	223d      	movs	r2, #61	@ 0x3d
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <HAL_TIM_PWM_Start+0x22>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	223e      	movs	r2, #62	@ 0x3e
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	4193      	sbcs	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	e037      	b.n	8001dfa <HAL_TIM_PWM_Start+0x92>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d108      	bne.n	8001da2 <HAL_TIM_PWM_Start+0x3a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	4193      	sbcs	r3, r2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	e02b      	b.n	8001dfa <HAL_TIM_PWM_Start+0x92>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d108      	bne.n	8001dba <HAL_TIM_PWM_Start+0x52>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	4193      	sbcs	r3, r2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e01f      	b.n	8001dfa <HAL_TIM_PWM_Start+0x92>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d108      	bne.n	8001dd2 <HAL_TIM_PWM_Start+0x6a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2241      	movs	r2, #65	@ 0x41
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	4193      	sbcs	r3, r2
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	e013      	b.n	8001dfa <HAL_TIM_PWM_Start+0x92>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d108      	bne.n	8001dea <HAL_TIM_PWM_Start+0x82>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2242      	movs	r2, #66	@ 0x42
 8001ddc:	5c9b      	ldrb	r3, [r3, r2]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	4193      	sbcs	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e007      	b.n	8001dfa <HAL_TIM_PWM_Start+0x92>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2243      	movs	r2, #67	@ 0x43
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	4193      	sbcs	r3, r2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e08b      	b.n	8001f1a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_PWM_Start+0xaa>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223e      	movs	r2, #62	@ 0x3e
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	5499      	strb	r1, [r3, r2]
 8001e10:	e023      	b.n	8001e5a <HAL_TIM_PWM_Start+0xf2>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_PWM_Start+0xba>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	223f      	movs	r2, #63	@ 0x3f
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	5499      	strb	r1, [r3, r2]
 8001e20:	e01b      	b.n	8001e5a <HAL_TIM_PWM_Start+0xf2>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d104      	bne.n	8001e32 <HAL_TIM_PWM_Start+0xca>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2240      	movs	r2, #64	@ 0x40
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	5499      	strb	r1, [r3, r2]
 8001e30:	e013      	b.n	8001e5a <HAL_TIM_PWM_Start+0xf2>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d104      	bne.n	8001e42 <HAL_TIM_PWM_Start+0xda>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2241      	movs	r2, #65	@ 0x41
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	5499      	strb	r1, [r3, r2]
 8001e40:	e00b      	b.n	8001e5a <HAL_TIM_PWM_Start+0xf2>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start+0xea>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2242      	movs	r2, #66	@ 0x42
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	5499      	strb	r1, [r3, r2]
 8001e50:	e003      	b.n	8001e5a <HAL_TIM_PWM_Start+0xf2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2243      	movs	r2, #67	@ 0x43
 8001e56:	2102      	movs	r1, #2
 8001e58:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fe2e 	bl	8002ac4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <HAL_TIM_PWM_Start+0x1bc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_TIM_PWM_Start+0x128>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <HAL_TIM_PWM_Start+0x1c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_TIM_PWM_Start+0x128>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <HAL_TIM_PWM_Start+0x1c4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_PWM_Start+0x128>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <HAL_TIM_PWM_Start+0x1c8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_TIM_PWM_Start+0x12c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_TIM_PWM_Start+0x12e>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	0209      	lsls	r1, r1, #8
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <HAL_TIM_PWM_Start+0x1bc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00f      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x16e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d009      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x16e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_TIM_PWM_Start+0x1cc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x16e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <HAL_TIM_PWM_Start+0x1c0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d116      	bne.n	8001f04 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <HAL_TIM_PWM_Start+0x1d0>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d016      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x1ae>
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d011      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f02:	e008      	b.n	8001f16 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	40012c00 	.word	0x40012c00
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800
 8001f34:	40000400 	.word	0x40000400
 8001f38:	00010007 	.word	0x00010007

08001f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	223c      	movs	r2, #60	@ 0x3c
 8001f54:	5c9b      	ldrb	r3, [r3, r2]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0e5      	b.n	800212a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	223c      	movs	r2, #60	@ 0x3c
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b14      	cmp	r3, #20
 8001f6a:	d900      	bls.n	8001f6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001f6c:	e0d1      	b.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	4b70      	ldr	r3, [pc, #448]	@ (8002134 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001f74:	18d3      	adds	r3, r2, r3
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	0011      	movs	r1, r2
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 fa3e 	bl	8002404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2108      	movs	r1, #8
 8001f94:	430a      	orrs	r2, r1
 8001f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]
      break;
 8001fba:	e0af      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 faa7 	bl	8002518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	0109      	lsls	r1, r1, #4
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4954      	ldr	r1, [pc, #336]	@ (8002138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	021a      	lsls	r2, r3, #8
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
      break;
 8002000:	e08c      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f000 fb08 	bl	8002620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2108      	movs	r1, #8
 800201c:	430a      	orrs	r2, r1
 800201e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2104      	movs	r1, #4
 800202c:	438a      	bics	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69d9      	ldr	r1, [r3, #28]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	61da      	str	r2, [r3, #28]
      break;
 8002042:	e06b      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f000 fb6f 	bl	8002730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2180      	movs	r1, #128	@ 0x80
 800205e:	0109      	lsls	r1, r1, #4
 8002060:	430a      	orrs	r2, r1
 8002062:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4932      	ldr	r1, [pc, #200]	@ (8002138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002070:	400a      	ands	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69d9      	ldr	r1, [r3, #28]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	021a      	lsls	r2, r3, #8
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	61da      	str	r2, [r3, #28]
      break;
 8002088:	e048      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fbb6 	bl	8002804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2108      	movs	r1, #8
 80020a4:	430a      	orrs	r2, r1
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020ca:	e027      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fbf5 	bl	80028c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0109      	lsls	r1, r1, #4
 80020e8:	430a      	orrs	r2, r1
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4910      	ldr	r1, [pc, #64]	@ (8002138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	021a      	lsls	r2, r3, #8
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002110:	e004      	b.n	800211c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002112:	2317      	movs	r3, #23
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
      break;
 800211a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	223c      	movs	r2, #60	@ 0x3c
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

  return status;
 8002124:	2317      	movs	r3, #23
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	781b      	ldrb	r3, [r3, #0]
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b006      	add	sp, #24
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	08002dd0 	.word	0x08002dd0
 8002138:	fffffbff 	.word	0xfffffbff

0800213c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002146:	230f      	movs	r3, #15
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	@ 0x3c
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIM_ConfigClockSource+0x20>
 8002158:	2302      	movs	r3, #2
 800215a:	e0bc      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x19a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	223c      	movs	r2, #60	@ 0x3c
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	223d      	movs	r2, #61	@ 0x3d
 8002168:	2102      	movs	r1, #2
 800216a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4a5a      	ldr	r2, [pc, #360]	@ (80022e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4a59      	ldr	r2, [pc, #356]	@ (80022e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	0192      	lsls	r2, r2, #6
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xde>
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	0192      	lsls	r2, r2, #6
 800219c:	4293      	cmp	r3, r2
 800219e:	d900      	bls.n	80021a2 <HAL_TIM_ConfigClockSource+0x66>
 80021a0:	e088      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	0152      	lsls	r2, r2, #5
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d100      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x70>
 80021aa:	e088      	b.n	80022be <HAL_TIM_ConfigClockSource+0x182>
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	0152      	lsls	r2, r2, #5
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d900      	bls.n	80021b6 <HAL_TIM_ConfigClockSource+0x7a>
 80021b4:	e07e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021b6:	2b70      	cmp	r3, #112	@ 0x70
 80021b8:	d018      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0xb0>
 80021ba:	d900      	bls.n	80021be <HAL_TIM_ConfigClockSource+0x82>
 80021bc:	e07a      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021be:	2b60      	cmp	r3, #96	@ 0x60
 80021c0:	d04f      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x126>
 80021c2:	d900      	bls.n	80021c6 <HAL_TIM_ConfigClockSource+0x8a>
 80021c4:	e076      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021c6:	2b50      	cmp	r3, #80	@ 0x50
 80021c8:	d03b      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0x106>
 80021ca:	d900      	bls.n	80021ce <HAL_TIM_ConfigClockSource+0x92>
 80021cc:	e072      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d057      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x146>
 80021d2:	d900      	bls.n	80021d6 <HAL_TIM_ConfigClockSource+0x9a>
 80021d4:	e06e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021d6:	2b30      	cmp	r3, #48	@ 0x30
 80021d8:	d063      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021da:	d86b      	bhi.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d060      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021e0:	d868      	bhi.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d05d      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d05b      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021ea:	e063      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021fc:	f000 fc42 	bl	8002a84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2277      	movs	r2, #119	@ 0x77
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e052      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800222a:	f000 fc2b 	bl	8002a84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	01c9      	lsls	r1, r1, #7
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
      break;
 8002240:	e03e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	001a      	movs	r2, r3
 8002250:	f000 fb9c 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2150      	movs	r1, #80	@ 0x50
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fbf6 	bl	8002a4c <TIM_ITRx_SetConfig>
      break;
 8002260:	e02e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226e:	001a      	movs	r2, r3
 8002270:	f000 fbba 	bl	80029e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2160      	movs	r1, #96	@ 0x60
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fbe6 	bl	8002a4c <TIM_ITRx_SetConfig>
      break;
 8002280:	e01e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	001a      	movs	r2, r3
 8002290:	f000 fb7c 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2140      	movs	r1, #64	@ 0x40
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fbd6 	bl	8002a4c <TIM_ITRx_SetConfig>
      break;
 80022a0:	e00e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0019      	movs	r1, r3
 80022ac:	0010      	movs	r0, r2
 80022ae:	f000 fbcd 	bl	8002a4c <TIM_ITRx_SetConfig>
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
      break;
 80022bc:	e000      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223d      	movs	r2, #61	@ 0x3d
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	223c      	movs	r2, #60	@ 0x3c
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

  return status;
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	ffceff88 	.word	0xffceff88
 80022e4:	ffff00ff 	.word	0xffff00ff

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3b      	ldr	r2, [pc, #236]	@ (80023e8 <TIM_Base_SetConfig+0x100>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d008      	beq.n	8002312 <TIM_Base_SetConfig+0x2a>
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	429a      	cmp	r2, r3
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0x2a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a37      	ldr	r2, [pc, #220]	@ (80023ec <TIM_Base_SetConfig+0x104>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2270      	movs	r2, #112	@ 0x70
 8002316:	4393      	bics	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a30      	ldr	r2, [pc, #192]	@ (80023e8 <TIM_Base_SetConfig+0x100>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d018      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	429a      	cmp	r2, r3
 8002334:	d013      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <TIM_Base_SetConfig+0x104>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00f      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <TIM_Base_SetConfig+0x108>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <TIM_Base_SetConfig+0x10c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <TIM_Base_SetConfig+0x110>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x76>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a28      	ldr	r2, [pc, #160]	@ (80023fc <TIM_Base_SetConfig+0x114>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a27      	ldr	r2, [pc, #156]	@ (8002400 <TIM_Base_SetConfig+0x118>)
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2280      	movs	r2, #128	@ 0x80
 8002374:	4393      	bics	r3, r2
 8002376:	001a      	movs	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a13      	ldr	r2, [pc, #76]	@ (80023e8 <TIM_Base_SetConfig+0x100>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00b      	beq.n	80023b6 <TIM_Base_SetConfig+0xce>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <TIM_Base_SetConfig+0x10c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <TIM_Base_SetConfig+0xce>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a13      	ldr	r2, [pc, #76]	@ (80023f8 <TIM_Base_SetConfig+0x110>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d003      	beq.n	80023b6 <TIM_Base_SetConfig+0xce>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <TIM_Base_SetConfig+0x114>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d103      	bne.n	80023be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4393      	bics	r3, r2
 80023d8:	001a      	movs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
  }
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40002000 	.word	0x40002000
 80023f4:	40014000 	.word	0x40014000
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40014800 	.word	0x40014800
 8002400:	fffffcff 	.word	0xfffffcff

08002404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	2201      	movs	r2, #1
 800241a:	4393      	bics	r3, r2
 800241c:	001a      	movs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a32      	ldr	r2, [pc, #200]	@ (80024fc <TIM_OC1_SetConfig+0xf8>)
 8002432:	4013      	ands	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2203      	movs	r2, #3
 800243a:	4393      	bics	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2202      	movs	r2, #2
 800244c:	4393      	bics	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <TIM_OC1_SetConfig+0xfc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00b      	beq.n	800247a <TIM_OC1_SetConfig+0x76>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <TIM_OC1_SetConfig+0x100>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <TIM_OC1_SetConfig+0x76>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a26      	ldr	r2, [pc, #152]	@ (8002508 <TIM_OC1_SetConfig+0x104>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d003      	beq.n	800247a <TIM_OC1_SetConfig+0x76>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a25      	ldr	r2, [pc, #148]	@ (800250c <TIM_OC1_SetConfig+0x108>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10c      	bne.n	8002494 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2208      	movs	r2, #8
 800247e:	4393      	bics	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2204      	movs	r2, #4
 8002490:	4393      	bics	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <TIM_OC1_SetConfig+0xfc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00b      	beq.n	80024b4 <TIM_OC1_SetConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <TIM_OC1_SetConfig+0x100>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_OC1_SetConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <TIM_OC1_SetConfig+0x104>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_OC1_SetConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <TIM_OC1_SetConfig+0x108>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d111      	bne.n	80024d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <TIM_OC1_SetConfig+0x10c>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <TIM_OC1_SetConfig+0x110>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	621a      	str	r2, [r3, #32]
}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b006      	add	sp, #24
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	fffeff8f 	.word	0xfffeff8f
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800
 8002510:	fffffeff 	.word	0xfffffeff
 8002514:	fffffdff 	.word	0xfffffdff

08002518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	2210      	movs	r2, #16
 800252e:	4393      	bics	r3, r2
 8002530:	001a      	movs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a2e      	ldr	r2, [pc, #184]	@ (8002600 <TIM_OC2_SetConfig+0xe8>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a2d      	ldr	r2, [pc, #180]	@ (8002604 <TIM_OC2_SetConfig+0xec>)
 800254e:	4013      	ands	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2220      	movs	r2, #32
 8002562:	4393      	bics	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a24      	ldr	r2, [pc, #144]	@ (8002608 <TIM_OC2_SetConfig+0xf0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	4393      	bics	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2240      	movs	r2, #64	@ 0x40
 8002592:	4393      	bics	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1b      	ldr	r2, [pc, #108]	@ (8002608 <TIM_OC2_SetConfig+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00b      	beq.n	80025b6 <TIM_OC2_SetConfig+0x9e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <TIM_OC2_SetConfig+0xf4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <TIM_OC2_SetConfig+0x9e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <TIM_OC2_SetConfig+0xf8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_OC2_SetConfig+0x9e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <TIM_OC2_SetConfig+0xfc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d113      	bne.n	80025de <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <TIM_OC2_SetConfig+0x100>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4a16      	ldr	r2, [pc, #88]	@ (800261c <TIM_OC2_SetConfig+0x104>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	feff8fff 	.word	0xfeff8fff
 8002604:	fffffcff 	.word	0xfffffcff
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40014000 	.word	0x40014000
 8002610:	40014400 	.word	0x40014400
 8002614:	40014800 	.word	0x40014800
 8002618:	fffffbff 	.word	0xfffffbff
 800261c:	fffff7ff 	.word	0xfffff7ff

08002620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <TIM_OC3_SetConfig+0xe4>)
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <TIM_OC3_SetConfig+0xe8>)
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2203      	movs	r2, #3
 8002654:	4393      	bics	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a29      	ldr	r2, [pc, #164]	@ (800270c <TIM_OC3_SetConfig+0xec>)
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a25      	ldr	r2, [pc, #148]	@ (8002710 <TIM_OC3_SetConfig+0xf0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <TIM_OC3_SetConfig+0xf4>)
 8002682:	4013      	ands	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <TIM_OC3_SetConfig+0xf8>)
 8002696:	4013      	ands	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <TIM_OC3_SetConfig+0xf0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_OC3_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	@ (800271c <TIM_OC3_SetConfig+0xfc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <TIM_OC3_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <TIM_OC3_SetConfig+0x100>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_OC3_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <TIM_OC3_SetConfig+0x104>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d113      	bne.n	80026e2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <TIM_OC3_SetConfig+0x108>)
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <TIM_OC3_SetConfig+0x10c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	621a      	str	r2, [r3, #32]
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b006      	add	sp, #24
 8002702:	bd80      	pop	{r7, pc}
 8002704:	fffffeff 	.word	0xfffffeff
 8002708:	fffeff8f 	.word	0xfffeff8f
 800270c:	fffffdff 	.word	0xfffffdff
 8002710:	40012c00 	.word	0x40012c00
 8002714:	fffff7ff 	.word	0xfffff7ff
 8002718:	fffffbff 	.word	0xfffffbff
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800
 8002728:	ffffefff 	.word	0xffffefff
 800272c:	ffffdfff 	.word	0xffffdfff

08002730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a26      	ldr	r2, [pc, #152]	@ (80027e0 <TIM_OC4_SetConfig+0xb0>)
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <TIM_OC4_SetConfig+0xb4>)
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a21      	ldr	r2, [pc, #132]	@ (80027e8 <TIM_OC4_SetConfig+0xb8>)
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <TIM_OC4_SetConfig+0xbc>)
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	031b      	lsls	r3, r3, #12
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <TIM_OC4_SetConfig+0xc0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00b      	beq.n	80027a8 <TIM_OC4_SetConfig+0x78>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <TIM_OC4_SetConfig+0xc4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <TIM_OC4_SetConfig+0x78>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <TIM_OC4_SetConfig+0xc8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <TIM_OC4_SetConfig+0x78>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <TIM_OC4_SetConfig+0xcc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d109      	bne.n	80027bc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <TIM_OC4_SetConfig+0xd0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	ffffefff 	.word	0xffffefff
 80027e4:	feff8fff 	.word	0xfeff8fff
 80027e8:	fffffcff 	.word	0xfffffcff
 80027ec:	ffffdfff 	.word	0xffffdfff
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800
 8002800:	ffffbfff 	.word	0xffffbfff

08002804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4a23      	ldr	r2, [pc, #140]	@ (80028a8 <TIM_OC5_SetConfig+0xa4>)
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <TIM_OC5_SetConfig+0xa8>)
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <TIM_OC5_SetConfig+0xac>)
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a17      	ldr	r2, [pc, #92]	@ (80028b4 <TIM_OC5_SetConfig+0xb0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_OC5_SetConfig+0x6e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a16      	ldr	r2, [pc, #88]	@ (80028b8 <TIM_OC5_SetConfig+0xb4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_OC5_SetConfig+0x6e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <TIM_OC5_SetConfig+0xb8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_OC5_SetConfig+0x6e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <TIM_OC5_SetConfig+0xbc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d109      	bne.n	8002886 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <TIM_OC5_SetConfig+0xa4>)
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b006      	add	sp, #24
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	fffeffff 	.word	0xfffeffff
 80028ac:	fffeff8f 	.word	0xfffeff8f
 80028b0:	fffdffff 	.word	0xfffdffff
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40014400 	.word	0x40014400
 80028c0:	40014800 	.word	0x40014800

080028c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a24      	ldr	r2, [pc, #144]	@ (800296c <TIM_OC6_SetConfig+0xa8>)
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a20      	ldr	r2, [pc, #128]	@ (8002970 <TIM_OC6_SetConfig+0xac>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <TIM_OC6_SetConfig+0xb0>)
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	051b      	lsls	r3, r3, #20
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <TIM_OC6_SetConfig+0xb4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00b      	beq.n	8002934 <TIM_OC6_SetConfig+0x70>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a17      	ldr	r2, [pc, #92]	@ (800297c <TIM_OC6_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_OC6_SetConfig+0x70>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <TIM_OC6_SetConfig+0xbc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_OC6_SetConfig+0x70>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <TIM_OC6_SetConfig+0xc0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d109      	bne.n	8002948 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <TIM_OC6_SetConfig+0xc4>)
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	029b      	lsls	r3, r3, #10
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b006      	add	sp, #24
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	ffefffff 	.word	0xffefffff
 8002970:	feff8fff 	.word	0xfeff8fff
 8002974:	ffdfffff 	.word	0xffdfffff
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	fffbffff 	.word	0xfffbffff

0800298c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4393      	bics	r3, r2
 80029a6:	001a      	movs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	22f0      	movs	r2, #240	@ 0xf0
 80029b6:	4393      	bics	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	220a      	movs	r2, #10
 80029c8:	4393      	bics	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	621a      	str	r2, [r3, #32]
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b006      	add	sp, #24
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	2210      	movs	r2, #16
 8002a00:	4393      	bics	r3, r2
 8002a02:	001a      	movs	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <TIM_TI2_ConfigInputStage+0x60>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	031b      	lsls	r3, r3, #12
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	22a0      	movs	r2, #160	@ 0xa0
 8002a24:	4393      	bics	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	ffff0fff 	.word	0xffff0fff

08002a4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <TIM_ITRx_SetConfig+0x34>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	609a      	str	r2, [r3, #8]
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	ffcfff8f 	.word	0xffcfff8f

08002a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <TIM_ETR_SetConfig+0x3c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b006      	add	sp, #24
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	ffff00ff 	.word	0xffff00ff

08002ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	43d2      	mvns	r2, r2
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	211f      	movs	r1, #31
 8002af4:	400b      	ands	r3, r1
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4099      	lsls	r1, r3
 8002afa:	000b      	movs	r3, r1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b006      	add	sp, #24
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	223c      	movs	r2, #60	@ 0x3c
 8002b1a:	5c9b      	ldrb	r3, [r3, r2]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e055      	b.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	223c      	movs	r2, #60	@ 0x3c
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	223d      	movs	r2, #61	@ 0x3d
 8002b30:	2102      	movs	r1, #2
 8002b32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a22      	ldr	r2, [pc, #136]	@ (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2270      	movs	r2, #112	@ 0x70
 8002b64:	4393      	bics	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	@ (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00f      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	05db      	lsls	r3, r3, #23
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d009      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	@ (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10c      	bne.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2280      	movs	r2, #128	@ 0x80
 8002ba8:	4393      	bics	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223d      	movs	r2, #61	@ 0x3d
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223c      	movs	r2, #60	@ 0x3c
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	ff0fffff 	.word	0xff0fffff
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40014000 	.word	0x40014000

08002be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223c      	movs	r2, #60	@ 0x3c
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e06f      	b.n	8002ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223c      	movs	r2, #60	@ 0x3c
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22ff      	movs	r2, #255	@ 0xff
 8002c10:	4393      	bics	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a33      	ldr	r2, [pc, #204]	@ (8002cec <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002c20:	401a      	ands	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	@ (8002cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002c2e:	401a      	ands	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a29      	ldr	r2, [pc, #164]	@ (8002cfc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002c58:	401a      	ands	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a26      	ldr	r2, [pc, #152]	@ (8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002c66:	401a      	ands	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a24      	ldr	r2, [pc, #144]	@ (8002d04 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002c74:	401a      	ands	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a21      	ldr	r2, [pc, #132]	@ (8002d08 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002c84:	401a      	ands	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	@ (8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d11c      	bne.n	8002cd2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	051b      	lsls	r3, r3, #20
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002cac:	401a      	ands	r2, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002cba:	401a      	ands	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002cc8:	401a      	ands	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223c      	movs	r2, #60	@ 0x3c
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fffffcff 	.word	0xfffffcff
 8002cf0:	fffffbff 	.word	0xfffffbff
 8002cf4:	fffff7ff 	.word	0xfffff7ff
 8002cf8:	ffffefff 	.word	0xffffefff
 8002cfc:	ffffdfff 	.word	0xffffdfff
 8002d00:	ffffbfff 	.word	0xffffbfff
 8002d04:	fff0ffff 	.word	0xfff0ffff
 8002d08:	efffffff 	.word	0xefffffff
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	ff0fffff 	.word	0xff0fffff
 8002d14:	feffffff 	.word	0xfeffffff
 8002d18:	fdffffff 	.word	0xfdffffff
 8002d1c:	dfffffff 	.word	0xdfffffff

08002d20 <memset>:
 8002d20:	0003      	movs	r3, r0
 8002d22:	1882      	adds	r2, r0, r2
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	7019      	strb	r1, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <__libc_init_array>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	2600      	movs	r6, #0
 8002d34:	4c0c      	ldr	r4, [pc, #48]	@ (8002d68 <__libc_init_array+0x38>)
 8002d36:	4d0d      	ldr	r5, [pc, #52]	@ (8002d6c <__libc_init_array+0x3c>)
 8002d38:	1b64      	subs	r4, r4, r5
 8002d3a:	10a4      	asrs	r4, r4, #2
 8002d3c:	42a6      	cmp	r6, r4
 8002d3e:	d109      	bne.n	8002d54 <__libc_init_array+0x24>
 8002d40:	2600      	movs	r6, #0
 8002d42:	f000 f819 	bl	8002d78 <_init>
 8002d46:	4c0a      	ldr	r4, [pc, #40]	@ (8002d70 <__libc_init_array+0x40>)
 8002d48:	4d0a      	ldr	r5, [pc, #40]	@ (8002d74 <__libc_init_array+0x44>)
 8002d4a:	1b64      	subs	r4, r4, r5
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	42a6      	cmp	r6, r4
 8002d50:	d105      	bne.n	8002d5e <__libc_init_array+0x2e>
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	00b3      	lsls	r3, r6, #2
 8002d56:	58eb      	ldr	r3, [r5, r3]
 8002d58:	4798      	blx	r3
 8002d5a:	3601      	adds	r6, #1
 8002d5c:	e7ee      	b.n	8002d3c <__libc_init_array+0xc>
 8002d5e:	00b3      	lsls	r3, r6, #2
 8002d60:	58eb      	ldr	r3, [r5, r3]
 8002d62:	4798      	blx	r3
 8002d64:	3601      	adds	r6, #1
 8002d66:	e7f2      	b.n	8002d4e <__libc_init_array+0x1e>
 8002d68:	08002e24 	.word	0x08002e24
 8002d6c:	08002e24 	.word	0x08002e24
 8002d70:	08002e28 	.word	0x08002e28
 8002d74:	08002e24 	.word	0x08002e24

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
