
servo_cfr_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005588  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005760  08005760  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005768  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  08005774  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005774  000071e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cb1  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c6  00000000  00000000  00017ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00019fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  0001af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026be7  00000000  00000000  0001bafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220a  00000000  00000000  000426e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2543  00000000  00000000  000548eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  00146e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056f8 	.word	0x080056f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056f8 	.word	0x080056f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004be:	f000 fd15 	bl	8000eec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c2:	f000 f89b 	bl	80005fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c6:	f000 fa9d 	bl	8000a04 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ca:	f000 fa6b 	bl	80009a4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004ce:	f000 f8e7 	bl	80006a0 <MX_TIM1_Init>
	MX_TIM3_Init();
 80004d2:	f000 f9a9 	bl	8000828 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80004d6:	f000 fa35 	bl	8000944 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // PA7 (première pince, milieu)
 80004da:	2104      	movs	r1, #4
 80004dc:	4840      	ldr	r0, [pc, #256]	@ (80005e0 <main+0x128>)
 80004de:	f002 fccf 	bl	8002e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // PB0 (première pince, droit)
 80004e2:	2108      	movs	r1, #8
 80004e4:	483e      	ldr	r0, [pc, #248]	@ (80005e0 <main+0x128>)
 80004e6:	f002 fccb 	bl	8002e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // PA8 (première pince, gauche)
 80004ea:	2100      	movs	r1, #0
 80004ec:	483d      	ldr	r0, [pc, #244]	@ (80005e4 <main+0x12c>)
 80004ee:	f002 fcc7 	bl	8002e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // PA9 (deuxième pince, milieu)
 80004f2:	2104      	movs	r1, #4
 80004f4:	483b      	ldr	r0, [pc, #236]	@ (80005e4 <main+0x12c>)
 80004f6:	f002 fcc3 	bl	8002e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // PA10 (deuxième pince, droit)
 80004fa:	2108      	movs	r1, #8
 80004fc:	4839      	ldr	r0, [pc, #228]	@ (80005e4 <main+0x12c>)
 80004fe:	f002 fcbf 	bl	8002e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // PA6 (deuxième pince, gauche)
 8000502:	2100      	movs	r1, #0
 8000504:	4836      	ldr	r0, [pc, #216]	@ (80005e0 <main+0x128>)
 8000506:	f002 fcbb 	bl	8002e80 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, 12);
 800050a:	220c      	movs	r2, #12
 800050c:	4936      	ldr	r1, [pc, #216]	@ (80005e8 <main+0x130>)
 800050e:	4837      	ldr	r0, [pc, #220]	@ (80005ec <main+0x134>)
 8000510:	f003 fdb4 	bl	800407c <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Debug output
		char message[14]; // 12 caractères de rx_data + 2 pour "\r\n"
		memcpy(message, rx_data, 12); // Copy only the first 12 bytes
 8000514:	4a34      	ldr	r2, [pc, #208]	@ (80005e8 <main+0x130>)
 8000516:	463b      	mov	r3, r7
 8000518:	ca07      	ldmia	r2, {r0, r1, r2}
 800051a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		message[12] = '\r'; // Ajouter retour chariot
 800051e:	230d      	movs	r3, #13
 8000520:	733b      	strb	r3, [r7, #12]
		message[13] = '\n'; // Ajouter nouvelle ligne
 8000522:	230a      	movs	r3, #10
 8000524:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8000526:	4639      	mov	r1, r7
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	220e      	movs	r2, #14
 800052e:	4830      	ldr	r0, [pc, #192]	@ (80005f0 <main+0x138>)
 8000530:	f003 fd1a 	bl	8003f68 <HAL_UART_Transmit>


		// Première pince
		if (rx_data[0] == '0') { // PA7 (TIM3_CH2) milieu
 8000534:	4b2c      	ldr	r3, [pc, #176]	@ (80005e8 <main+0x130>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b30      	cmp	r3, #48	@ 0x30
 800053a:	d104      	bne.n	8000546 <main+0x8e>
			TIM3->CCR2 = SERVO_MAX_M;
 800053c:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <main+0x13c>)
 800053e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000542:	639a      	str	r2, [r3, #56]	@ 0x38
 8000544:	e003      	b.n	800054e <main+0x96>
		} else {
			TIM3->CCR2 = SERVO_MIN_M;
 8000546:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <main+0x13c>)
 8000548:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800054c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if (rx_data[1] == '0') { // PB0 (TIM3_CH3) droit
 800054e:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <main+0x130>)
 8000550:	785b      	ldrb	r3, [r3, #1]
 8000552:	2b30      	cmp	r3, #48	@ 0x30
 8000554:	d104      	bne.n	8000560 <main+0xa8>
			TIM3->CCR3 = SERVO_MIN_D;
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <main+0x13c>)
 8000558:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800055c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800055e:	e003      	b.n	8000568 <main+0xb0>
		} else {
			TIM3->CCR3 = SERVO_MAX_D;
 8000560:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <main+0x13c>)
 8000562:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000566:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		HAL_Delay(100); // delai pour que les 2 pinces ne se touchent pas
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f000 fd3b 	bl	8000fe4 <HAL_Delay>
		if (rx_data[2] == '0') { // PA8 (TIM1_CH1) gauche
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <main+0x130>)
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	2b30      	cmp	r3, #48	@ 0x30
 8000574:	d104      	bne.n	8000580 <main+0xc8>
			TIM1->CCR1 = SERVO_MAX_G;
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <main+0x140>)
 8000578:	f640 0298 	movw	r2, #2200	@ 0x898
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
 800057e:	e003      	b.n	8000588 <main+0xd0>
		} else {
			TIM1->CCR1 = SERVO_MIN_G;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0x140>)
 8000582:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000586:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		// Deuxième pince
		if (rx_data[3] == '0') { // PA9 (TIM1_CH2) milieu
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <main+0x130>)
 800058a:	78db      	ldrb	r3, [r3, #3]
 800058c:	2b30      	cmp	r3, #48	@ 0x30
 800058e:	d104      	bne.n	800059a <main+0xe2>
			TIM1->CCR2 = SERVO_MAX_M;
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <main+0x140>)
 8000592:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000596:	639a      	str	r2, [r3, #56]	@ 0x38
 8000598:	e003      	b.n	80005a2 <main+0xea>
		} else {
			TIM1->CCR2 = SERVO_MIN_M;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <main+0x140>)
 800059c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80005a0:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if (rx_data[4] == '0') { // PA10 (TIM1_CH3) droit
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <main+0x130>)
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	2b30      	cmp	r3, #48	@ 0x30
 80005a8:	d104      	bne.n	80005b4 <main+0xfc>
			TIM1->CCR3 = SERVO_MIN_D;
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <main+0x140>)
 80005ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005b2:	e003      	b.n	80005bc <main+0x104>
		} else {
			TIM1->CCR3 = SERVO_MAX_D;
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <main+0x140>)
 80005b6:	f240 726c 	movw	r2, #1900	@ 0x76c
 80005ba:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		HAL_Delay(100); // delai pour que les 2 pinces ne se touchent pas
 80005bc:	2064      	movs	r0, #100	@ 0x64
 80005be:	f000 fd11 	bl	8000fe4 <HAL_Delay>
		if (rx_data[5] == '0') { // PA6 (TIM3_CH1) gauche
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <main+0x130>)
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b30      	cmp	r3, #48	@ 0x30
 80005c8:	d104      	bne.n	80005d4 <main+0x11c>
			TIM3->CCR1 = SERVO_MAX_G;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <main+0x13c>)
 80005cc:	f640 0298 	movw	r2, #2200	@ 0x898
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d2:	e79f      	b.n	8000514 <main+0x5c>
		} else {
			TIM3->CCR1 = SERVO_MIN_G;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <main+0x13c>)
 80005d6:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
	{
 80005dc:	e79a      	b.n	8000514 <main+0x5c>
 80005de:	bf00      	nop
 80005e0:	20000074 	.word	0x20000074
 80005e4:	20000028 	.word	0x20000028
 80005e8:	200001d0 	.word	0x200001d0
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	20000148 	.word	0x20000148
 80005f4:	40000400 	.word	0x40000400
 80005f8:	40012c00 	.word	0x40012c00

080005fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 f848 	bl	80056a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000622:	f001 f863 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800062c:	f000 fa66 	bl	8000afc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064e:	2307      	movs	r3, #7
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f89a 	bl	8001798 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800066a:	f000 fa47 	bl	8000afc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2104      	movs	r1, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fc62 	bl	8001f50 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000692:	f000 fa33 	bl	8000afc <Error_Handler>
	}
}
 8000696:	bf00      	nop
 8000698:	3758      	adds	r7, #88	@ 0x58
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09a      	sub	sp, #104	@ 0x68
 80006a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80006c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	222c      	movs	r2, #44	@ 0x2c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 ffe0 	bl	80056a0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006e0:	4b4f      	ldr	r3, [pc, #316]	@ (8000820 <MX_TIM1_Init+0x180>)
 80006e2:	4a50      	ldr	r2, [pc, #320]	@ (8000824 <MX_TIM1_Init+0x184>)
 80006e4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80-1;
 80006e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000820 <MX_TIM1_Init+0x180>)
 80006e8:	224f      	movs	r2, #79	@ 0x4f
 80006ea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b4c      	ldr	r3, [pc, #304]	@ (8000820 <MX_TIM1_Init+0x180>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3002-1;
 80006f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000820 <MX_TIM1_Init+0x180>)
 80006f4:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 80006f8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <MX_TIM1_Init+0x180>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000700:	4b47      	ldr	r3, [pc, #284]	@ (8000820 <MX_TIM1_Init+0x180>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b46      	ldr	r3, [pc, #280]	@ (8000820 <MX_TIM1_Init+0x180>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800070c:	4844      	ldr	r0, [pc, #272]	@ (8000820 <MX_TIM1_Init+0x180>)
 800070e:	f002 faff 	bl	8002d10 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000718:	f000 f9f0 	bl	8000afc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000726:	4619      	mov	r1, r3
 8000728:	483d      	ldr	r0, [pc, #244]	@ (8000820 <MX_TIM1_Init+0x180>)
 800072a:	f002 fdc3 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000734:	f000 f9e2 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000738:	4839      	ldr	r0, [pc, #228]	@ (8000820 <MX_TIM1_Init+0x180>)
 800073a:	f002 fb40 	bl	8002dbe <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000744:	f000 f9da 	bl	8000afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000754:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000758:	4619      	mov	r1, r3
 800075a:	4831      	ldr	r0, [pc, #196]	@ (8000820 <MX_TIM1_Init+0x180>)
 800075c:	f003 fab0 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000766:	f000 f9c9 	bl	8000afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076a:	2360      	movs	r3, #96	@ 0x60
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4824      	ldr	r0, [pc, #144]	@ (8000820 <MX_TIM1_Init+0x180>)
 8000790:	f002 fc7c 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 800079a:	f000 f9af 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	481e      	ldr	r0, [pc, #120]	@ (8000820 <MX_TIM1_Init+0x180>)
 80007a8:	f002 fc70 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 80007b2:	f000 f9a3 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	4818      	ldr	r0, [pc, #96]	@ (8000820 <MX_TIM1_Init+0x180>)
 80007c0:	f002 fc64 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 80007ca:	f000 f997 	bl	8000afc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4807      	ldr	r0, [pc, #28]	@ (8000820 <MX_TIM1_Init+0x180>)
 8000804:	f003 fae4 	bl	8003dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x172>
	{
		Error_Handler();
 800080e:	f000 f975 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <MX_TIM1_Init+0x180>)
 8000814:	f000 f9d0 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000818:	bf00      	nop
 800081a:	3768      	adds	r7, #104	@ 0x68
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000028 	.word	0x20000028
 8000824:	40012c00 	.word	0x40012c00

08000828 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	@ 0x38
 800082c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800085a:	4b38      	ldr	r3, [pc, #224]	@ (800093c <MX_TIM3_Init+0x114>)
 800085c:	4a38      	ldr	r2, [pc, #224]	@ (8000940 <MX_TIM3_Init+0x118>)
 800085e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80-1;
 8000860:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_TIM3_Init+0x114>)
 8000862:	224f      	movs	r2, #79	@ 0x4f
 8000864:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_TIM3_Init+0x114>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3002-1;
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_TIM3_Init+0x114>)
 800086e:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 8000872:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b31      	ldr	r3, [pc, #196]	@ (800093c <MX_TIM3_Init+0x114>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b30      	ldr	r3, [pc, #192]	@ (800093c <MX_TIM3_Init+0x114>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000880:	482e      	ldr	r0, [pc, #184]	@ (800093c <MX_TIM3_Init+0x114>)
 8000882:	f002 fa45 	bl	8002d10 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 800088c:	f000 f936 	bl	8000afc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089a:	4619      	mov	r1, r3
 800089c:	4827      	ldr	r0, [pc, #156]	@ (800093c <MX_TIM3_Init+0x114>)
 800089e:	f002 fd09 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80008a8:	f000 f928 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ac:	4823      	ldr	r0, [pc, #140]	@ (800093c <MX_TIM3_Init+0x114>)
 80008ae:	f002 fa86 	bl	8002dbe <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80008b8:	f000 f920 	bl	8000afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	481c      	ldr	r0, [pc, #112]	@ (800093c <MX_TIM3_Init+0x114>)
 80008cc:	f003 f9f8 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80008d6:	f000 f911 	bl	8000afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	2360      	movs	r3, #96	@ 0x60
 80008dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	4812      	ldr	r0, [pc, #72]	@ (800093c <MX_TIM3_Init+0x114>)
 80008f2:	f002 fbcb 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 80008fc:	f000 f8fe 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	2204      	movs	r2, #4
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_TIM3_Init+0x114>)
 8000908:	f002 fbc0 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 8000912:	f000 f8f3 	bl	8000afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	4807      	ldr	r0, [pc, #28]	@ (800093c <MX_TIM3_Init+0x114>)
 800091e:	f002 fbb5 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x104>
	{
		Error_Handler();
 8000928:	f000 f8e8 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <MX_TIM3_Init+0x114>)
 800092e:	f000 f943 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000932:	bf00      	nop
 8000934:	3738      	adds	r7, #56	@ 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000074 	.word	0x20000074
 8000940:	40000400 	.word	0x40000400

08000944 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	f003 faa0 	bl	8003ecc <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000992:	f000 f8b3 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	40013800 	.word	0x40013800

080009a4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	@ (8000a00 <MX_USART2_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009e8:	f003 fa70 	bl	8003ecc <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80009f2:	f000 f883 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000148 	.word	0x20000148
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a24      	ldr	r2, [pc, #144]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a82:	f000 fe0d 	bl	80016a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	@ (8000acc <MX_GPIO_Init+0xc8>)
 8000a9e:	f000 fc55 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f000 fc46 	bl	800134c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <HAL_UART_RxCpltCallback+0x24>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d104      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x1a>
  {
    HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data,sizeof(rx_data)); // Relancer la réception
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	4905      	ldr	r1, [pc, #20]	@ (8000af8 <HAL_UART_RxCpltCallback+0x28>)
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <HAL_UART_RxCpltCallback+0x24>)
 8000ae6:	f003 fac9 	bl	800407c <HAL_UART_Receive_IT>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	200001d0 	.word	0x200001d0

08000afc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <HAL_TIM_Base_MspInit+0x5c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d10c      	bne.n	8000b7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b7a:	e010      	b.n	8000b9e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x64>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x60>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40012c00 	.word	0x40012c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40000400 	.word	0x40000400

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	@ (8000c9c <HAL_TIM_MspPostInit+0xe4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d11e      	bne.n	8000c18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a30      	ldr	r2, [pc, #192]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bf2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c12:	f000 fb9b 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c16:	e03d      	b.n	8000c94 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <HAL_TIM_MspPostInit+0xec>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d138      	bne.n	8000c94 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	23c0      	movs	r3, #192	@ 0xc0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c62:	2302      	movs	r3, #2
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f000 fb6c 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c84:	2302      	movs	r3, #2
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <HAL_TIM_MspPostInit+0xf0>)
 8000c90:	f000 fb5c 	bl	800134c <HAL_GPIO_Init>
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012c00 	.word	0x40012c00
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ae      	sub	sp, #184	@ 0xb8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2288      	movs	r2, #136	@ 0x88
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fce7 	bl	80056a0 <memset>
  if(huart->Instance==USART1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <HAL_UART_MspInit+0x144>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d143      	bne.n	8000d64 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fb55 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf4:	f7ff ff02 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d04:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b38      	ldr	r3, [pc, #224]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	4a37      	ldr	r2, [pc, #220]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1c:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d28:	23c0      	movs	r3, #192	@ 0xc0
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482a      	ldr	r0, [pc, #168]	@ (8000df8 <HAL_UART_MspInit+0x14c>)
 8000d4e:	f000 fafd 	bl	800134c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2025      	movs	r0, #37	@ 0x25
 8000d58:	f000 fa43 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5c:	2025      	movs	r0, #37	@ 0x25
 8000d5e:	f000 fa5c 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	e040      	b.n	8000de6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <HAL_UART_MspInit+0x150>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d13b      	bne.n	8000de6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fb0c 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000d86:	f7ff feb9 	bl	8000afc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_UART_MspInit+0x148>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f000 fab3 	bl	800134c <HAL_GPIO_Init>
}
 8000de6:	bf00      	nop
 8000de8:	37b8      	adds	r7, #184	@ 0xb8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	40004400 	.word	0x40004400

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f8a5 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART1_IRQHandler+0x10>)
 8000e66:	f003 f955 	bl	8004114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000c0 	.word	0x200000c0

08000e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 fbf3 	bl	80056b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f7ff faf5 	bl	80004b8 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000edc:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee4:	200001e0 	.word	0x200001e0

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_Init+0x3c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <HAL_Init+0x3c>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f000 f962 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f80f 	bl	8000f2c <HAL_InitTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e001      	b.n	8000f1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1a:	f7ff fdf5 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <HAL_InitTick+0x6c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_InitTick+0x70>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f96d 	bl	8001236 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d809      	bhi.n	8000f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f937 	bl	80011e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_InitTick+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e001      	b.n	8000f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200001dc 	.word	0x200001dc

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200001dc 	.word	0x200001dc

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	@ (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d008      	beq.n	8001278 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2204      	movs	r2, #4
 800126a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e022      	b.n	80012be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 020e 	bic.w	r2, r2, #14
 8001286:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	f003 021c 	and.w	r2, r3, #28
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d005      	beq.n	80012ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e029      	b.n	8001342 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020e 	bic.w	r2, r2, #14
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f003 021c 	and.w	r2, r3, #28
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
    }
  }
  return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e17f      	b.n	800165c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8171 	beq.w	8001656 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x40>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f003 0201 	and.w	r2, r3, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d118      	bne.n	800142c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b03      	cmp	r3, #3
 8001436:	d017      	beq.n	8001468 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d123      	bne.n	80014bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0203 	and.w	r2, r3, #3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80ac 	beq.w	8001656 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <HAL_GPIO_Init+0x330>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	4a5e      	ldr	r2, [pc, #376]	@ (800167c <HAL_GPIO_Init+0x330>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	@ 0x60
 800150a:	4b5c      	ldr	r3, [pc, #368]	@ (800167c <HAL_GPIO_Init+0x330>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001516:	4a5a      	ldr	r2, [pc, #360]	@ (8001680 <HAL_GPIO_Init+0x334>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x242>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	@ (8001684 <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x23e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	@ (8001688 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x23a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x236>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x232>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x22e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4a      	ldr	r2, [pc, #296]	@ (8001698 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x22a>
 8001572:	2306      	movs	r3, #6
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x244>
 8001576:	2307      	movs	r3, #7
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x244>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x244>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x244>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x244>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x244>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x244>
 800158e:	2300      	movs	r3, #0
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a0:	4937      	ldr	r1, [pc, #220]	@ (8001680 <HAL_GPIO_Init+0x334>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <HAL_GPIO_Init+0x350>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d2:	4a32      	ldr	r2, [pc, #200]	@ (800169c <HAL_GPIO_Init+0x350>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d8:	4b30      	ldr	r3, [pc, #192]	@ (800169c <HAL_GPIO_Init+0x350>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fc:	4a27      	ldr	r2, [pc, #156]	@ (800169c <HAL_GPIO_Init+0x350>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_GPIO_Init+0x350>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001626:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <HAL_GPIO_Init+0x350>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_GPIO_Init+0x350>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001650:	4a12      	ldr	r2, [pc, #72]	@ (800169c <HAL_GPIO_Init+0x350>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	f47f ae78 	bne.w	800135c <HAL_GPIO_Init+0x10>
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	48000400 	.word	0x48000400
 8001688:	48000800 	.word	0x48000800
 800168c:	48000c00 	.word	0x48000c00
 8001690:	48001000 	.word	0x48001000
 8001694:	48001400 	.word	0x48001400
 8001698:	48001800 	.word	0x48001800
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016fa:	d130      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001708:	d038      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	@ 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001744:	d102      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001758:	d110      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e00f      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d007      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001774:	4a05      	ldr	r2, [pc, #20]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3ca      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b4:	4b94      	ldr	r3, [pc, #592]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e4 	beq.w	8001994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	f040 808b 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 8087 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3a2      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x7c>
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001812:	e005      	b.n	8001820 <HAL_RCC_OscConfig+0x88>
 8001814:	4b7c      	ldr	r3, [pc, #496]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001820:	4293      	cmp	r3, r2
 8001822:	d223      	bcs.n	800186c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd55 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e383      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a72      	ldr	r2, [pc, #456]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	496d      	ldr	r1, [pc, #436]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b6c      	ldr	r3, [pc, #432]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4968      	ldr	r1, [pc, #416]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e025      	b.n	80018b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4960      	ldr	r1, [pc, #384]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	495b      	ldr	r1, [pc, #364]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fd15 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e343      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b8:	f000 fc4a 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b52      	ldr	r3, [pc, #328]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4950      	ldr	r1, [pc, #320]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a10 <HAL_RCC_OscConfig+0x278>)
 80018d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb25 	bl	8000f2c <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d052      	beq.n	8001992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	e327      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb62 	bl	8000fcc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff fb5e 	bl	8000fcc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e310      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192a:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4931      	ldr	r1, [pc, #196]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	492c      	ldr	r1, [pc, #176]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e01a      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196a:	f7ff fb2f 	bl	8000fcc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001972:	f7ff fb2b 	bl	8000fcc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2dd      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x1da>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d074      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x21a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d064      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d160      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2ba      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x24a>
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x280>
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a02      	ldr	r2, [pc, #8]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08005710 	.word	0x08005710
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
 8001a18:	4ba0      	ldr	r3, [pc, #640]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b9d      	ldr	r3, [pc, #628]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9c      	ldr	r2, [pc, #624]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fac8 	bl	8000fcc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fac4 	bl	8000fcc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e276      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b92      	ldr	r3, [pc, #584]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fab4 	bl	8000fcc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fab0 	bl	8000fcc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e262      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e23f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4973      	ldr	r1, [pc, #460]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa6f 	bl	8000fcc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fa6b 	bl	8000fcc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e21d      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	495f      	ldr	r1, [pc, #380]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b5d      	ldr	r3, [pc, #372]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa4b 	bl	8000fcc <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fa47 	bl	8000fcc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f9      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b72:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fa26 	bl	8000fcc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fa22 	bl	8000fcc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1d4      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bac:	4a3b      	ldr	r2, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa09 	bl	8000fcc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fa05 	bl	8000fcc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1b7      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a26      	ldr	r2, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7ff f9cc 	bl	8000fcc <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff f9c8 	bl	8000fcc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e17a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6e:	e029      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x50c>
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001caa:	4a9b      	ldr	r2, [pc, #620]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb4:	4b98      	ldr	r3, [pc, #608]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	4a97      	ldr	r2, [pc, #604]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f97e 	bl	8000fcc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f97a 	bl	8000fcc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e12a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b8b      	ldr	r3, [pc, #556]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x53c>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f967 	bl	8000fcc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f963 	bl	8000fcc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e113      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	4a79      	ldr	r2, [pc, #484]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80fe 	beq.w	8001f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 80d0 	bne.w	8001eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d4c:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d130      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d127      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d8c:	2a07      	cmp	r2, #7
 8001d8e:	bf14      	ite	ne
 8001d90:	2201      	movne	r2, #1
 8001d92:	2200      	moveq	r2, #0
 8001d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d06e      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d069      	beq.n	8001e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc8:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ad      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7ff f8ec 	bl	8000fcc <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f8e8 	bl	8000fcc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e09a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b43      	ldr	r3, [pc, #268]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x784>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0552      	lsls	r2, r2, #21
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0652      	lsls	r2, r2, #25
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e50:	0912      	lsrs	r2, r2, #4
 8001e52:	0452      	lsls	r2, r2, #17
 8001e54:	430a      	orrs	r2, r1
 8001e56:	4930      	ldr	r1, [pc, #192]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f8aa 	bl	8000fcc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f8a6 	bl	8000fcc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e058      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9a:	e050      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e04f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d148      	bne.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec4:	f7ff f882 	bl	8000fcc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f87e 	bl	8000fcc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e030      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x734>
 8001eea:	e028      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f865 	bl	8000fcc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff f861 	bl	8000fcc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d905      	bls.n	8001f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e013      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4905      	ldr	r1, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCC_OscConfig+0x7b4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e001      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	feeefffc 	.word	0xfeeefffc

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0e7      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4970      	ldr	r1, [pc, #448]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b6e      	ldr	r3, [pc, #440]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cf      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d908      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4960      	ldr	r1, [pc, #384]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0a6      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e086      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4943      	ldr	r1, [pc, #268]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7fe ffc8 	bl	8000fcc <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe ffc4 	bl	8000fcc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e06e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	492b      	ldr	r1, [pc, #172]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002096:	4b29      	ldr	r3, [pc, #164]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d210      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4923      	ldr	r1, [pc, #140]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e036      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4918      	ldr	r1, [pc, #96]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4910      	ldr	r1, [pc, #64]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002104:	f000 f824 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	490b      	ldr	r1, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe feff 	bl	8000f2c <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	72fb      	strb	r3, [r7, #11]

  return status;
 8002132:	7afb      	ldrb	r3, [r7, #11]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	08005710 	.word	0x08005710
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x34>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d11e      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021ac:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d134      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xac>
 80021f4:	e005      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	617b      	str	r3, [r7, #20]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	3301      	adds	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0e5b      	lsrs	r3, r3, #25
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	08005728 	.word	0x08005728
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200

08002268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4904      	ldr	r1, [pc, #16]	@ (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08005720 	.word	0x08005720

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b0:	f7ff ffda 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08005720 	.word	0x08005720

080022d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9ee 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
 80022f6:	e014      	b.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	@ 0x58
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002310:	f7ff f9de 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002328:	d10b      	bne.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b80      	cmp	r3, #128	@ 0x80
 800232e:	d919      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2ba0      	cmp	r3, #160	@ 0xa0
 8002334:	d902      	bls.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002336:	2302      	movs	r3, #2
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e013      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e010      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	@ 0x80
 8002346:	d902      	bls.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002348:	2303      	movs	r3, #3
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e00a      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b80      	cmp	r3, #128	@ 0x80
 8002352:	d102      	bne.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e004      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b70      	cmp	r3, #112	@ 0x70
 800235e:	d101      	bne.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0207 	bic.w	r2, r3, #7
 800236c:	4909      	ldr	r1, [pc, #36]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a0:	2300      	movs	r3, #0
 80023a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d041      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023bc:	d02a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c2:	d824      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ce:	d81e      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d8:	d010      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023da:	e018      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023dc:	4b86      	ldr	r3, [pc, #536]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a85      	ldr	r2, [pc, #532]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e8:	e015      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fabb 	bl	800296c <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fa:	e00c      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fba6 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800240c:	e003      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	74fb      	strb	r3, [r7, #19]
      break;
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800242a:	4973      	ldr	r1, [pc, #460]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002432:	e001      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d041      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002448:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800244c:	d02a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800244e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002452:	d824      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800245a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800245e:	d81e      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d010      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800246a:	e018      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246c:	4b62      	ldr	r3, [pc, #392]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a61      	ldr	r2, [pc, #388]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002478:	e015      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fa73 	bl	800296c <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800248a:	e00c      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3320      	adds	r3, #32
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fb5e 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800249c:	e003      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	74fb      	strb	r3, [r7, #19]
      break;
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ac:	4b52      	ldr	r3, [pc, #328]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ba:	494f      	ldr	r1, [pc, #316]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a0 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fc:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002508:	2301      	movs	r3, #1
 800250a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3a      	ldr	r2, [pc, #232]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002518:	f7fe fd58 	bl	8000fcc <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800251e:	e009      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fd54 	bl	8000fcc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	74fb      	strb	r3, [r7, #19]
        break;
 8002532:	e005      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002546:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	d019      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002570:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002590:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd13 	bl	8000fcc <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a8:	e00b      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fd0f 	bl	8000fcc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	74fb      	strb	r3, [r7, #19]
            break;
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ec      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e6:	4904      	ldr	r1, [pc, #16]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ee:	e009      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
 80025f4:	e006      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002604:	7c7b      	ldrb	r3, [r7, #17]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b9e      	ldr	r3, [pc, #632]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	4a9d      	ldr	r2, [pc, #628]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002622:	4b98      	ldr	r3, [pc, #608]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	4994      	ldr	r1, [pc, #592]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002644:	4b8f      	ldr	r3, [pc, #572]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f023 020c 	bic.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	498c      	ldr	r1, [pc, #560]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002666:	4b87      	ldr	r3, [pc, #540]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	4983      	ldr	r1, [pc, #524]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	497b      	ldr	r1, [pc, #492]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026aa:	4b76      	ldr	r3, [pc, #472]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b8:	4972      	ldr	r1, [pc, #456]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	496a      	ldr	r1, [pc, #424]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b65      	ldr	r3, [pc, #404]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	4961      	ldr	r1, [pc, #388]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	4959      	ldr	r1, [pc, #356]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b54      	ldr	r3, [pc, #336]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002740:	4950      	ldr	r1, [pc, #320]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	4948      	ldr	r1, [pc, #288]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	493f      	ldr	r1, [pc, #252]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d028      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a6:	4937      	ldr	r1, [pc, #220]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a31      	ldr	r2, [pc, #196]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
 80027c4:	e011      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f8c8 	bl	800296c <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	491f      	ldr	r1, [pc, #124]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f899 	bl	800296c <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02b      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a02      	ldr	r2, [pc, #8]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e014      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f867 	bl	800296c <RCCEx_PLLSAI1_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c6:	4928      	ldr	r1, [pc, #160]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f844 	bl	800296c <RCCEx_PLLSAI1_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
 80028f2:	e011      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3320      	adds	r3, #32
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f925 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002932:	490d      	ldr	r1, [pc, #52]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002956:	4904      	ldr	r1, [pc, #16]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800295e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000

0800296c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800297a:	4b75      	ldr	r3, [pc, #468]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002986:	4b72      	ldr	r3, [pc, #456]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
       ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800299e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
       ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d047      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e044      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d018      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0x86>
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d825      	bhi.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d002      	beq.n	80029ce <RCCEx_PLLSAI1_Config+0x62>
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d009      	beq.n	80029e0 <RCCEx_PLLSAI1_Config+0x74>
 80029cc:	e020      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ce:	4b60      	ldr	r3, [pc, #384]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11d      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e01a      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e013      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029f2:	4b57      	ldr	r3, [pc, #348]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fe:	4b54      	ldr	r3, [pc, #336]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0e:	e006      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e004      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a26:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	4944      	ldr	r1, [pc, #272]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d17d      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a48:	4b41      	ldr	r3, [pc, #260]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a40      	ldr	r2, [pc, #256]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe faba 	bl	8000fcc <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5c:	f7fe fab6 	bl	8000fcc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a70:	4b37      	ldr	r3, [pc, #220]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d160      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a88:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	0912      	lsrs	r2, r2, #4
 8002aa0:	0452      	lsls	r2, r2, #17
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	492a      	ldr	r1, [pc, #168]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	610b      	str	r3, [r1, #16]
 8002aaa:	e027      	b.n	8002afc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d112      	bne.n	8002ad8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab2:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002aba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	0211      	lsls	r1, r2, #8
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6912      	ldr	r2, [r2, #16]
 8002ac8:	0852      	lsrs	r2, r2, #1
 8002aca:	3a01      	subs	r2, #1
 8002acc:	0552      	lsls	r2, r2, #21
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	491f      	ldr	r1, [pc, #124]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	610b      	str	r3, [r1, #16]
 8002ad6:	e011      	b.n	8002afc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ae0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6892      	ldr	r2, [r2, #8]
 8002ae8:	0211      	lsls	r1, r2, #8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6952      	ldr	r2, [r2, #20]
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4916      	ldr	r1, [pc, #88]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fa60 	bl	8000fcc <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b10:	f7fe fa5c 	bl	8000fcc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
          break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000

08002b54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b62:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b6e:	4b67      	ldr	r3, [pc, #412]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10d      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
       ||
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b86:	4b61      	ldr	r3, [pc, #388]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
       ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d047      	beq.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e044      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d018      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0x86>
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d825      	bhi.n	8002bf8 <RCCEx_PLLSAI2_Config+0xa4>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <RCCEx_PLLSAI2_Config+0x62>
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d009      	beq.n	8002bc8 <RCCEx_PLLSAI2_Config+0x74>
 8002bb4:	e020      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bb6:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11d      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc6:	e01a      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e013      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bda:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002be6:	4b49      	ldr	r3, [pc, #292]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bf6:	e006      	b.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e004      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	430b      	orrs	r3, r1
 8002c24:	4939      	ldr	r1, [pc, #228]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d167      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a35      	ldr	r2, [pc, #212]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe f9c6 	bl	8000fcc <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c42:	e009      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c44:	f7fe f9c2 	bl	8000fcc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
        break;
 8002c56:	e005      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c58:	4b2c      	ldr	r3, [pc, #176]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d14a      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c70:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	0211      	lsls	r1, r2, #8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	0912      	lsrs	r2, r2, #4
 8002c88:	0452      	lsls	r2, r2, #17
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	491f      	ldr	r1, [pc, #124]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	614b      	str	r3, [r1, #20]
 8002c92:	e011      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	0211      	lsls	r1, r2, #8
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6912      	ldr	r2, [r2, #16]
 8002caa:	0852      	lsrs	r2, r2, #1
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0652      	lsls	r2, r2, #25
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f982 	bl	8000fcc <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cca:	e009      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ccc:	f7fe f97e 	bl	8000fcc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d902      	bls.n	8002ce0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cde:	e005      	b.n	8002cec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ef      	beq.n	8002ccc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4904      	ldr	r1, [pc, #16]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e049      	b.n	8002db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd ff0a 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fb7a 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e049      	b.n	8002e64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f841 	bl	8002e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 fb23 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start+0x24>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e03c      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d109      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x3e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e02f      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x58>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e022      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x72>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e015      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start+0x8c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09c      	b.n	8003060 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0xb6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f34:	e023      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_PWM_Start+0xc6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f44:	e01b      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0xd6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f54:	e013      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_PWM_Start+0xe6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f64:	e00b      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_PWM_Start+0xf6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f74:	e003      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fe74 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a35      	ldr	r2, [pc, #212]	@ (8003068 <HAL_TIM_PWM_Start+0x1e8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x13e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a34      	ldr	r2, [pc, #208]	@ (800306c <HAL_TIM_PWM_Start+0x1ec>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x13e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a32      	ldr	r2, [pc, #200]	@ (8003070 <HAL_TIM_PWM_Start+0x1f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x13e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a31      	ldr	r2, [pc, #196]	@ (8003074 <HAL_TIM_PWM_Start+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x13e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <HAL_TIM_PWM_Start+0x1f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x142>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_PWM_Start+0x144>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <HAL_TIM_PWM_Start+0x1e8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fea:	d018      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a22      	ldr	r2, [pc, #136]	@ (800307c <HAL_TIM_PWM_Start+0x1fc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a21      	ldr	r2, [pc, #132]	@ (8003080 <HAL_TIM_PWM_Start+0x200>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1f      	ldr	r2, [pc, #124]	@ (8003084 <HAL_TIM_PWM_Start+0x204>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a17      	ldr	r2, [pc, #92]	@ (800306c <HAL_TIM_PWM_Start+0x1ec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIM_PWM_Start+0x19e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <HAL_TIM_PWM_Start+0x1f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d115      	bne.n	800304a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b18      	ldr	r3, [pc, #96]	@ (8003088 <HAL_TIM_PWM_Start+0x208>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b06      	cmp	r3, #6
 800302e:	d015      	beq.n	800305c <HAL_TIM_PWM_Start+0x1dc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003036:	d011      	beq.n	800305c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	e008      	b.n	800305c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e000      	b.n	800305e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40013400 	.word	0x40013400
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	00010007 	.word	0x00010007

0800308c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0ff      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b14      	cmp	r3, #20
 80030b6:	f200 80f0 	bhi.w	800329a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	08003115 	.word	0x08003115
 80030c4:	0800329b 	.word	0x0800329b
 80030c8:	0800329b 	.word	0x0800329b
 80030cc:	0800329b 	.word	0x0800329b
 80030d0:	08003155 	.word	0x08003155
 80030d4:	0800329b 	.word	0x0800329b
 80030d8:	0800329b 	.word	0x0800329b
 80030dc:	0800329b 	.word	0x0800329b
 80030e0:	08003197 	.word	0x08003197
 80030e4:	0800329b 	.word	0x0800329b
 80030e8:	0800329b 	.word	0x0800329b
 80030ec:	0800329b 	.word	0x0800329b
 80030f0:	080031d7 	.word	0x080031d7
 80030f4:	0800329b 	.word	0x0800329b
 80030f8:	0800329b 	.word	0x0800329b
 80030fc:	0800329b 	.word	0x0800329b
 8003100:	08003219 	.word	0x08003219
 8003104:	0800329b 	.word	0x0800329b
 8003108:	0800329b 	.word	0x0800329b
 800310c:	0800329b 	.word	0x0800329b
 8003110:	08003259 	.word	0x08003259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa3a 	bl	8003594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]
      break;
 8003152:	e0a5      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 faaa 	bl	80036b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6999      	ldr	r1, [r3, #24]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	619a      	str	r2, [r3, #24]
      break;
 8003194:	e084      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fb13 	bl	80037c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0208 	orr.w	r2, r2, #8
 80031b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0204 	bic.w	r2, r2, #4
 80031c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69d9      	ldr	r1, [r3, #28]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	61da      	str	r2, [r3, #28]
      break;
 80031d4:	e064      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fb7b 	bl	80038d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69d9      	ldr	r1, [r3, #28]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	61da      	str	r2, [r3, #28]
      break;
 8003216:	e043      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fbc4 	bl	80039ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003256:	e023      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fc08 	bl	8003a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003298:	e002      	b.n	80032a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
      break;
 800329e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_ConfigClockSource+0x1c>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0b6      	b.n	800343e <HAL_TIM_ConfigClockSource+0x18a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330c:	d03e      	beq.n	800338c <HAL_TIM_ConfigClockSource+0xd8>
 800330e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003312:	f200 8087 	bhi.w	8003424 <HAL_TIM_ConfigClockSource+0x170>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331a:	f000 8086 	beq.w	800342a <HAL_TIM_ConfigClockSource+0x176>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003322:	d87f      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 8003324:	2b70      	cmp	r3, #112	@ 0x70
 8003326:	d01a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0xaa>
 8003328:	2b70      	cmp	r3, #112	@ 0x70
 800332a:	d87b      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d050      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x11e>
 8003330:	2b60      	cmp	r3, #96	@ 0x60
 8003332:	d877      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 8003334:	2b50      	cmp	r3, #80	@ 0x50
 8003336:	d03c      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0xfe>
 8003338:	2b50      	cmp	r3, #80	@ 0x50
 800333a:	d873      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d058      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x13e>
 8003340:	2b40      	cmp	r3, #64	@ 0x40
 8003342:	d86f      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 8003344:	2b30      	cmp	r3, #48	@ 0x30
 8003346:	d064      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15e>
 8003348:	2b30      	cmp	r3, #48	@ 0x30
 800334a:	d86b      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d060      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15e>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d867      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05c      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15e>
 8003358:	2b10      	cmp	r3, #16
 800335a:	d05a      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15e>
 800335c:	e062      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336e:	f000 fc61 	bl	8003c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	609a      	str	r2, [r3, #8]
      break;
 800338a:	e04f      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800339c:	f000 fc4a 	bl	8003c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ae:	609a      	str	r2, [r3, #8]
      break;
 80033b0:	e03c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 fbbe 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2150      	movs	r1, #80	@ 0x50
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fc17 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80033d0:	e02c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 fbdd 	bl	8003b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2160      	movs	r1, #96	@ 0x60
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fc07 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80033f0:	e01c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 fb9e 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2140      	movs	r1, #64	@ 0x40
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fbf7 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003410:	e00c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f000 fbee 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003422:	e003      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e000      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800342a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <TIM_Base_SetConfig+0x12c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <TIM_Base_SetConfig+0x130>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a42      	ldr	r2, [pc, #264]	@ (800357c <TIM_Base_SetConfig+0x134>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a41      	ldr	r2, [pc, #260]	@ (8003580 <TIM_Base_SetConfig+0x138>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <TIM_Base_SetConfig+0x13c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <TIM_Base_SetConfig+0x12c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a8:	d01b      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a32      	ldr	r2, [pc, #200]	@ (8003578 <TIM_Base_SetConfig+0x130>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d017      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a31      	ldr	r2, [pc, #196]	@ (800357c <TIM_Base_SetConfig+0x134>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a30      	ldr	r2, [pc, #192]	@ (8003580 <TIM_Base_SetConfig+0x138>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <TIM_Base_SetConfig+0x13c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003588 <TIM_Base_SetConfig+0x140>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2d      	ldr	r2, [pc, #180]	@ (800358c <TIM_Base_SetConfig+0x144>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_Base_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <TIM_Base_SetConfig+0x148>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d108      	bne.n	80034f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <TIM_Base_SetConfig+0x12c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00f      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <TIM_Base_SetConfig+0x13c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00b      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <TIM_Base_SetConfig+0x140>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a16      	ldr	r2, [pc, #88]	@ (800358c <TIM_Base_SetConfig+0x144>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <TIM_Base_SetConfig+0x148>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]
  }
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40013400 	.word	0x40013400
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800

08003594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 0201 	bic.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0302 	bic.w	r3, r3, #2
 80035e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a2c      	ldr	r2, [pc, #176]	@ (80036a0 <TIM_OC1_SetConfig+0x10c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <TIM_OC1_SetConfig+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a2b      	ldr	r2, [pc, #172]	@ (80036a4 <TIM_OC1_SetConfig+0x110>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00b      	beq.n	8003614 <TIM_OC1_SetConfig+0x80>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2a      	ldr	r2, [pc, #168]	@ (80036a8 <TIM_OC1_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_OC1_SetConfig+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a29      	ldr	r2, [pc, #164]	@ (80036ac <TIM_OC1_SetConfig+0x118>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC1_SetConfig+0x80>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a28      	ldr	r2, [pc, #160]	@ (80036b0 <TIM_OC1_SetConfig+0x11c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10c      	bne.n	800362e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0308 	bic.w	r3, r3, #8
 800361a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <TIM_OC1_SetConfig+0x10c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_OC1_SetConfig+0xc2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1a      	ldr	r2, [pc, #104]	@ (80036a4 <TIM_OC1_SetConfig+0x110>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_OC1_SetConfig+0xc2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a19      	ldr	r2, [pc, #100]	@ (80036a8 <TIM_OC1_SetConfig+0x114>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_OC1_SetConfig+0xc2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a18      	ldr	r2, [pc, #96]	@ (80036ac <TIM_OC1_SetConfig+0x118>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_OC1_SetConfig+0xc2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a17      	ldr	r2, [pc, #92]	@ (80036b0 <TIM_OC1_SetConfig+0x11c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d111      	bne.n	800367a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800365c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800

080036b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f023 0210 	bic.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a28      	ldr	r2, [pc, #160]	@ (80037b4 <TIM_OC2_SetConfig+0x100>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_OC2_SetConfig+0x6c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a27      	ldr	r2, [pc, #156]	@ (80037b8 <TIM_OC2_SetConfig+0x104>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10d      	bne.n	800373c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1d      	ldr	r2, [pc, #116]	@ (80037b4 <TIM_OC2_SetConfig+0x100>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00f      	beq.n	8003764 <TIM_OC2_SetConfig+0xb0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1c      	ldr	r2, [pc, #112]	@ (80037b8 <TIM_OC2_SetConfig+0x104>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_OC2_SetConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <TIM_OC2_SetConfig+0x108>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_OC2_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <TIM_OC2_SetConfig+0x10c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC2_SetConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <TIM_OC2_SetConfig+0x110>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d113      	bne.n	800378c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800376a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40013400 	.word	0x40013400
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800

080037c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <TIM_OC3_SetConfig+0xfc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC3_SetConfig+0x6a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <TIM_OC3_SetConfig+0x100>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10d      	bne.n	800384e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800384c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <TIM_OC3_SetConfig+0xfc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00f      	beq.n	8003876 <TIM_OC3_SetConfig+0xae>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1b      	ldr	r2, [pc, #108]	@ (80038c8 <TIM_OC3_SetConfig+0x100>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_OC3_SetConfig+0xae>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <TIM_OC3_SetConfig+0x104>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_OC3_SetConfig+0xae>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <TIM_OC3_SetConfig+0x108>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_OC3_SetConfig+0xae>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <TIM_OC3_SetConfig+0x10c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d113      	bne.n	800389e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800387c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	031b      	lsls	r3, r3, #12
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a18      	ldr	r2, [pc, #96]	@ (8003998 <TIM_OC4_SetConfig+0xc0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_OC4_SetConfig+0x84>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a17      	ldr	r2, [pc, #92]	@ (800399c <TIM_OC4_SetConfig+0xc4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_OC4_SetConfig+0x84>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a16      	ldr	r2, [pc, #88]	@ (80039a0 <TIM_OC4_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_OC4_SetConfig+0x84>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a15      	ldr	r2, [pc, #84]	@ (80039a4 <TIM_OC4_SetConfig+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_OC4_SetConfig+0x84>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <TIM_OC4_SetConfig+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800

080039ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a17      	ldr	r2, [pc, #92]	@ (8003a60 <TIM_OC5_SetConfig+0xb4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_OC5_SetConfig+0x7a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <TIM_OC5_SetConfig+0xb8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_OC5_SetConfig+0x7a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_OC5_SetConfig+0xbc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_OC5_SetConfig+0x7a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <TIM_OC5_SetConfig+0xc0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_OC5_SetConfig+0x7a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <TIM_OC5_SetConfig+0xc4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d109      	bne.n	8003a3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40013400 	.word	0x40013400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	051b      	lsls	r3, r3, #20
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a18      	ldr	r2, [pc, #96]	@ (8003b2c <TIM_OC6_SetConfig+0xb8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_OC6_SetConfig+0x7c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	@ (8003b30 <TIM_OC6_SetConfig+0xbc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_OC6_SetConfig+0x7c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <TIM_OC6_SetConfig+0xc0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_OC6_SetConfig+0x7c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <TIM_OC6_SetConfig+0xc4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC6_SetConfig+0x7c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <TIM_OC6_SetConfig+0xc8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d109      	bne.n	8003b04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 0210 	bic.w	r2, r3, #16
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e068      	b.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d018      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a13      	ldr	r2, [pc, #76]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10c      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40013400 	.word	0x40013400
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40014000 	.word	0x40014000

08003dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e065      	b.n	8003eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a16      	ldr	r2, [pc, #88]	@ (8003ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a14      	ldr	r2, [pc, #80]	@ (8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d115      	bne.n	8003ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	051b      	lsls	r3, r3, #20
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40013400 	.word	0x40013400

08003ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e040      	b.n	8003f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fc fedc 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	@ 0x24
 8003ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fedc 	bl	8004cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fc21 	bl	8004760 <UART_SetConfig>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01b      	b.n	8003f60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 ff5b 	bl	8004e14 <UART_CheckIdleState>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d177      	bne.n	8004070 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Transmit+0x24>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e070      	b.n	8004072 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	@ 0x21
 8003f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd f815 	bl	8000fcc <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x68>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd8:	e02f      	b.n	800403a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	@ 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 ffbd 	bl	8004f64 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e03b      	b.n	8004072 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400c:	b292      	uxth	r2, r2
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	3302      	adds	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e007      	b.n	8004028 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3301      	adds	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1c9      	bne.n	8003fda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	@ 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 ff87 	bl	8004f64 <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e005      	b.n	8004072 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004090:	2b20      	cmp	r3, #32
 8004092:	d137      	bne.n	8004104 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_UART_Receive_IT+0x24>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e030      	b.n	8004106 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <HAL_UART_Receive_IT+0x94>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d01f      	beq.n	80040f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d018      	beq.n	80040f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	613b      	str	r3, [r7, #16]
   return(result);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 ffa0 	bl	8005040 <UART_Start_Receive_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	e000      	b.n	8004106 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40008000 	.word	0x40008000

08004114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0ba      	sub	sp, #232	@ 0xe8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800413a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800413e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004142:	4013      	ands	r3, r2
 8004144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d115      	bne.n	800417c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 82ca 	beq.w	8004706 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
      }
      return;
 800417a:	e2c4      	b.n	8004706 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800417c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8117 	beq.w	80043b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004192:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004196:	4b85      	ldr	r3, [pc, #532]	@ (80043ac <HAL_UART_IRQHandler+0x298>)
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 810a 	beq.w	80043b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d011      	beq.n	80041d0 <HAL_UART_IRQHandler+0xbc>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c6:	f043 0201 	orr.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d011      	beq.n	8004200 <HAL_UART_IRQHandler+0xec>
 80041dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2202      	movs	r2, #2
 80041ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_UART_IRQHandler+0x11c>
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2208      	movs	r2, #8
 800425a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d012      	beq.n	800429e <HAL_UART_IRQHandler+0x18a>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00c      	beq.n	800429e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800428c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8230 	beq.w	800470a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04f      	beq.n	8004396 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 ff68 	bl	80051cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d141      	bne.n	800438e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800434e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435a:	2b00      	cmp	r3, #0
 800435c:	d013      	beq.n	8004386 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004362:	4a13      	ldr	r2, [pc, #76]	@ (80043b0 <HAL_UART_IRQHandler+0x29c>)
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc ffad 	bl	80012ca <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d017      	beq.n	80043a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00f      	b.n	80043a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9d4 	bl	8004734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e00b      	b.n	80043a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9d0 	bl	8004734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e007      	b.n	80043a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f9cc 	bl	8004734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043a4:	e1b1      	b.n	800470a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a6:	bf00      	nop
    return;
 80043a8:	e1af      	b.n	800470a <HAL_UART_IRQHandler+0x5f6>
 80043aa:	bf00      	nop
 80043ac:	04000120 	.word	0x04000120
 80043b0:	08005295 	.word	0x08005295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f040 816a 	bne.w	8004692 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8163 	beq.w	8004692 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 815c 	beq.w	8004692 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	f040 80d4 	bne.w	800459a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80ad 	beq.w	8004562 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004412:	429a      	cmp	r2, r3
 8004414:	f080 80a5 	bcs.w	8004562 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 8086 	bne.w	8004540 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800444c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800445e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004462:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800446a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1da      	bne.n	8004434 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800448e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e1      	bne.n	800447e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3308      	adds	r3, #8
 80044c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3308      	adds	r3, #8
 80044da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800450e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004522:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004524:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e4      	bne.n	8004500 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fe87 	bl	800124e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004552:	b29b      	uxth	r3, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	b29b      	uxth	r3, r3
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8f4 	bl	8004748 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004560:	e0d5      	b.n	800470e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004568:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800456c:	429a      	cmp	r2, r3
 800456e:	f040 80ce 	bne.w	800470e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80c5 	bne.w	800470e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8d8 	bl	8004748 <HAL_UARTEx_RxEventCallback>
      return;
 8004598:	e0b9      	b.n	800470e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80ab 	beq.w	8004712 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a6 	beq.w	8004712 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e4      	bne.n	80045c6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	623b      	str	r3, [r7, #32]
   return(result);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004620:	633a      	str	r2, [r7, #48]	@ 0x30
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e3      	bne.n	80045fc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	60fb      	str	r3, [r7, #12]
   return(result);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	617b      	str	r3, [r7, #20]
   return(result);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e4      	bne.n	8004648 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f85c 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004690:	e03f      	b.n	8004712 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <HAL_UART_IRQHandler+0x5a8>
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 ffe9 	bl	800568c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ba:	e02d      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01c      	beq.n	8004716 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
    }
    return;
 80046e4:	e017      	b.n	8004716 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <HAL_UART_IRQHandler+0x604>
 80046f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fdde 	bl	80052c0 <UART_EndTransmit_IT>
    return;
 8004704:	e008      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
      return;
 8004706:	bf00      	nop
 8004708:	e006      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
    return;
 800470a:	bf00      	nop
 800470c:	e004      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
      return;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
      return;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_UART_IRQHandler+0x604>
    return;
 8004716:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004718:	37e8      	adds	r7, #232	@ 0xe8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop

08004720 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004764:	b08a      	sub	sp, #40	@ 0x28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	431a      	orrs	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4313      	orrs	r3, r2
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	4ba4      	ldr	r3, [pc, #656]	@ (8004a20 <UART_SetConfig+0x2c0>)
 8004790:	4013      	ands	r3, r2
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004798:	430b      	orrs	r3, r1
 800479a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a99      	ldr	r2, [pc, #612]	@ (8004a24 <UART_SetConfig+0x2c4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c8:	4313      	orrs	r3, r2
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a90      	ldr	r2, [pc, #576]	@ (8004a28 <UART_SetConfig+0x2c8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d126      	bne.n	8004838 <UART_SetConfig+0xd8>
 80047ea:	4b90      	ldr	r3, [pc, #576]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d81b      	bhi.n	8004830 <UART_SetConfig+0xd0>
 80047f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004800 <UART_SetConfig+0xa0>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004811 	.word	0x08004811
 8004804:	08004821 	.word	0x08004821
 8004808:	08004819 	.word	0x08004819
 800480c:	08004829 	.word	0x08004829
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004816:	e116      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004818:	2302      	movs	r3, #2
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e112      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004820:	2304      	movs	r3, #4
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e10e      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004828:	2308      	movs	r3, #8
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e10a      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004830:	2310      	movs	r3, #16
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e106      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a30 <UART_SetConfig+0x2d0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d138      	bne.n	80048b4 <UART_SetConfig+0x154>
 8004842:	4b7a      	ldr	r3, [pc, #488]	@ (8004a2c <UART_SetConfig+0x2cc>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b0c      	cmp	r3, #12
 800484e:	d82d      	bhi.n	80048ac <UART_SetConfig+0x14c>
 8004850:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0xf8>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800488d 	.word	0x0800488d
 800485c:	080048ad 	.word	0x080048ad
 8004860:	080048ad 	.word	0x080048ad
 8004864:	080048ad 	.word	0x080048ad
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048ad 	.word	0x080048ad
 8004874:	080048ad 	.word	0x080048ad
 8004878:	08004895 	.word	0x08004895
 800487c:	080048ad 	.word	0x080048ad
 8004880:	080048ad 	.word	0x080048ad
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048a5 	.word	0x080048a5
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e0d8      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004894:	2302      	movs	r3, #2
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e0d4      	b.n	8004a46 <UART_SetConfig+0x2e6>
 800489c:	2304      	movs	r3, #4
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a2:	e0d0      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048a4:	2308      	movs	r3, #8
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048aa:	e0cc      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048ac:	2310      	movs	r3, #16
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b2:	e0c8      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004a34 <UART_SetConfig+0x2d4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d125      	bne.n	800490a <UART_SetConfig+0x1aa>
 80048be:	4b5b      	ldr	r3, [pc, #364]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048c8:	2b30      	cmp	r3, #48	@ 0x30
 80048ca:	d016      	beq.n	80048fa <UART_SetConfig+0x19a>
 80048cc:	2b30      	cmp	r3, #48	@ 0x30
 80048ce:	d818      	bhi.n	8004902 <UART_SetConfig+0x1a2>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d00a      	beq.n	80048ea <UART_SetConfig+0x18a>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d814      	bhi.n	8004902 <UART_SetConfig+0x1a2>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <UART_SetConfig+0x182>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d008      	beq.n	80048f2 <UART_SetConfig+0x192>
 80048e0:	e00f      	b.n	8004902 <UART_SetConfig+0x1a2>
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e8:	e0ad      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048ea:	2302      	movs	r3, #2
 80048ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f0:	e0a9      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048f2:	2304      	movs	r3, #4
 80048f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f8:	e0a5      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80048fa:	2308      	movs	r3, #8
 80048fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004900:	e0a1      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004902:	2310      	movs	r3, #16
 8004904:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004908:	e09d      	b.n	8004a46 <UART_SetConfig+0x2e6>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a38 <UART_SetConfig+0x2d8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d125      	bne.n	8004960 <UART_SetConfig+0x200>
 8004914:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <UART_SetConfig+0x2cc>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800491e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004920:	d016      	beq.n	8004950 <UART_SetConfig+0x1f0>
 8004922:	2bc0      	cmp	r3, #192	@ 0xc0
 8004924:	d818      	bhi.n	8004958 <UART_SetConfig+0x1f8>
 8004926:	2b80      	cmp	r3, #128	@ 0x80
 8004928:	d00a      	beq.n	8004940 <UART_SetConfig+0x1e0>
 800492a:	2b80      	cmp	r3, #128	@ 0x80
 800492c:	d814      	bhi.n	8004958 <UART_SetConfig+0x1f8>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <UART_SetConfig+0x1d8>
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d008      	beq.n	8004948 <UART_SetConfig+0x1e8>
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x1f8>
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e082      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004940:	2302      	movs	r3, #2
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e07e      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e07a      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e076      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e072      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <UART_SetConfig+0x2dc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d12a      	bne.n	80049c0 <UART_SetConfig+0x260>
 800496a:	4b30      	ldr	r3, [pc, #192]	@ (8004a2c <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004978:	d01a      	beq.n	80049b0 <UART_SetConfig+0x250>
 800497a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497e:	d81b      	bhi.n	80049b8 <UART_SetConfig+0x258>
 8004980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004984:	d00c      	beq.n	80049a0 <UART_SetConfig+0x240>
 8004986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800498a:	d815      	bhi.n	80049b8 <UART_SetConfig+0x258>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <UART_SetConfig+0x238>
 8004990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004994:	d008      	beq.n	80049a8 <UART_SetConfig+0x248>
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x258>
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e052      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e04e      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80049a8:	2304      	movs	r3, #4
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e04a      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80049b0:	2308      	movs	r3, #8
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e046      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e042      	b.n	8004a46 <UART_SetConfig+0x2e6>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <UART_SetConfig+0x2c4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d13a      	bne.n	8004a40 <UART_SetConfig+0x2e0>
 80049ca:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <UART_SetConfig+0x2cc>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049d8:	d01a      	beq.n	8004a10 <UART_SetConfig+0x2b0>
 80049da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049de:	d81b      	bhi.n	8004a18 <UART_SetConfig+0x2b8>
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e4:	d00c      	beq.n	8004a00 <UART_SetConfig+0x2a0>
 80049e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ea:	d815      	bhi.n	8004a18 <UART_SetConfig+0x2b8>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <UART_SetConfig+0x298>
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f4:	d008      	beq.n	8004a08 <UART_SetConfig+0x2a8>
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x2b8>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e022      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e01e      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e01a      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e016      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e012      	b.n	8004a46 <UART_SetConfig+0x2e6>
 8004a20:	efff69f3 	.word	0xefff69f3
 8004a24:	40008000 	.word	0x40008000
 8004a28:	40013800 	.word	0x40013800
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40004400 	.word	0x40004400
 8004a34:	40004800 	.word	0x40004800
 8004a38:	40004c00 	.word	0x40004c00
 8004a3c:	40005000 	.word	0x40005000
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a9f      	ldr	r2, [pc, #636]	@ (8004cc8 <UART_SetConfig+0x568>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d17a      	bne.n	8004b46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d824      	bhi.n	8004aa2 <UART_SetConfig+0x342>
 8004a58:	a201      	add	r2, pc, #4	@ (adr r2, 8004a60 <UART_SetConfig+0x300>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004aa3 	.word	0x08004aa3
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004aa3 	.word	0x08004aa3
 8004a70:	08004a93 	.word	0x08004a93
 8004a74:	08004aa3 	.word	0x08004aa3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004aa3 	.word	0x08004aa3
 8004a80:	08004a9b 	.word	0x08004a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7fd fbfc 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8004a88:	61f8      	str	r0, [r7, #28]
        break;
 8004a8a:	e010      	b.n	8004aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ccc <UART_SetConfig+0x56c>)
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e00d      	b.n	8004aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a92:	f7fd fb5d 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004a96:	61f8      	str	r0, [r7, #28]
        break;
 8004a98:	e009      	b.n	8004aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	61fb      	str	r3, [r7, #28]
        break;
 8004aa0:	e005      	b.n	8004aae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80fb 	beq.w	8004cac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d305      	bcc.n	8004ad2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ad8:	e0e8      	b.n	8004cac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2200      	movs	r2, #0
 8004ade:	461c      	mov	r4, r3
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	022b      	lsls	r3, r5, #8
 8004aec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004af0:	0222      	lsls	r2, r4, #8
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6849      	ldr	r1, [r1, #4]
 8004af6:	0849      	lsrs	r1, r1, #1
 8004af8:	2000      	movs	r0, #0
 8004afa:	4688      	mov	r8, r1
 8004afc:	4681      	mov	r9, r0
 8004afe:	eb12 0a08 	adds.w	sl, r2, r8
 8004b02:	eb43 0b09 	adc.w	fp, r3, r9
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b14:	4650      	mov	r0, sl
 8004b16:	4659      	mov	r1, fp
 8004b18:	f7fb fb56 	bl	80001c8 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b2a:	d308      	bcc.n	8004b3e <UART_SetConfig+0x3de>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b32:	d204      	bcs.n	8004b3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	e0b6      	b.n	8004cac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b44:	e0b2      	b.n	8004cac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4e:	d15e      	bne.n	8004c0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d828      	bhi.n	8004baa <UART_SetConfig+0x44a>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0x400>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004bab 	.word	0x08004bab
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fd fb7c 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8004b88:	61f8      	str	r0, [r7, #28]
        break;
 8004b8a:	e014      	b.n	8004bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fd fb8e 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8004b90:	61f8      	str	r0, [r7, #28]
        break;
 8004b92:	e010      	b.n	8004bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b4d      	ldr	r3, [pc, #308]	@ (8004ccc <UART_SetConfig+0x56c>)
 8004b96:	61fb      	str	r3, [r7, #28]
        break;
 8004b98:	e00d      	b.n	8004bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fd fad9 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004b9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba6:	61fb      	str	r3, [r7, #28]
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d077      	beq.n	8004cac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0f      	cmp	r3, #15
 8004bd6:	d916      	bls.n	8004c06 <UART_SetConfig+0x4a6>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bde:	d212      	bcs.n	8004c06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f023 030f 	bic.w	r3, r3, #15
 8004be8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	8afa      	ldrh	r2, [r7, #22]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e052      	b.n	8004cac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c0c:	e04e      	b.n	8004cac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d827      	bhi.n	8004c66 <UART_SetConfig+0x506>
 8004c16:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <UART_SetConfig+0x4bc>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c67 	.word	0x08004c67
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c5f 	.word	0x08004c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fd fb1e 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e014      	b.n	8004c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fd fb30 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8004c4c:	61f8      	str	r0, [r7, #28]
        break;
 8004c4e:	e010      	b.n	8004c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ccc <UART_SetConfig+0x56c>)
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e00d      	b.n	8004c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7fd fa7b 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004c5a:	61f8      	str	r0, [r7, #28]
        break;
 8004c5c:	e009      	b.n	8004c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e005      	b.n	8004c72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c70:	bf00      	nop
    }

    if (pclk != 0U)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d019      	beq.n	8004cac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	085a      	lsrs	r2, r3, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d909      	bls.n	8004ca6 <UART_SetConfig+0x546>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c98:	d205      	bcs.n	8004ca6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e002      	b.n	8004cac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3728      	adds	r7, #40	@ 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40008000 	.word	0x40008000
 8004ccc:	00f42400 	.word	0x00f42400

08004cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dce:	d10a      	bne.n	8004de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b098      	sub	sp, #96	@ 0x60
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e24:	f7fc f8d2 	bl	8000fcc <HAL_GetTick>
 8004e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d12e      	bne.n	8004e96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e40:	2200      	movs	r2, #0
 8004e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f88c 	bl	8004f64 <UART_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d021      	beq.n	8004e96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e062      	b.n	8004f5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d149      	bne.n	8004f38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f856 	bl	8004f64 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d03c      	beq.n	8004f38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	623b      	str	r3, [r7, #32]
   return(result);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f10:	61fa      	str	r2, [r7, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e011      	b.n	8004f5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3758      	adds	r7, #88	@ 0x58
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f74:	e04f      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d04b      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fc f825 	bl	8000fcc <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e04e      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d037      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b80      	cmp	r3, #128	@ 0x80
 8004faa:	d034      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d031      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d110      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f8ff 	bl	80051cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e029      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ff0:	d111      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f8e5 	bl	80051cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e00f      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d0a0      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005040:	b480      	push	{r7}
 8005042:	b097      	sub	sp, #92	@ 0x5c
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d10e      	bne.n	8005092 <UART_Start_Receive_IT+0x52>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <UART_Start_Receive_IT+0x48>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005082:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005086:	e02d      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22ff      	movs	r2, #255	@ 0xff
 800508c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005090:	e028      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <UART_Start_Receive_IT+0x76>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <UART_Start_Receive_IT+0x6c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	@ 0xff
 80050a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050aa:	e01b      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	227f      	movs	r2, #127	@ 0x7f
 80050b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050b4:	e016      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050be:	d10d      	bne.n	80050dc <UART_Start_Receive_IT+0x9c>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <UART_Start_Receive_IT+0x92>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	227f      	movs	r2, #127	@ 0x7f
 80050cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050d0:	e008      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	223f      	movs	r2, #63	@ 0x3f
 80050d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050da:	e003      	b.n	80050e4 <UART_Start_Receive_IT+0xa4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2222      	movs	r2, #34	@ 0x22
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	657b      	str	r3, [r7, #84]	@ 0x54
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005114:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005116:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800511a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005130:	d107      	bne.n	8005142 <UART_Start_Receive_IT+0x102>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a21      	ldr	r2, [pc, #132]	@ (80051c4 <UART_Start_Receive_IT+0x184>)
 800513e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005140:	e002      	b.n	8005148 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a20      	ldr	r2, [pc, #128]	@ (80051c8 <UART_Start_Receive_IT+0x188>)
 8005146:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d019      	beq.n	8005184 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005170:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_Start_Receive_IT+0x110>
 8005182:	e018      	b.n	80051b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	653b      	str	r3, [r7, #80]	@ 0x50
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	375c      	adds	r7, #92	@ 0x5c
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	080054d1 	.word	0x080054d1
 80051c8:	08005315 	.word	0x08005315

080051cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b095      	sub	sp, #84	@ 0x54
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e6      	bne.n	80051d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	61fb      	str	r3, [r7, #28]
   return(result);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800522c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523e:	2b01      	cmp	r3, #1
 8005240:	d118      	bne.n	8005274 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	647b      	str	r3, [r7, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	613b      	str	r3, [r7, #16]
   return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e6      	bne.n	8005242 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005288:	bf00      	nop
 800528a:	3754      	adds	r7, #84	@ 0x54
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fa3e 	bl	8004734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	613b      	str	r3, [r7, #16]
   return(result);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fa0a 	bl	8004720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800530c:	bf00      	nop
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b09c      	sub	sp, #112	@ 0x70
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005322:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532c:	2b22      	cmp	r3, #34	@ 0x22
 800532e:	f040 80be 	bne.w	80054ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005338:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800533c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005340:	b2d9      	uxtb	r1, r3
 8005342:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	400a      	ands	r2, r1
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 80a3 	bne.w	80054c2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800538a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800539a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800539c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80053d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a34      	ldr	r2, [pc, #208]	@ (80054cc <UART_RxISR_8BIT+0x1b8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01f      	beq.n	8005440 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d018      	beq.n	8005440 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	623b      	str	r3, [r7, #32]
   return(result);
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005422:	663b      	str	r3, [r7, #96]	@ 0x60
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800542c:	633b      	str	r3, [r7, #48]	@ 0x30
 800542e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e6      	bne.n	800540e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005444:	2b01      	cmp	r3, #1
 8005446:	d12e      	bne.n	80054a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	60fb      	str	r3, [r7, #12]
   return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	617b      	str	r3, [r7, #20]
   return(result);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b10      	cmp	r3, #16
 800548c:	d103      	bne.n	8005496 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2210      	movs	r2, #16
 8005494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff f952 	bl	8004748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054a4:	e00d      	b.n	80054c2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb fb12 	bl	8000ad0 <HAL_UART_RxCpltCallback>
}
 80054ac:	e009      	b.n	80054c2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	8b1b      	ldrh	r3, [r3, #24]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	b292      	uxth	r2, r2
 80054c0:	831a      	strh	r2, [r3, #24]
}
 80054c2:	bf00      	nop
 80054c4:	3770      	adds	r7, #112	@ 0x70
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40008000 	.word	0x40008000

080054d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b09c      	sub	sp, #112	@ 0x70
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e8:	2b22      	cmp	r3, #34	@ 0x22
 80054ea:	f040 80be 	bne.w	800566a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80054fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005506:	4013      	ands	r3, r2
 8005508:	b29a      	uxth	r2, r3
 800550a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800550c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 80a3 	bne.w	800567e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554c:	667b      	str	r3, [r7, #100]	@ 0x64
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005556:	657b      	str	r3, [r7, #84]	@ 0x54
 8005558:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800555c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	663b      	str	r3, [r7, #96]	@ 0x60
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800558a:	643a      	str	r2, [r7, #64]	@ 0x40
 800558c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a34      	ldr	r2, [pc, #208]	@ (8005688 <UART_RxISR_16BIT+0x1b8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01f      	beq.n	80055fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	d12e      	bne.n	8005662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60bb      	str	r3, [r7, #8]
   return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e6      	bne.n	800560a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b10      	cmp	r3, #16
 8005648:	d103      	bne.n	8005652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2210      	movs	r2, #16
 8005650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff f874 	bl	8004748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005660:	e00d      	b.n	800567e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb fa34 	bl	8000ad0 <HAL_UART_RxCpltCallback>
}
 8005668:	e009      	b.n	800567e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	8b1b      	ldrh	r3, [r3, #24]
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0208 	orr.w	r2, r2, #8
 800567a:	b292      	uxth	r2, r2
 800567c:	831a      	strh	r2, [r3, #24]
}
 800567e:	bf00      	nop
 8005680:	3770      	adds	r7, #112	@ 0x70
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40008000 	.word	0x40008000

0800568c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <memset>:
 80056a0:	4402      	add	r2, r0
 80056a2:	4603      	mov	r3, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	f803 1b01 	strb.w	r1, [r3], #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <__libc_init_array>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4d0d      	ldr	r5, [pc, #52]	@ (80056e8 <__libc_init_array+0x38>)
 80056b4:	4c0d      	ldr	r4, [pc, #52]	@ (80056ec <__libc_init_array+0x3c>)
 80056b6:	1b64      	subs	r4, r4, r5
 80056b8:	10a4      	asrs	r4, r4, #2
 80056ba:	2600      	movs	r6, #0
 80056bc:	42a6      	cmp	r6, r4
 80056be:	d109      	bne.n	80056d4 <__libc_init_array+0x24>
 80056c0:	4d0b      	ldr	r5, [pc, #44]	@ (80056f0 <__libc_init_array+0x40>)
 80056c2:	4c0c      	ldr	r4, [pc, #48]	@ (80056f4 <__libc_init_array+0x44>)
 80056c4:	f000 f818 	bl	80056f8 <_init>
 80056c8:	1b64      	subs	r4, r4, r5
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	2600      	movs	r6, #0
 80056ce:	42a6      	cmp	r6, r4
 80056d0:	d105      	bne.n	80056de <__libc_init_array+0x2e>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d8:	4798      	blx	r3
 80056da:	3601      	adds	r6, #1
 80056dc:	e7ee      	b.n	80056bc <__libc_init_array+0xc>
 80056de:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e2:	4798      	blx	r3
 80056e4:	3601      	adds	r6, #1
 80056e6:	e7f2      	b.n	80056ce <__libc_init_array+0x1e>
 80056e8:	08005760 	.word	0x08005760
 80056ec:	08005760 	.word	0x08005760
 80056f0:	08005760 	.word	0x08005760
 80056f4:	08005764 	.word	0x08005764

080056f8 <_init>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	bf00      	nop
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr

08005704 <_fini>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr
