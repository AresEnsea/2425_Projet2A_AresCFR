
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d20  08005d20  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d24  08005d24  00006d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d28  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000005c  08005d84  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005d84  00007510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116e0  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002496  00000000  00000000  0001876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2c  00000000  00000000  0001bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f1e  00000000  00000000  0001c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ccb  00000000  00000000  000436e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f25ac  00000000  00000000  000563ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  0014899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bb4 	.word	0x08005bb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005bb4 	.word	0x08005bb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b094      	sub	sp, #80	@ 0x50
 80004bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004be:	f000 fef5 	bl	80012ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c2:	f000 f8d1 	bl	8000668 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c6:	f000 fb47 	bl	8000b58 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004ca:	f000 fac3 	bl	8000a54 <MX_TIM2_Init>
	MX_LPUART1_UART_Init();
 80004ce:	f000 f91d 	bl	800070c <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 80004d2:	f000 fa07 	bl	80008e4 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80004d6:	f000 f9a5 	bl	8000824 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80004da:	f000 f9d3 	bl	8000884 <MX_USART3_UART_Init>
	MX_UART4_Init();
 80004de:	f000 f941 	bl	8000764 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80004e2:	f000 f96f 	bl	80007c4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004e6:	2108      	movs	r1, #8
 80004e8:	4855      	ldr	r0, [pc, #340]	@ (8000640 <main+0x188>)
 80004ea:	f002 fe85 	bl	80031f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004ee:	210c      	movs	r1, #12
 80004f0:	4853      	ldr	r0, [pc, #332]	@ (8000640 <main+0x188>)
 80004f2:	f002 fe81 	bl	80031f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA8
 80004f6:	2100      	movs	r1, #0
 80004f8:	4852      	ldr	r0, [pc, #328]	@ (8000644 <main+0x18c>)
 80004fa:	f002 fe7d 	bl	80031f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //PA9
 80004fe:	2104      	movs	r1, #4
 8000500:	4850      	ldr	r0, [pc, #320]	@ (8000644 <main+0x18c>)
 8000502:	f002 fe79 	bl	80031f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PA10
 8000506:	2108      	movs	r1, #8
 8000508:	484e      	ldr	r0, [pc, #312]	@ (8000644 <main+0x18c>)
 800050a:	f002 fe75 	bl	80031f8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 800050e:	221a      	movs	r2, #26
 8000510:	494d      	ldr	r1, [pc, #308]	@ (8000648 <main+0x190>)
 8000512:	484e      	ldr	r0, [pc, #312]	@ (800064c <main+0x194>)
 8000514:	f003 ff6e 	bl	80043f4 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		char console_data[28];
		memcpy(console_data, rx_data, 26);
 8000518:	4b4b      	ldr	r3, [pc, #300]	@ (8000648 <main+0x190>)
 800051a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000528:	c403      	stmia	r4!, {r0, r1}
 800052a:	8022      	strh	r2, [r4, #0]
		console_data[26] = '\r';
 800052c:	230d      	movs	r3, #13
 800052e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		console_data[27] = '\n';
 8000532:	230a      	movs	r3, #10
 8000534:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		HAL_UART_Transmit(&huart2, (uint8_t *)console_data, 28, HAL_MAX_DELAY);
 8000538:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	221c      	movs	r2, #28
 8000542:	4843      	ldr	r0, [pc, #268]	@ (8000650 <main+0x198>)
 8000544:	f003 fecc 	bl	80042e0 <HAL_UART_Transmit>


		// Pour le moteur Maxon droit
		char mot_maxon_dataD[5];
		strncpy(mot_maxon_dataD, (char *)&rx_data[1], 4);
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	2204      	movs	r2, #4
 800054e:	4941      	ldr	r1, [pc, #260]	@ (8000654 <main+0x19c>)
 8000550:	4618      	mov	r0, r3
 8000552:	f005 faf1 	bl	8005b38 <strncpy>
		mot_maxon_dataD[4] = '\0';
 8000556:	2300      	movs	r3, #0
 8000558:	f887 3020 	strb.w	r3, [r7, #32]
		int mot_maxon_valueD = atoi(mot_maxon_dataD);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4618      	mov	r0, r3
 8000562:	f005 fa59 	bl	8005a18 <atoi>
 8000566:	64f8      	str	r0, [r7, #76]	@ 0x4c
		// Limiter à la plage valide (0-1999)
		if (mot_maxon_valueD < 0) mot_maxon_valueD = 0;
 8000568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800056a:	2b00      	cmp	r3, #0
 800056c:	da01      	bge.n	8000572 <main+0xba>
 800056e:	2300      	movs	r3, #0
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (mot_maxon_valueD > 1999) mot_maxon_valueD = 1999;
 8000572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000574:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000578:	db02      	blt.n	8000580 <main+0xc8>
 800057a:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		int inv_d = rx_data[0] - '0';
 8000580:	4b31      	ldr	r3, [pc, #196]	@ (8000648 <main+0x190>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3b30      	subs	r3, #48	@ 0x30
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (inv_d != 0 && inv_d != 1) inv_d = 0;  // Validation de la direction
 8000588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800058a:	2b00      	cmp	r3, #0
 800058c:	d004      	beq.n	8000598 <main+0xe0>
 800058e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000590:	2b01      	cmp	r3, #1
 8000592:	d001      	beq.n	8000598 <main+0xe0>
 8000594:	2300      	movs	r3, #0
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
		mot_maxonD(mot_maxon_valueD, inv_d);
 8000598:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800059a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800059c:	f000 fb76 	bl	8000c8c <mot_maxonD>

		// Pour le moteur Maxon gauche
		char mot_maxon_dataG[5];
		strncpy(mot_maxon_dataG, (char *)&rx_data[6], 4);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2204      	movs	r2, #4
 80005a6:	492c      	ldr	r1, [pc, #176]	@ (8000658 <main+0x1a0>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 fac5 	bl	8005b38 <strncpy>
		mot_maxon_dataG[4] = '\0';
 80005ae:	2300      	movs	r3, #0
 80005b0:	763b      	strb	r3, [r7, #24]
		int mot_maxon_valueG = atoi(mot_maxon_dataG);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fa2e 	bl	8005a18 <atoi>
 80005bc:	6478      	str	r0, [r7, #68]	@ 0x44
		// Limiter à la plage valide (0-1999)
		if (mot_maxon_valueG < 0) mot_maxon_valueG = 0;
 80005be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da01      	bge.n	80005c8 <main+0x110>
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
		if (mot_maxon_valueG > 1999) mot_maxon_valueG = 1999;
 80005c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005ce:	db02      	blt.n	80005d6 <main+0x11e>
 80005d0:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
		int inv_g = rx_data[5] - '0';
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <main+0x190>)
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	3b30      	subs	r3, #48	@ 0x30
 80005dc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (inv_g != 0 && inv_g != 1) inv_g = 0;  // Validation de la direction
 80005de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d004      	beq.n	80005ee <main+0x136>
 80005e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d001      	beq.n	80005ee <main+0x136>
 80005ea:	2300      	movs	r3, #0
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
		mot_maxonG(mot_maxon_valueG, inv_g);
 80005ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80005f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80005f2:	f000 fb7b 	bl	8000cec <mot_maxonG>

		// Pour les servos (12 octets : rx_data[10] à rx_data[21])
		char servo_goal_data[12];
		memcpy(servo_goal_data, (char *)&rx_data[10], 12);
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <main+0x190>)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	320a      	adds	r2, #10
 80005fe:	6810      	ldr	r0, [r2, #0]
 8000600:	6851      	ldr	r1, [r2, #4]
 8000602:	6892      	ldr	r2, [r2, #8]
 8000604:	c307      	stmia	r3!, {r0, r1, r2}
		HAL_UART_Transmit(&huart4, (uint8_t *)servo_goal_data, 12, HAL_MAX_DELAY);
 8000606:	f107 0108 	add.w	r1, r7, #8
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	220c      	movs	r2, #12
 8000610:	4812      	ldr	r0, [pc, #72]	@ (800065c <main+0x1a4>)
 8000612:	f003 fe65 	bl	80042e0 <HAL_UART_Transmit>


		// Steppers (rx_data[22] à rx_data[25]) - Scindé en deux UARTs
		// Première partie (PCB 1) via huart3 : rx_data[22] et rx_data[23]
		char stepper_data1[2];
		memcpy(stepper_data1, (char *)&rx_data[22], 2);
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <main+0x190>)
 8000618:	8adb      	ldrh	r3, [r3, #22]
 800061a:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)stepper_data1, 2, HAL_MAX_DELAY);
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2202      	movs	r2, #2
 8000624:	480e      	ldr	r0, [pc, #56]	@ (8000660 <main+0x1a8>)
 8000626:	f003 fe5b 	bl	80042e0 <HAL_UART_Transmit>

		// Deuxième partie (PCB 2) via huart1 : rx_data[24] et rx_data[25]
		char stepper_data2[2];
		memcpy(stepper_data2, (char *)&rx_data[24], 2);
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <main+0x190>)
 800062c:	8b1b      	ldrh	r3, [r3, #24]
 800062e:	803b      	strh	r3, [r7, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)stepper_data2, 2, HAL_MAX_DELAY);
 8000630:	4639      	mov	r1, r7
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2202      	movs	r2, #2
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <main+0x1ac>)
 800063a:	f003 fe51 	bl	80042e0 <HAL_UART_Transmit>
	{
 800063e:	e76b      	b.n	8000518 <main+0x60>
 8000640:	2000036c 	.word	0x2000036c
 8000644:	20000320 	.word	0x20000320
 8000648:	200003b8 	.word	0x200003b8
 800064c:	20000078 	.word	0x20000078
 8000650:	20000210 	.word	0x20000210
 8000654:	200003b9 	.word	0x200003b9
 8000658:	200003be 	.word	0x200003be
 800065c:	20000100 	.word	0x20000100
 8000660:	20000298 	.word	0x20000298
 8000664:	20000188 	.word	0x20000188

08000668 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	@ 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fa56 	bl	8005b28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f001 f9e9 	bl	8001a64 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000698:	f000 faf2 	bl	8000c80 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fa20 	bl	8001b10 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x72>
	{
		Error_Handler();
 80006d6:	f000 fad3 	bl	8000c80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fde7 	bl	80022c8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000700:	f000 fabe 	bl	8000c80 <Error_Handler>
	}
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	@ 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_LPUART1_UART_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800074a:	f003 fd7b 	bl	8004244 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_LPUART1_UART_Init+0x4c>
	{
		Error_Handler();
 8000754:	f000 fa94 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000078 	.word	0x20000078
 8000760:	40008000 	.word	0x40008000

08000764 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_UART4_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_UART4_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_UART4_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_UART4_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_UART4_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_UART4_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_UART4_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_UART4_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_UART4_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_UART4_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_UART4_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_UART4_Init+0x58>)
 80007a8:	f003 fd4c 	bl	8004244 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_UART4_Init+0x52>
	{
		Error_Handler();
 80007b2:	f000 fa65 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000100 	.word	0x20000100
 80007c0:	40004c00 	.word	0x40004c00

080007c4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_USART1_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART1_UART_Init+0x58>)
 8000808:	f003 fd1c 	bl	8004244 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000812:	f000 fa35 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000188 	.word	0x20000188
 8000820:	40013800 	.word	0x40013800

08000824 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f003 fcec 	bl	8004244 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000872:	f000 fa05 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000210 	.word	0x20000210
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f003 fcbc 	bl	8004244 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80008d2:	f000 f9d5 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000298 	.word	0x20000298
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09a      	sub	sp, #104	@ 0x68
 80008e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000904:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	222c      	movs	r2, #44	@ 0x2c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 f902 	bl	8005b28 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000924:	4b49      	ldr	r3, [pc, #292]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000926:	4a4a      	ldr	r2, [pc, #296]	@ (8000a50 <MX_TIM1_Init+0x16c>)
 8000928:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80-1;
 800092a:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <MX_TIM1_Init+0x168>)
 800092c:	224f      	movs	r2, #79	@ 0x4f
 800092e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000-1;
 8000936:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000938:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800093c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <MX_TIM1_Init+0x168>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000950:	483e      	ldr	r0, [pc, #248]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000952:	f002 fb99 	bl	8003088 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 800095c:	f000 f990 	bl	8000c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000966:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800096a:	4619      	mov	r1, r3
 800096c:	4837      	ldr	r0, [pc, #220]	@ (8000a4c <MX_TIM1_Init+0x168>)
 800096e:	f002 fe5d 	bl	800362c <HAL_TIM_ConfigClockSource>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000978:	f000 f982 	bl	8000c80 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800097c:	4833      	ldr	r0, [pc, #204]	@ (8000a4c <MX_TIM1_Init+0x168>)
 800097e:	f002 fbda 	bl	8003136 <HAL_TIM_PWM_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000988:	f000 f97a 	bl	8000c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000998:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800099c:	4619      	mov	r1, r3
 800099e:	482b      	ldr	r0, [pc, #172]	@ (8000a4c <MX_TIM1_Init+0x168>)
 80009a0:	f003 fb4a 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80009aa:	f000 f969 	bl	8000c80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	@ 0x60
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009ce:	2204      	movs	r2, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_TIM1_Init+0x168>)
 80009d4:	f002 fd16 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 80009de:	f000 f94f 	bl	8000c80 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e6:	2208      	movs	r2, #8
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <MX_TIM1_Init+0x168>)
 80009ec:	f002 fd0a 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 80009f6:	f000 f943 	bl	8000c80 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a12:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000a30:	f003 fb8a 	bl	8004148 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x15a>
	{
		Error_Handler();
 8000a3a:	f000 f921 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a3e:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <MX_TIM1_Init+0x168>)
 8000a40:	f000 fb58 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3768      	adds	r7, #104	@ 0x68
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000320 	.word	0x20000320
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	@ 0x38
 8000a58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a86:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000a90:	224f      	movs	r2, #79	@ 0x4f
 8000a92:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000a9c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000aa0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aae:	4829      	ldr	r0, [pc, #164]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000ab0:	f002 faea 	bl	8003088 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000aba:	f000 f8e1 	bl	8000c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4822      	ldr	r0, [pc, #136]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000acc:	f002 fdae 	bl	800362c <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000ad6:	f000 f8d3 	bl	8000c80 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ada:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000adc:	f002 fb2b 	bl	8003136 <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000ae6:	f000 f8cb 	bl	8000c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4816      	ldr	r0, [pc, #88]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000afa:	f003 fa9d 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000b04:	f000 f8bc 	bl	8000c80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b08:	2360      	movs	r3, #96	@ 0x60
 8000b0a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000b20:	f002 fc70 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8000b2a:	f000 f8a9 	bl	8000c80 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	220c      	movs	r2, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000b36:	f002 fc65 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 8000b40:	f000 f89e 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <MX_TIM2_Init+0x100>)
 8000b46:	f000 fad5 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000b4a:	bf00      	nop
 8000b4c:	3738      	adds	r7, #56	@ 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000036c 	.word	0x2000036c

08000b58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4a35      	ldr	r2, [pc, #212]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4a29      	ldr	r2, [pc, #164]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_GPIO_Init+0xf0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f000 ff1f 	bl	8001a18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000be0:	481a      	ldr	r0, [pc, #104]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000be2:	f000 ff19 	bl	8001a18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <MX_GPIO_Init+0xf8>)
 8000bfe:	f000 fd61 	bl	80016c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c02:	2320      	movs	r3, #32
 8000c04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f000 fd52 	bl	80016c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000c20:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000c24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000c3a:	f000 fd43 	bl	80016c4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800

08000c54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <HAL_UART_RxCpltCallback+0x24>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d104      	bne.n	8000c6e <HAL_UART_RxCpltCallback+0x1a>
		// Réactiver la réception immédiatement
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000c64:	221a      	movs	r2, #26
 8000c66:	4905      	ldr	r1, [pc, #20]	@ (8000c7c <HAL_UART_RxCpltCallback+0x28>)
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <HAL_UART_RxCpltCallback+0x24>)
 8000c6a:	f003 fbc3 	bl	80043f4 <HAL_UART_Receive_IT>
	}
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000078 	.word	0x20000078
 8000c7c:	200003b8 	.word	0x200003b8

08000c80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <mot_maxonD>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxonD(int result, int inv) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10f      	bne.n	8000cbc <mot_maxonD+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);    // Direction avant
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4810      	ldr	r0, [pc, #64]	@ (8000ce4 <mot_maxonD+0x58>)
 8000ca2:	f000 feb9 	bl	8001a18 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <mot_maxonD+0x58>)
 8000cae:	f000 feb3 	bl	8001a18 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <mot_maxonD+0x5c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
    }
}
 8000cba:	e00e      	b.n	8000cda <mot_maxonD+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <mot_maxonD+0x58>)
 8000cc2:	f000 fea9 	bl	8001a18 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <mot_maxonD+0x58>)
 8000cce:	f000 fea3 	bl	8001a18 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <mot_maxonD+0x5c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	2000036c 	.word	0x2000036c

08000cec <mot_maxonG>:

void mot_maxonG(int result, int inv) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d10f      	bne.n	8000d1c <mot_maxonG+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);    // Direction avant
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <mot_maxonG+0x58>)
 8000d02:	f000 fe89 	bl	8001a18 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0c:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <mot_maxonG+0x58>)
 8000d0e:	f000 fe83 	bl	8001a18 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <mot_maxonG+0x5c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
    }
}
 8000d1a:	e00e      	b.n	8000d3a <mot_maxonG+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2120      	movs	r1, #32
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <mot_maxonG+0x58>)
 8000d22:	f000 fe79 	bl	8001a18 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <mot_maxonG+0x58>)
 8000d2e:	f000 fe73 	bl	8001a18 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <mot_maxonG+0x5c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48000400 	.word	0x48000400
 8000d48:	2000036c 	.word	0x2000036c

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b4      	sub	sp, #208	@ 0xd0
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000db0:	2288      	movs	r2, #136	@ 0x88
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 feb7 	bl	8005b28 <memset>
  if(huart->Instance==LPUART1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4aac      	ldr	r2, [pc, #688]	@ (8001070 <HAL_UART_MspInit+0x2dc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d144      	bne.n	8000e4e <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fc9c 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dde:	f7ff ff4f 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000de2:	4ba4      	ldr	r3, [pc, #656]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de6:	4aa3      	ldr	r2, [pc, #652]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000dee:	4ba1      	ldr	r3, [pc, #644]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b9e      	ldr	r3, [pc, #632]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	4a9d      	ldr	r2, [pc, #628]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e06:	4b9b      	ldr	r3, [pc, #620]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000e34:	4619      	mov	r1, r3
 8000e36:	4890      	ldr	r0, [pc, #576]	@ (8001078 <HAL_UART_MspInit+0x2e4>)
 8000e38:	f000 fc44 	bl	80016c4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2046      	movs	r0, #70	@ 0x46
 8000e42:	f000 fb8a 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e46:	2046      	movs	r0, #70	@ 0x46
 8000e48:	f000 fba3 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4c:	e10c      	b.n	8001068 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==UART4)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a8a      	ldr	r2, [pc, #552]	@ (800107c <HAL_UART_MspInit+0x2e8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d144      	bne.n	8000ee2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fc53 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000e70:	f7ff ff06 	bl	8000c80 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e74:	4b7f      	ldr	r3, [pc, #508]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e78:	4a7e      	ldr	r2, [pc, #504]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e80:	4b7c      	ldr	r3, [pc, #496]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b79      	ldr	r3, [pc, #484]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	4a78      	ldr	r2, [pc, #480]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e98:	4b76      	ldr	r3, [pc, #472]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ecc:	f000 fbfa 	bl	80016c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2034      	movs	r0, #52	@ 0x34
 8000ed6:	f000 fb40 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eda:	2034      	movs	r0, #52	@ 0x34
 8000edc:	f000 fb59 	bl	8001592 <HAL_NVIC_EnableIRQ>
}
 8000ee0:	e0c2      	b.n	8001068 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	@ (8001080 <HAL_UART_MspInit+0x2ec>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13b      	bne.n	8000f64 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fc09 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8000f04:	f7ff febc 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f08:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0c:	4a59      	ldr	r2, [pc, #356]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f14:	4b57      	ldr	r3, [pc, #348]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a53      	ldr	r2, [pc, #332]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2c:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f38:	23c0      	movs	r3, #192	@ 0xc0
 8000f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f50:	2307      	movs	r3, #7
 8000f52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4849      	ldr	r0, [pc, #292]	@ (8001084 <HAL_UART_MspInit+0x2f0>)
 8000f5e:	f000 fbb1 	bl	80016c4 <HAL_GPIO_Init>
}
 8000f62:	e081      	b.n	8001068 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a47      	ldr	r2, [pc, #284]	@ (8001088 <HAL_UART_MspInit+0x2f4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d13c      	bne.n	8000fe8 <HAL_UART_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fbc8 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8000f86:	f7ff fe7b 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	4a39      	ldr	r2, [pc, #228]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f96:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a33      	ldr	r2, [pc, #204]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f000 fb6f 	bl	80016c4 <HAL_GPIO_Init>
}
 8000fe6:	e03f      	b.n	8001068 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a27      	ldr	r2, [pc, #156]	@ (800108c <HAL_UART_MspInit+0x2f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d13a      	bne.n	8001068 <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fb86 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x27a>
      Error_Handler();
 800100a:	f7ff fe39 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6593      	str	r3, [r2, #88]	@ 0x58
 800101a:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_UART_MspInit+0x2e0>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800103e:	2330      	movs	r3, #48	@ 0x30
 8001040:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001056:	2307      	movs	r3, #7
 8001058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <HAL_UART_MspInit+0x2e4>)
 8001064:	f000 fb2e 	bl	80016c4 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	37d0      	adds	r7, #208	@ 0xd0
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40008000 	.word	0x40008000
 8001074:	40021000 	.word	0x40021000
 8001078:	48000800 	.word	0x48000800
 800107c:	40004c00 	.word	0x40004c00
 8001080:	40013800 	.word	0x40013800
 8001084:	48000400 	.word	0x48000400
 8001088:	40004400 	.word	0x40004400
 800108c:	40004800 	.word	0x40004800

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ba:	e010      	b.n	80010de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <HAL_TIM_MspPostInit+0xac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d11e      	bne.n	8001154 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800112e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114e:	f000 fab9 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001152:	e021      	b.n	8001198 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800115c:	d11c      	bne.n	8001198 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_TIM_MspPostInit+0xb0>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001176:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_TIM_MspPostInit+0xb4>)
 8001194:	f000 fa96 	bl	80016c4 <HAL_GPIO_Init>
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001202:	f000 f8af 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <UART4_IRQHandler+0x10>)
 8001212:	f003 f93b 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000100 	.word	0x20000100

08001220 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <LPUART1_IRQHandler+0x10>)
 8001226:	f003 f931 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000078 	.word	0x20000078

08001234 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800125c:	f7ff ffea 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f004 fc71 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128a:	f7ff f915 	bl	80004b8 <main>

0800128e <LoopForever>:

LoopForever:
    b LoopForever
 800128e:	e7fe      	b.n	800128e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001290:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800129c:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 80012a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012a4:	20000510 	.word	0x20000510

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>
	...

080012ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_Init+0x3c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_Init+0x3c>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c2:	2003      	movs	r0, #3
 80012c4:	f000 f93e 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f80f 	bl	80012ec <HAL_InitTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	e001      	b.n	80012de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012da:	f7ff fd37 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012de:	79fb      	ldrb	r3, [r7, #7]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_InitTick+0x6c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d023      	beq.n	8001348 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <HAL_InitTick+0x70>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_InitTick+0x6c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f949 	bl	80015ae <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d809      	bhi.n	800133c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f913 	bl	800155a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <HAL_InitTick+0x74>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e007      	b.n	800134c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e004      	b.n	800134c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e001      	b.n	800134c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008
 800135c:	20000000 	.word	0x20000000
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	200003d4 	.word	0x200003d4

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200003d4 	.word	0x200003d4

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	@ (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	@ (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	@ (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	@ 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	@ 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d008      	beq.n	80015f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2204      	movs	r2, #4
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e022      	b.n	8001636 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020e 	bic.w	r2, r2, #14
 80015fe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	f003 021c 	and.w	r2, r3, #28
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d005      	beq.n	8001666 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e029      	b.n	80016ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f003 021c 	and.w	r2, r3, #28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    }
  }
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e17f      	b.n	80019d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8171 	beq.w	80019ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d118      	bne.n	80017a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001778:	2201      	movs	r2, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	f003 0201 	and.w	r2, r3, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d017      	beq.n	80017e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d123      	bne.n	8001834 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	6939      	ldr	r1, [r7, #16]
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80ac 	beq.w	80019ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b5f      	ldr	r3, [pc, #380]	@ (80019f4 <HAL_GPIO_Init+0x330>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	4a5e      	ldr	r2, [pc, #376]	@ (80019f4 <HAL_GPIO_Init+0x330>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6613      	str	r3, [r2, #96]	@ 0x60
 8001882:	4b5c      	ldr	r3, [pc, #368]	@ (80019f4 <HAL_GPIO_Init+0x330>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188e:	4a5a      	ldr	r2, [pc, #360]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x242>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4f      	ldr	r2, [pc, #316]	@ (80019fc <HAL_GPIO_Init+0x338>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x23e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a00 <HAL_GPIO_Init+0x33c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x23a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <HAL_GPIO_Init+0x340>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x236>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a08 <HAL_GPIO_Init+0x344>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x232>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a0c <HAL_GPIO_Init+0x348>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x22e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001a10 <HAL_GPIO_Init+0x34c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x22a>
 80018ea:	2306      	movs	r3, #6
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x244>
 80018ee:	2307      	movs	r3, #7
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x244>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x244>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x244>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x244>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x244>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x244>
 8001906:	2300      	movs	r3, #0
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001918:	4937      	ldr	r1, [pc, #220]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001926:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800194a:	4a32      	ldr	r2, [pc, #200]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001950:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001974:	4a27      	ldr	r2, [pc, #156]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800199e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <HAL_GPIO_Init+0x350>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae78 	bne.w	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	48001000 	.word	0x48001000
 8001a0c:	48001400 	.word	0x48001400
 8001a10:	48001800 	.word	0x48001800
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a72:	d130      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a80:	d038      	beq.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2232      	movs	r2, #50	@ 0x32
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa8:	e002      	b.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001abc:	d102      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f2      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad0:	d110      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e00f      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae2:	d007      	beq.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aec:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40007000 	.word	0x40007000
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3ca      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b97      	ldr	r3, [pc, #604]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b94      	ldr	r3, [pc, #592]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e4 	beq.w	8001d0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4a>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	f040 808b 	bne.w	8001c68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f040 8087 	bne.w	8001c68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b5a:	4b89      	ldr	r3, [pc, #548]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x62>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e3a2      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4b82      	ldr	r3, [pc, #520]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_RCC_OscConfig+0x7c>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b8a:	e005      	b.n	8001b98 <HAL_RCC_OscConfig+0x88>
 8001b8c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d223      	bcs.n	8001be4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fd55 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e383      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb0:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a72      	ldr	r2, [pc, #456]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b70      	ldr	r3, [pc, #448]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	496d      	ldr	r1, [pc, #436]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bce:	4b6c      	ldr	r3, [pc, #432]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4968      	ldr	r1, [pc, #416]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e025      	b.n	8001c30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be4:	4b66      	ldr	r3, [pc, #408]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4960      	ldr	r1, [pc, #384]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c02:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	495b      	ldr	r1, [pc, #364]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fd15 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e343      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c30:	f000 fc4a 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	4950      	ldr	r1, [pc, #320]	@ (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d88 <HAL_RCC_OscConfig+0x278>)
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c50:	4b4e      	ldr	r3, [pc, #312]	@ (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb49 	bl	80012ec <HAL_InitTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d052      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	e327      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d032      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a42      	ldr	r2, [pc, #264]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb86 	bl	800138c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c84:	f7ff fb82 	bl	800138c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e310      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c96:	4b3a      	ldr	r3, [pc, #232]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a36      	ldr	r2, [pc, #216]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4931      	ldr	r1, [pc, #196]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	492c      	ldr	r1, [pc, #176]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e01a      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fb53 	bl	800138c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cea:	f7ff fb4f 	bl	800138c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e2dd      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x1da>
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d074      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x21a>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d10e      	bne.n	8001d42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d064      	beq.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d160      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e2ba      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x24a>
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e026      	b.n	8001da8 <HAL_RCC_OscConfig+0x298>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_OscConfig+0x280>
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a02      	ldr	r2, [pc, #8]	@ (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e014      	b.n	8001da8 <HAL_RCC_OscConfig+0x298>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08005bcc 	.word	0x08005bcc
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	4ba0      	ldr	r3, [pc, #640]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a9f      	ldr	r2, [pc, #636]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a9c      	ldr	r2, [pc, #624]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff faec 	bl	800138c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fae8 	bl	800138c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e276      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	4b92      	ldr	r3, [pc, #584]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x2a8>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fad8 	bl	800138c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fad4 	bl	800138c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e262      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df2:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2d0>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d060      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x310>
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d116      	bne.n	8001e4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	4b7c      	ldr	r3, [pc, #496]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x328>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e23f      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b76      	ldr	r3, [pc, #472]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	4973      	ldr	r1, [pc, #460]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	e040      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d023      	beq.n	8001e9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e56:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff fa93 	bl	800138c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fa8f 	bl	800138c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e21d      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b62      	ldr	r3, [pc, #392]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	495f      	ldr	r1, [pc, #380]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e018      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fa6f 	bl	800138c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fa6b 	bl	800138c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1f9      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec4:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eea:	4a4a      	ldr	r2, [pc, #296]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa4a 	bl	800138c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fa46 	bl	800138c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1d4      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x3ec>
 8001f1c:	e01b      	b.n	8001f56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f24:	4a3b      	ldr	r2, [pc, #236]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fa2d 	bl	800138c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff fa29 	bl	800138c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1b7      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ef      	bne.n	8001f36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a6 	beq.w	80020b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4a26      	ldr	r2, [pc, #152]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <HAL_RCC_OscConfig+0x508>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d118      	bne.n	8001fce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <HAL_RCC_OscConfig+0x508>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <HAL_RCC_OscConfig+0x508>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f9f0 	bl	800138c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7ff f9ec 	bl	800138c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e17a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_RCC_OscConfig+0x508>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4d8>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fe6:	e029      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d115      	bne.n	800201c <HAL_RCC_OscConfig+0x50c>
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <HAL_RCC_OscConfig+0x504>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	4b9c      	ldr	r3, [pc, #624]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a9b      	ldr	r2, [pc, #620]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800202c:	4b98      	ldr	r3, [pc, #608]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a97      	ldr	r2, [pc, #604]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d016      	beq.n	8002072 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f9a2 	bl	800138c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff f99e 	bl	800138c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e12a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b8b      	ldr	r3, [pc, #556]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ed      	beq.n	800204c <HAL_RCC_OscConfig+0x53c>
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f98b 	bl	800138c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff f987 	bl	800138c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e113      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	4b7f      	ldr	r3, [pc, #508]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ed      	bne.n	800207a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	4a79      	ldr	r2, [pc, #484]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80fe 	beq.w	80022b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f040 80d0 	bne.w	8002264 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020c4:	4b72      	ldr	r3, [pc, #456]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d130      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	3b01      	subs	r3, #1
 80020e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d127      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11f      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002104:	2a07      	cmp	r2, #7
 8002106:	bf14      	ite	ne
 8002108:	2201      	movne	r2, #1
 800210a:	2200      	moveq	r2, #0
 800210c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d109      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d06e      	beq.n	8002218 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d069      	beq.n	8002214 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002140:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800214c:	4b50      	ldr	r3, [pc, #320]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0ad      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800215c:	4b4c      	ldr	r3, [pc, #304]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4b      	ldr	r2, [pc, #300]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f910 	bl	800138c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f90c 	bl	800138c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e09a      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002182:	4b43      	ldr	r3, [pc, #268]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218e:	4b40      	ldr	r3, [pc, #256]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <HAL_RCC_OscConfig+0x784>)
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800219e:	3a01      	subs	r2, #1
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021a8:	0212      	lsls	r2, r2, #8
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021b0:	0852      	lsrs	r2, r2, #1
 80021b2:	3a01      	subs	r2, #1
 80021b4:	0552      	lsls	r2, r2, #21
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021bc:	0852      	lsrs	r2, r2, #1
 80021be:	3a01      	subs	r2, #1
 80021c0:	0652      	lsls	r2, r2, #25
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021c8:	0912      	lsrs	r2, r2, #4
 80021ca:	0452      	lsls	r2, r2, #17
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4930      	ldr	r1, [pc, #192]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ec:	f7ff f8ce 	bl	800138c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f8ca 	bl	800138c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e058      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002212:	e050      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e04f      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d148      	bne.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223c:	f7ff f8a6 	bl	800138c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f8a2 	bl	800138c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e030      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x734>
 8002262:	e028      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d023      	beq.n	80022b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_RCC_OscConfig+0x780>)
 8002270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff f889 	bl	800138c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	e00c      	b.n	8002298 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f885 	bl	800138c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d905      	bls.n	8002298 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
 8002290:	40021000 	.word	0x40021000
 8002294:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ec      	bne.n	800227e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4905      	ldr	r1, [pc, #20]	@ (80022c0 <HAL_RCC_OscConfig+0x7b0>)
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCC_OscConfig+0x7b4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
 80022b0:	e001      	b.n	80022b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	feeefffc 	.word	0xfeeefffc

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0e7      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d910      	bls.n	800230c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b72      	ldr	r3, [pc, #456]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4970      	ldr	r1, [pc, #448]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b6e      	ldr	r3, [pc, #440]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cf      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4960      	ldr	r1, [pc, #384]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d04c      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b5a      	ldr	r3, [pc, #360]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d121      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0a6      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	4b54      	ldr	r3, [pc, #336]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e09a      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b4e      	ldr	r3, [pc, #312]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e08e      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238e:	4b4a      	ldr	r3, [pc, #296]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e086      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b46      	ldr	r3, [pc, #280]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4943      	ldr	r1, [pc, #268]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe ffec 	bl	800138c <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe ffe8 	bl	800138c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e06e      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b3a      	ldr	r3, [pc, #232]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d208      	bcs.n	800240e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	492b      	ldr	r1, [pc, #172]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240e:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d210      	bcs.n	800243e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	4923      	ldr	r1, [pc, #140]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCC_ClockConfig+0x1ec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e036      	b.n	80024ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244a:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4918      	ldr	r1, [pc, #96]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4910      	ldr	r1, [pc, #64]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247c:	f000 f824 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	490b      	ldr	r1, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x1f4>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1fc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe ff23 	bl	80012ec <HAL_InitTick>
 80024a6:	4603      	mov	r3, r0
 80024a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024aa:	7afb      	ldrb	r3, [r7, #11]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08005bcc 	.word	0x08005bcc
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d121      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d11e      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002518:	4b2d      	ldr	r3, [pc, #180]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002524:	4a2b      	ldr	r2, [pc, #172]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d102      	bne.n	8002546 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e004      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d101      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800254c:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x114>)
 800254e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d134      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0xa6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0xac>
 800256c:	e005      	b.n	800257a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002570:	617b      	str	r3, [r7, #20]
      break;
 8002572:	e005      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002576:	617b      	str	r3, [r7, #20]
      break;
 8002578:	e002      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	617b      	str	r3, [r7, #20]
      break;
 800257e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	0e5b      	lsrs	r3, r3, #25
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	3301      	adds	r3, #1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025c0:	69bb      	ldr	r3, [r7, #24]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	@ 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08005be4 	.word	0x08005be4
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4904      	ldr	r1, [pc, #16]	@ (8002620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	08005bdc 	.word	0x08005bdc

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002628:	f7ff ffda 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0adb      	lsrs	r3, r3, #11
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x28>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08005bdc 	.word	0x08005bdc

08002650 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002668:	f7ff f9ee 	bl	8001a48 <HAL_PWREx_GetVoltageRange>
 800266c:	6178      	str	r0, [r7, #20]
 800266e:	e014      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	@ 0x58
 800267c:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f9de 	bl	8001a48 <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a0:	d10b      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	@ 0x80
 80026a6:	d919      	bls.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80026ac:	d902      	bls.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ae:	2302      	movs	r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e013      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e010      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b80      	cmp	r3, #128	@ 0x80
 80026be:	d902      	bls.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026c0:	2303      	movs	r3, #3
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e00a      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d102      	bne.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026cc:	2302      	movs	r3, #2
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e004      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b70      	cmp	r3, #112	@ 0x70
 80026d6:	d101      	bne.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 0207 	bic.w	r2, r3, #7
 80026e4:	4909      	ldr	r1, [pc, #36]	@ (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026ec:	4b07      	ldr	r3, [pc, #28]	@ (800270c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	40022000 	.word	0x40022000

08002710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002718:	2300      	movs	r3, #0
 800271a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800271c:	2300      	movs	r3, #0
 800271e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002728:	2b00      	cmp	r3, #0
 800272a:	d041      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002730:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002734:	d02a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002736:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800273a:	d824      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800273c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002746:	d81e      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002750:	d010      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002752:	e018      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002754:	4b86      	ldr	r3, [pc, #536]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a85      	ldr	r2, [pc, #532]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002760:	e015      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fabb 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3320      	adds	r3, #32
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fba6 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	74fb      	strb	r3, [r7, #19]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002794:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a2:	4973      	ldr	r1, [pc, #460]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027aa:	e001      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d041      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027c4:	d02a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027ca:	d824      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027d6:	d81e      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e0:	d010      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027e2:	e018      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027e4:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a61      	ldr	r2, [pc, #388]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f0:	e015      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa73 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3320      	adds	r3, #32
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fb5e 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	74fb      	strb	r3, [r7, #19]
      break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800281c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002824:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002832:	494f      	ldr	r1, [pc, #316]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800283a:	e001      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a0 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	4a40      	ldr	r2, [pc, #256]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
 8002874:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3a      	ldr	r2, [pc, #232]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fd7c 	bl	800138c <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fd78 	bl	800138c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	74fb      	strb	r3, [r7, #19]
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028be:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01f      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d019      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e8:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	4a20      	ldr	r2, [pc, #128]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fd37 	bl	800138c <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002920:	e00b      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fd33 	bl	800138c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d902      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	74fb      	strb	r3, [r7, #19]
            break;
 8002938:	e006      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ec      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295e:	4904      	ldr	r1, [pc, #16]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002966:	e009      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	7c7b      	ldrb	r3, [r7, #17]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b9e      	ldr	r3, [pc, #632]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	4a9d      	ldr	r2, [pc, #628]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299a:	4b98      	ldr	r3, [pc, #608]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f023 0203 	bic.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	4994      	ldr	r1, [pc, #592]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029bc:	4b8f      	ldr	r3, [pc, #572]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 020c 	bic.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ca:	498c      	ldr	r1, [pc, #560]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029de:	4b87      	ldr	r3, [pc, #540]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4983      	ldr	r1, [pc, #524]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a00:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	497b      	ldr	r1, [pc, #492]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a22:	4b76      	ldr	r3, [pc, #472]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a30:	4972      	ldr	r1, [pc, #456]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a44:	4b6d      	ldr	r3, [pc, #436]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	496a      	ldr	r1, [pc, #424]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	4961      	ldr	r1, [pc, #388]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a88:	4b5c      	ldr	r3, [pc, #368]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	4959      	ldr	r1, [pc, #356]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aaa:	4b54      	ldr	r3, [pc, #336]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	4950      	ldr	r1, [pc, #320]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002acc:	4b4b      	ldr	r3, [pc, #300]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	4948      	ldr	r1, [pc, #288]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aee:	4b43      	ldr	r3, [pc, #268]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	493f      	ldr	r1, [pc, #252]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d028      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b10:	4b3a      	ldr	r3, [pc, #232]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b1e:	4937      	ldr	r1, [pc, #220]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
 8002b3c:	e011      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f8c8 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b6e:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	491f      	ldr	r1, [pc, #124]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b98:	60d3      	str	r3, [r2, #12]
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f899 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bda:	4908      	ldr	r1, [pc, #32]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bea:	d109      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a02      	ldr	r2, [pc, #8]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e014      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f867 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02f      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c3e:	4928      	ldr	r1, [pc, #160]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2102      	movs	r1, #2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f844 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	74bb      	strb	r3, [r7, #18]
 8002c6a:	e011      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3320      	adds	r3, #32
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f925 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002caa:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cce:	4904      	ldr	r1, [pc, #16]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf2:	4b75      	ldr	r3, [pc, #468]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cfe:	4b72      	ldr	r3, [pc, #456]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10d      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
       ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d16:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
       ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d047      	beq.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e044      	b.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d018      	beq.n	8002d6a <RCCEx_PLLSAI1_Config+0x86>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d825      	bhi.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x62>
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d009      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0x74>
 8002d44:	e020      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d46:	4b60      	ldr	r3, [pc, #384]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e01a      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d58:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e013      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d6a:	4b57      	ldr	r3, [pc, #348]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d76:	4b54      	ldr	r3, [pc, #336]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d86:	e006      	b.n	8002d96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e004      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	430b      	orrs	r3, r1
 8002db4:	4944      	ldr	r1, [pc, #272]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d17d      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dc0:	4b41      	ldr	r3, [pc, #260]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a40      	ldr	r2, [pc, #256]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fade 	bl	800138c <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd2:	e009      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd4:	f7fe fada 	bl	800138c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73fb      	strb	r3, [r7, #15]
        break;
 8002de6:	e005      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002de8:	4b37      	ldr	r3, [pc, #220]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ef      	bne.n	8002dd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d160      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e00:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	0912      	lsrs	r2, r2, #4
 8002e18:	0452      	lsls	r2, r2, #17
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	492a      	ldr	r1, [pc, #168]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]
 8002e22:	e027      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d112      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e2a:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	0211      	lsls	r1, r2, #8
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6912      	ldr	r2, [r2, #16]
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	3a01      	subs	r2, #1
 8002e44:	0552      	lsls	r2, r2, #21
 8002e46:	430a      	orrs	r2, r1
 8002e48:	491f      	ldr	r1, [pc, #124]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	610b      	str	r3, [r1, #16]
 8002e4e:	e011      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6892      	ldr	r2, [r2, #8]
 8002e60:	0211      	lsls	r1, r2, #8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6952      	ldr	r2, [r2, #20]
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0652      	lsls	r2, r2, #25
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4916      	ldr	r1, [pc, #88]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fa84 	bl	800138c <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fe fa80 	bl	800138c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4904      	ldr	r1, [pc, #16]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000

08002ecc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eda:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ee6:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d10d      	bne.n	8002f12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002efe:	4b61      	ldr	r3, [pc, #388]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d047      	beq.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e044      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d018      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0x86>
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d825      	bhi.n	8002f70 <RCCEx_PLLSAI2_Config+0xa4>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <RCCEx_PLLSAI2_Config+0x62>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d009      	beq.n	8002f40 <RCCEx_PLLSAI2_Config+0x74>
 8002f2c:	e020      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f2e:	4b55      	ldr	r3, [pc, #340]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11d      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3e:	e01a      	b.n	8002f76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f40:	4b50      	ldr	r3, [pc, #320]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e013      	b.n	8002f7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f52:	4b4c      	ldr	r3, [pc, #304]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f5e:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f6e:	e006      	b.n	8002f7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e004      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f86:	4b3f      	ldr	r3, [pc, #252]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	4939      	ldr	r1, [pc, #228]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d167      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fa8:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a35      	ldr	r2, [pc, #212]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe f9ea 	bl	800138c <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fba:	e009      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fbc:	f7fe f9e6 	bl	800138c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fce:	e005      	b.n	8002fdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ef      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d14a      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe8:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	0211      	lsls	r1, r2, #8
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68d2      	ldr	r2, [r2, #12]
 8002ffe:	0912      	lsrs	r2, r2, #4
 8003000:	0452      	lsls	r2, r2, #17
 8003002:	430a      	orrs	r2, r1
 8003004:	491f      	ldr	r1, [pc, #124]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	614b      	str	r3, [r1, #20]
 800300a:	e011      	b.n	8003030 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800300c:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003014:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6892      	ldr	r2, [r2, #8]
 800301c:	0211      	lsls	r1, r2, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6912      	ldr	r2, [r2, #16]
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0652      	lsls	r2, r2, #25
 8003028:	430a      	orrs	r2, r1
 800302a:	4916      	ldr	r1, [pc, #88]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003030:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe f9a6 	bl	800138c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003042:	e009      	b.n	8003058 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003044:	f7fe f9a2 	bl	800138c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d902      	bls.n	8003058 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	73fb      	strb	r3, [r7, #15]
          break;
 8003056:	e005      	b.n	8003064 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ef      	beq.n	8003044 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4904      	ldr	r1, [pc, #16]	@ (8003084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e049      	b.n	800312e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd ffee 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f000 fb7a 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e049      	b.n	80031dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f841 	bl	80031e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f000 fb23 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_TIM_PWM_Start+0x24>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e03c      	b.n	8003296 <HAL_TIM_PWM_Start+0x9e>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d109      	bne.n	8003236 <HAL_TIM_PWM_Start+0x3e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e02f      	b.n	8003296 <HAL_TIM_PWM_Start+0x9e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d109      	bne.n	8003250 <HAL_TIM_PWM_Start+0x58>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e022      	b.n	8003296 <HAL_TIM_PWM_Start+0x9e>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d109      	bne.n	800326a <HAL_TIM_PWM_Start+0x72>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e015      	b.n	8003296 <HAL_TIM_PWM_Start+0x9e>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d109      	bne.n	8003284 <HAL_TIM_PWM_Start+0x8c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e008      	b.n	8003296 <HAL_TIM_PWM_Start+0x9e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e09c      	b.n	80033d8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_PWM_Start+0xb6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ac:	e023      	b.n	80032f6 <HAL_TIM_PWM_Start+0xfe>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d104      	bne.n	80032be <HAL_TIM_PWM_Start+0xc6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032bc:	e01b      	b.n	80032f6 <HAL_TIM_PWM_Start+0xfe>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_PWM_Start+0xd6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	e013      	b.n	80032f6 <HAL_TIM_PWM_Start+0xfe>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d104      	bne.n	80032de <HAL_TIM_PWM_Start+0xe6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032dc:	e00b      	b.n	80032f6 <HAL_TIM_PWM_Start+0xfe>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0xf6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ec:	e003      	b.n	80032f6 <HAL_TIM_PWM_Start+0xfe>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fe74 	bl	8003fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <HAL_TIM_PWM_Start+0x1e8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_TIM_PWM_Start+0x13e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <HAL_TIM_PWM_Start+0x1ec>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_PWM_Start+0x13e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a32      	ldr	r2, [pc, #200]	@ (80033e8 <HAL_TIM_PWM_Start+0x1f0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_PWM_Start+0x13e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_TIM_PWM_Start+0x1f4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_PWM_Start+0x13e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <HAL_TIM_PWM_Start+0x1f8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_Start+0x142>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_TIM_PWM_Start+0x144>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a22      	ldr	r2, [pc, #136]	@ (80033e0 <HAL_TIM_PWM_Start+0x1e8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01d      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003362:	d018      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a22      	ldr	r2, [pc, #136]	@ (80033f4 <HAL_TIM_PWM_Start+0x1fc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a21      	ldr	r2, [pc, #132]	@ (80033f8 <HAL_TIM_PWM_Start+0x200>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_TIM_PWM_Start+0x204>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a17      	ldr	r2, [pc, #92]	@ (80033e4 <HAL_TIM_PWM_Start+0x1ec>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIM_PWM_Start+0x19e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a15      	ldr	r2, [pc, #84]	@ (80033e8 <HAL_TIM_PWM_Start+0x1f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d115      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b18      	ldr	r3, [pc, #96]	@ (8003400 <HAL_TIM_PWM_Start+0x208>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	d015      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x1dc>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ae:	d011      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	e008      	b.n	80033d4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	00010007 	.word	0x00010007

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0ff      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b14      	cmp	r3, #20
 800342e:	f200 80f0 	bhi.w	8003612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003613 	.word	0x08003613
 8003440:	08003613 	.word	0x08003613
 8003444:	08003613 	.word	0x08003613
 8003448:	080034cd 	.word	0x080034cd
 800344c:	08003613 	.word	0x08003613
 8003450:	08003613 	.word	0x08003613
 8003454:	08003613 	.word	0x08003613
 8003458:	0800350f 	.word	0x0800350f
 800345c:	08003613 	.word	0x08003613
 8003460:	08003613 	.word	0x08003613
 8003464:	08003613 	.word	0x08003613
 8003468:	0800354f 	.word	0x0800354f
 800346c:	08003613 	.word	0x08003613
 8003470:	08003613 	.word	0x08003613
 8003474:	08003613 	.word	0x08003613
 8003478:	08003591 	.word	0x08003591
 800347c:	08003613 	.word	0x08003613
 8003480:	08003613 	.word	0x08003613
 8003484:	08003613 	.word	0x08003613
 8003488:	080035d1 	.word	0x080035d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fa3a 	bl	800390c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	619a      	str	r2, [r3, #24]
      break;
 80034ca:	e0a5      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 faaa 	bl	8003a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
      break;
 800350c:	e084      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fb13 	bl	8003b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
      break;
 800354c:	e064      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fb7b 	bl	8003c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	021a      	lsls	r2, r3, #8
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e043      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fbc4 	bl	8003d24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035ce:	e023      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fc08 	bl	8003dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003610:	e002      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e0b6      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003666:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003684:	d03e      	beq.n	8003704 <HAL_TIM_ConfigClockSource+0xd8>
 8003686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368a:	f200 8087 	bhi.w	800379c <HAL_TIM_ConfigClockSource+0x170>
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003692:	f000 8086 	beq.w	80037a2 <HAL_TIM_ConfigClockSource+0x176>
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369a:	d87f      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 800369c:	2b70      	cmp	r3, #112	@ 0x70
 800369e:	d01a      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0xaa>
 80036a0:	2b70      	cmp	r3, #112	@ 0x70
 80036a2:	d87b      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036a4:	2b60      	cmp	r3, #96	@ 0x60
 80036a6:	d050      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x11e>
 80036a8:	2b60      	cmp	r3, #96	@ 0x60
 80036aa:	d877      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036ac:	2b50      	cmp	r3, #80	@ 0x50
 80036ae:	d03c      	beq.n	800372a <HAL_TIM_ConfigClockSource+0xfe>
 80036b0:	2b50      	cmp	r3, #80	@ 0x50
 80036b2:	d873      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d058      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x13e>
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	d86f      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036bc:	2b30      	cmp	r3, #48	@ 0x30
 80036be:	d064      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x15e>
 80036c0:	2b30      	cmp	r3, #48	@ 0x30
 80036c2:	d86b      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d060      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x15e>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d867      	bhi.n	800379c <HAL_TIM_ConfigClockSource+0x170>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d05c      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x15e>
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d05a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x15e>
 80036d4:	e062      	b.n	800379c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	f000 fc61 	bl	8003fac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	609a      	str	r2, [r3, #8]
      break;
 8003702:	e04f      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	f000 fc4a 	bl	8003fac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003726:	609a      	str	r2, [r3, #8]
      break;
 8003728:	e03c      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	461a      	mov	r2, r3
 8003738:	f000 fbbe 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2150      	movs	r1, #80	@ 0x50
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fc17 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003748:	e02c      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003756:	461a      	mov	r2, r3
 8003758:	f000 fbdd 	bl	8003f16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2160      	movs	r1, #96	@ 0x60
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fc07 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003768:	e01c      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003776:	461a      	mov	r2, r3
 8003778:	f000 fb9e 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2140      	movs	r1, #64	@ 0x40
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbf7 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003788:	e00c      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f000 fbee 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 800379a:	e003      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      break;
 80037a0:	e000      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a46      	ldr	r2, [pc, #280]	@ (80038ec <TIM_Base_SetConfig+0x12c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037de:	d00f      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a43      	ldr	r2, [pc, #268]	@ (80038f0 <TIM_Base_SetConfig+0x130>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a42      	ldr	r2, [pc, #264]	@ (80038f4 <TIM_Base_SetConfig+0x134>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a41      	ldr	r2, [pc, #260]	@ (80038f8 <TIM_Base_SetConfig+0x138>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <TIM_Base_SetConfig+0x13c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a35      	ldr	r2, [pc, #212]	@ (80038ec <TIM_Base_SetConfig+0x12c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003820:	d01b      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a32      	ldr	r2, [pc, #200]	@ (80038f0 <TIM_Base_SetConfig+0x130>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d017      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a31      	ldr	r2, [pc, #196]	@ (80038f4 <TIM_Base_SetConfig+0x134>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a30      	ldr	r2, [pc, #192]	@ (80038f8 <TIM_Base_SetConfig+0x138>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00f      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <TIM_Base_SetConfig+0x13c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <TIM_Base_SetConfig+0x140>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2d      	ldr	r2, [pc, #180]	@ (8003904 <TIM_Base_SetConfig+0x144>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_Base_SetConfig+0x9a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2c      	ldr	r2, [pc, #176]	@ (8003908 <TIM_Base_SetConfig+0x148>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d108      	bne.n	800386c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <TIM_Base_SetConfig+0x12c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <TIM_Base_SetConfig+0x13c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a17      	ldr	r2, [pc, #92]	@ (8003900 <TIM_Base_SetConfig+0x140>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <TIM_Base_SetConfig+0x144>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <TIM_Base_SetConfig+0x148>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]
  }
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40013400 	.word	0x40013400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 0201 	bic.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 0302 	bic.w	r3, r3, #2
 8003958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <TIM_OC1_SetConfig+0x10c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00f      	beq.n	800398c <TIM_OC1_SetConfig+0x80>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <TIM_OC1_SetConfig+0x110>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_OC1_SetConfig+0x80>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <TIM_OC1_SetConfig+0x114>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_OC1_SetConfig+0x80>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a29      	ldr	r2, [pc, #164]	@ (8003a24 <TIM_OC1_SetConfig+0x118>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC1_SetConfig+0x80>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a28      	ldr	r2, [pc, #160]	@ (8003a28 <TIM_OC1_SetConfig+0x11c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10c      	bne.n	80039a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0308 	bic.w	r3, r3, #8
 8003992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <TIM_OC1_SetConfig+0x10c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_OC1_SetConfig+0xc2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a1c <TIM_OC1_SetConfig+0x110>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_OC1_SetConfig+0xc2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <TIM_OC1_SetConfig+0x114>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_OC1_SetConfig+0xc2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a18      	ldr	r2, [pc, #96]	@ (8003a24 <TIM_OC1_SetConfig+0x118>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_OC1_SetConfig+0xc2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a17      	ldr	r2, [pc, #92]	@ (8003a28 <TIM_OC1_SetConfig+0x11c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d111      	bne.n	80039f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 0210 	bic.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0320 	bic.w	r3, r3, #32
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	@ (8003b2c <TIM_OC2_SetConfig+0x100>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC2_SetConfig+0x6c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a27      	ldr	r2, [pc, #156]	@ (8003b30 <TIM_OC2_SetConfig+0x104>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10d      	bne.n	8003ab4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b2c <TIM_OC2_SetConfig+0x100>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00f      	beq.n	8003adc <TIM_OC2_SetConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <TIM_OC2_SetConfig+0x104>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_OC2_SetConfig+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <TIM_OC2_SetConfig+0x108>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_OC2_SetConfig+0xb0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a1a      	ldr	r2, [pc, #104]	@ (8003b38 <TIM_OC2_SetConfig+0x10c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC2_SetConfig+0xb0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a19      	ldr	r2, [pc, #100]	@ (8003b3c <TIM_OC2_SetConfig+0x110>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d113      	bne.n	8003b04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	@ (8003c3c <TIM_OC3_SetConfig+0xfc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_OC3_SetConfig+0x6a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <TIM_OC3_SetConfig+0x100>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10d      	bne.n	8003bc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <TIM_OC3_SetConfig+0xfc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00f      	beq.n	8003bee <TIM_OC3_SetConfig+0xae>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <TIM_OC3_SetConfig+0x100>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <TIM_OC3_SetConfig+0xae>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c44 <TIM_OC3_SetConfig+0x104>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <TIM_OC3_SetConfig+0xae>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <TIM_OC3_SetConfig+0x108>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_OC3_SetConfig+0xae>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <TIM_OC3_SetConfig+0x10c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a18      	ldr	r2, [pc, #96]	@ (8003d10 <TIM_OC4_SetConfig+0xc0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x84>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <TIM_OC4_SetConfig+0xc4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x84>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	@ (8003d18 <TIM_OC4_SetConfig+0xc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x84>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <TIM_OC4_SetConfig+0xcc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x84>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <TIM_OC4_SetConfig+0xd0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d109      	bne.n	8003ce8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <TIM_OC5_SetConfig+0xb4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_OC5_SetConfig+0x7a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a16      	ldr	r2, [pc, #88]	@ (8003ddc <TIM_OC5_SetConfig+0xb8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_OC5_SetConfig+0x7a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <TIM_OC5_SetConfig+0xbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_OC5_SetConfig+0x7a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <TIM_OC5_SetConfig+0xc0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_OC5_SetConfig+0x7a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <TIM_OC5_SetConfig+0xc4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d109      	bne.n	8003db2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800

08003dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	051b      	lsls	r3, r3, #20
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <TIM_OC6_SetConfig+0xb8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_OC6_SetConfig+0x7c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <TIM_OC6_SetConfig+0xbc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_OC6_SetConfig+0x7c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <TIM_OC6_SetConfig+0xc0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_OC6_SetConfig+0x7c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <TIM_OC6_SetConfig+0xc4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC6_SetConfig+0x7c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <TIM_OC6_SetConfig+0xc8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	029b      	lsls	r3, r3, #10
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 030a 	bic.w	r3, r3, #10
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f023 0210 	bic.w	r2, r3, #16
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	031b      	lsls	r3, r3, #12
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f043 0307 	orr.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e068      	b.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2e      	ldr	r2, [pc, #184]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2d      	ldr	r2, [pc, #180]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d108      	bne.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800408a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c2:	d018      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a14      	ldr	r2, [pc, #80]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10c      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40014000 	.word	0x40014000

08004148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e065      	b.n	8004230 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a16      	ldr	r2, [pc, #88]	@ (800423c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d115      	bne.n	800421e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400

08004244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e040      	b.n	80042d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fd94 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fedc 	bl	8005048 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fc21 	bl	8004ad8 <UART_SetConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01b      	b.n	80042d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 ff5b 	bl	800518c <UART_CheckIdleState>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	@ 0x28
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d177      	bne.n	80043e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Transmit+0x24>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e070      	b.n	80043ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2221      	movs	r2, #33	@ 0x21
 8004314:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004316:	f7fd f839 	bl	800138c <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004334:	d108      	bne.n	8004348 <HAL_UART_Transmit+0x68>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e003      	b.n	8004350 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004350:	e02f      	b.n	80043b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2180      	movs	r1, #128	@ 0x80
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 ffbd 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e03b      	b.n	80043ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	b292      	uxth	r2, r2
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	3302      	adds	r3, #2
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e007      	b.n	80043a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1c9      	bne.n	8004352 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	@ 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 ff87 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e005      	b.n	80043ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004408:	2b20      	cmp	r3, #32
 800440a:	d137      	bne.n	800447c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Receive_IT+0x24>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e030      	b.n	800447e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a18      	ldr	r2, [pc, #96]	@ (8004488 <HAL_UART_Receive_IT+0x94>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01f      	beq.n	800446c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	623b      	str	r3, [r7, #32]
 800445a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	61bb      	str	r3, [r7, #24]
   return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	461a      	mov	r2, r3
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 ffa0 	bl	80053b8 <UART_Start_Receive_IT>
 8004478:	4603      	mov	r3, r0
 800447a:	e000      	b.n	800447e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3728      	adds	r7, #40	@ 0x28
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40008000 	.word	0x40008000

0800448c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b0ba      	sub	sp, #232	@ 0xe8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044ba:	4013      	ands	r3, r2
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d115      	bne.n	80044f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00f      	beq.n	80044f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 82ca 	beq.w	8004a7e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
      }
      return;
 80044f2:	e2c4      	b.n	8004a7e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8117 	beq.w	800472c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800450a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800450e:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <HAL_UART_IRQHandler+0x298>)
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 810a 	beq.w	800472c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d011      	beq.n	8004548 <HAL_UART_IRQHandler+0xbc>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0xec>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2202      	movs	r2, #2
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2204      	movs	r2, #4
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800459e:	f043 0202 	orr.w	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d017      	beq.n	80045e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_UART_IRQHandler+0x18a>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8230 	beq.w	8004a82 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004666:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04f      	beq.n	800470e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 ff68 	bl	8005544 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d141      	bne.n	8004706 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800469c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1d9      	bne.n	8004682 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <HAL_UART_IRQHandler+0x29c>)
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc ffad 	bl	8001642 <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00f      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9d4 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00b      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9d0 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e007      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9cc 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800471c:	e1b1      	b.n	8004a82 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	bf00      	nop
    return;
 8004720:	e1af      	b.n	8004a82 <HAL_UART_IRQHandler+0x5f6>
 8004722:	bf00      	nop
 8004724:	04000120 	.word	0x04000120
 8004728:	0800560d 	.word	0x0800560d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 816a 	bne.w	8004a0a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8163 	beq.w	8004a0a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 815c 	beq.w	8004a0a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2210      	movs	r2, #16
 8004758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	f040 80d4 	bne.w	8004912 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004776:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80ad 	beq.w	80048da <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800478a:	429a      	cmp	r2, r3
 800478c:	f080 80a5 	bcs.w	80048da <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 8086 	bne.w	80048b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1da      	bne.n	80047ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800481e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004822:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e1      	bne.n	80047f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004856:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800485c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800489a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800489c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e4      	bne.n	8004878 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fe87 	bl	80015c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8f4 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048d8:	e0d5      	b.n	8004a86 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048e4:	429a      	cmp	r2, r3
 80048e6:	f040 80ce 	bne.w	8004a86 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	f040 80c5 	bne.w	8004a86 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8d8 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
      return;
 8004910:	e0b9      	b.n	8004a86 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800491e:	b29b      	uxth	r3, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ab 	beq.w	8004a8a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a6 	beq.w	8004a8a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004960:	647b      	str	r3, [r7, #68]	@ 0x44
 8004962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800496e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e4      	bne.n	800493e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	623b      	str	r3, [r7, #32]
   return(result);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004998:	633a      	str	r2, [r7, #48]	@ 0x30
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e3      	bne.n	8004974 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	617b      	str	r3, [r7, #20]
   return(result);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e4      	bne.n	80049c0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f85c 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a08:	e03f      	b.n	8004a8a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00e      	beq.n	8004a34 <HAL_UART_IRQHandler+0x5a8>
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 ffe9 	bl	8005a04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a32:	e02d      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01c      	beq.n	8004a8e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
    }
    return;
 8004a5c:	e017      	b.n	8004a8e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d012      	beq.n	8004a90 <HAL_UART_IRQHandler+0x604>
 8004a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fdde 	bl	8005638 <UART_EndTransmit_IT>
    return;
 8004a7c:	e008      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e006      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
    return;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
    return;
 8004a8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a90:	37e8      	adds	r7, #232	@ 0xe8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop

08004a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b08a      	sub	sp, #40	@ 0x28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4ba4      	ldr	r3, [pc, #656]	@ (8004d98 <UART_SetConfig+0x2c0>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a99      	ldr	r2, [pc, #612]	@ (8004d9c <UART_SetConfig+0x2c4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b40:	4313      	orrs	r3, r2
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a90      	ldr	r2, [pc, #576]	@ (8004da0 <UART_SetConfig+0x2c8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d126      	bne.n	8004bb0 <UART_SetConfig+0xd8>
 8004b62:	4b90      	ldr	r3, [pc, #576]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0xd0>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0xa0>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e116      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e112      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e10e      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e10a      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e106      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8004da8 <UART_SetConfig+0x2d0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d138      	bne.n	8004c2c <UART_SetConfig+0x154>
 8004bba:	4b7a      	ldr	r3, [pc, #488]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d82d      	bhi.n	8004c24 <UART_SetConfig+0x14c>
 8004bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0xf8>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e0d8      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e0d4      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e0d0      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e0cc      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e0c8      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5e      	ldr	r2, [pc, #376]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d125      	bne.n	8004c82 <UART_SetConfig+0x1aa>
 8004c36:	4b5b      	ldr	r3, [pc, #364]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c40:	2b30      	cmp	r3, #48	@ 0x30
 8004c42:	d016      	beq.n	8004c72 <UART_SetConfig+0x19a>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d818      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d00a      	beq.n	8004c62 <UART_SetConfig+0x18a>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d814      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <UART_SetConfig+0x182>
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d008      	beq.n	8004c6a <UART_SetConfig+0x192>
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0x1a2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c60:	e0ad      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c68:	e0a9      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c70:	e0a5      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c72:	2308      	movs	r3, #8
 8004c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c78:	e0a1      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c80:	e09d      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4a      	ldr	r2, [pc, #296]	@ (8004db0 <UART_SetConfig+0x2d8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d125      	bne.n	8004cd8 <UART_SetConfig+0x200>
 8004c8c:	4b45      	ldr	r3, [pc, #276]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c98:	d016      	beq.n	8004cc8 <UART_SetConfig+0x1f0>
 8004c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9c:	d818      	bhi.n	8004cd0 <UART_SetConfig+0x1f8>
 8004c9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ca0:	d00a      	beq.n	8004cb8 <UART_SetConfig+0x1e0>
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d814      	bhi.n	8004cd0 <UART_SetConfig+0x1f8>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <UART_SetConfig+0x1d8>
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d008      	beq.n	8004cc0 <UART_SetConfig+0x1e8>
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x1f8>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb6:	e082      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cbe:	e07e      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	e07a      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cce:	e076      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd6:	e072      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <UART_SetConfig+0x2dc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d12a      	bne.n	8004d38 <UART_SetConfig+0x260>
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf0:	d01a      	beq.n	8004d28 <UART_SetConfig+0x250>
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf6:	d81b      	bhi.n	8004d30 <UART_SetConfig+0x258>
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfc:	d00c      	beq.n	8004d18 <UART_SetConfig+0x240>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d02:	d815      	bhi.n	8004d30 <UART_SetConfig+0x258>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x238>
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0c:	d008      	beq.n	8004d20 <UART_SetConfig+0x248>
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x258>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e052      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e04e      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e04a      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2e:	e046      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d36:	e042      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <UART_SetConfig+0x2c4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d13a      	bne.n	8004db8 <UART_SetConfig+0x2e0>
 8004d42:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d50:	d01a      	beq.n	8004d88 <UART_SetConfig+0x2b0>
 8004d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0x2b8>
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5c:	d00c      	beq.n	8004d78 <UART_SetConfig+0x2a0>
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d62:	d815      	bhi.n	8004d90 <UART_SetConfig+0x2b8>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x298>
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6c:	d008      	beq.n	8004d80 <UART_SetConfig+0x2a8>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x2b8>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e022      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7e:	e01e      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d86:	e01a      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8e:	e016      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0x2e6>
 8004d98:	efff69f3 	.word	0xefff69f3
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40004400 	.word	0x40004400
 8004dac:	40004800 	.word	0x40004800
 8004db0:	40004c00 	.word	0x40004c00
 8004db4:	40005000 	.word	0x40005000
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a9f      	ldr	r2, [pc, #636]	@ (8005040 <UART_SetConfig+0x568>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d17a      	bne.n	8004ebe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d824      	bhi.n	8004e1a <UART_SetConfig+0x342>
 8004dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x300>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e1b 	.word	0x08004e1b
 8004de8:	08004e0b 	.word	0x08004e0b
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e1b 	.word	0x08004e1b
 8004df8:	08004e13 	.word	0x08004e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fd fbfc 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004e00:	61f8      	str	r0, [r7, #28]
        break;
 8004e02:	e010      	b.n	8004e26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e04:	4b8f      	ldr	r3, [pc, #572]	@ (8005044 <UART_SetConfig+0x56c>)
 8004e06:	61fb      	str	r3, [r7, #28]
        break;
 8004e08:	e00d      	b.n	8004e26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0a:	f7fd fb5d 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8004e0e:	61f8      	str	r0, [r7, #28]
        break;
 8004e10:	e009      	b.n	8004e26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e16:	61fb      	str	r3, [r7, #28]
        break;
 8004e18:	e005      	b.n	8004e26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80fb 	beq.w	8005024 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d305      	bcc.n	8004e4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d903      	bls.n	8004e52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e50:	e0e8      	b.n	8005024 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2200      	movs	r2, #0
 8004e56:	461c      	mov	r4, r3
 8004e58:	4615      	mov	r5, r2
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	022b      	lsls	r3, r5, #8
 8004e64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e68:	0222      	lsls	r2, r4, #8
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	6849      	ldr	r1, [r1, #4]
 8004e6e:	0849      	lsrs	r1, r1, #1
 8004e70:	2000      	movs	r0, #0
 8004e72:	4688      	mov	r8, r1
 8004e74:	4681      	mov	r9, r0
 8004e76:	eb12 0a08 	adds.w	sl, r2, r8
 8004e7a:	eb43 0b09 	adc.w	fp, r3, r9
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb f99a 	bl	80001c8 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea2:	d308      	bcc.n	8004eb6 <UART_SetConfig+0x3de>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eaa:	d204      	bcs.n	8004eb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e0b6      	b.n	8005024 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ebc:	e0b2      	b.n	8005024 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ec6:	d15e      	bne.n	8004f86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d828      	bhi.n	8004f22 <UART_SetConfig+0x44a>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <UART_SetConfig+0x400>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f0d 	.word	0x08004f0d
 8004ee4:	08004f23 	.word	0x08004f23
 8004ee8:	08004f13 	.word	0x08004f13
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f23 	.word	0x08004f23
 8004ef4:	08004f23 	.word	0x08004f23
 8004ef8:	08004f1b 	.word	0x08004f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fd fb7c 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004f00:	61f8      	str	r0, [r7, #28]
        break;
 8004f02:	e014      	b.n	8004f2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f04:	f7fd fb8e 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8004f08:	61f8      	str	r0, [r7, #28]
        break;
 8004f0a:	e010      	b.n	8004f2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005044 <UART_SetConfig+0x56c>)
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e00d      	b.n	8004f2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f12:	f7fd fad9 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8004f16:	61f8      	str	r0, [r7, #28]
        break;
 8004f18:	e009      	b.n	8004f2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1e:	61fb      	str	r3, [r7, #28]
        break;
 8004f20:	e005      	b.n	8004f2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d077      	beq.n	8005024 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005a      	lsls	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	441a      	add	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d916      	bls.n	8004f7e <UART_SetConfig+0x4a6>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f56:	d212      	bcs.n	8004f7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f023 030f 	bic.w	r3, r3, #15
 8004f60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	8afb      	ldrh	r3, [r7, #22]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	8afa      	ldrh	r2, [r7, #22]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e052      	b.n	8005024 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f84:	e04e      	b.n	8005024 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d827      	bhi.n	8004fde <UART_SetConfig+0x506>
 8004f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0x4bc>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08004fc9 	.word	0x08004fc9
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004fcf 	.word	0x08004fcf
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fdf 	.word	0x08004fdf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb8:	f7fd fb1e 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004fbc:	61f8      	str	r0, [r7, #28]
        break;
 8004fbe:	e014      	b.n	8004fea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc0:	f7fd fb30 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8005044 <UART_SetConfig+0x56c>)
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fd fa7b 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8004fd2:	61f8      	str	r0, [r7, #28]
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d019      	beq.n	8005024 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085a      	lsrs	r2, r3, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d909      	bls.n	800501e <UART_SetConfig+0x546>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d205      	bcs.n	800501e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	e002      	b.n	8005024 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005030:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005034:	4618      	mov	r0, r3
 8005036:	3728      	adds	r7, #40	@ 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503e:	bf00      	nop
 8005040:	40008000 	.word	0x40008000
 8005044:	00f42400 	.word	0x00f42400

08005048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01a      	beq.n	800515e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005146:	d10a      	bne.n	800515e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b098      	sub	sp, #96	@ 0x60
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800519c:	f7fc f8f6 	bl	800138c <HAL_GetTick>
 80051a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d12e      	bne.n	800520e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b8:	2200      	movs	r2, #0
 80051ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f88c 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d021      	beq.n	800520e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051de:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e062      	b.n	80052d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b04      	cmp	r3, #4
 800521a:	d149      	bne.n	80052b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f856 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d03c      	beq.n	80052b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	623b      	str	r3, [r7, #32]
   return(result);
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005254:	633b      	str	r3, [r7, #48]	@ 0x30
 8005256:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800525a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	60fb      	str	r3, [r7, #12]
   return(result);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005288:	61fa      	str	r2, [r7, #28]
 800528a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	617b      	str	r3, [r7, #20]
   return(result);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e011      	b.n	80052d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3758      	adds	r7, #88	@ 0x58
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ec:	e04f      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d04b      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fc f849 	bl	800138c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <UART_WaitOnFlagUntilTimeout+0x30>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e04e      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d037      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b80      	cmp	r3, #128	@ 0x80
 8005322:	d034      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b40      	cmp	r3, #64	@ 0x40
 8005328:	d031      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d110      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2208      	movs	r2, #8
 800533e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f8ff 	bl	8005544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2208      	movs	r2, #8
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e029      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005368:	d111      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f8e5 	bl	8005544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d0a0      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b097      	sub	sp, #92	@ 0x5c
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d10e      	bne.n	800540a <UART_Start_Receive_IT+0x52>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <UART_Start_Receive_IT+0x48>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053fe:	e02d      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005408:	e028      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <UART_Start_Receive_IT+0x76>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <UART_Start_Receive_IT+0x6c>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	22ff      	movs	r2, #255	@ 0xff
 800541e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005422:	e01b      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	227f      	movs	r2, #127	@ 0x7f
 8005428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800542c:	e016      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005436:	d10d      	bne.n	8005454 <UART_Start_Receive_IT+0x9c>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <UART_Start_Receive_IT+0x92>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	227f      	movs	r2, #127	@ 0x7f
 8005444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005448:	e008      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	223f      	movs	r2, #63	@ 0x3f
 800544e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005452:	e003      	b.n	800545c <UART_Start_Receive_IT+0xa4>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2222      	movs	r2, #34	@ 0x22
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	657b      	str	r3, [r7, #84]	@ 0x54
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800548c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800548e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800549a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a8:	d107      	bne.n	80054ba <UART_Start_Receive_IT+0x102>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a21      	ldr	r2, [pc, #132]	@ (800553c <UART_Start_Receive_IT+0x184>)
 80054b6:	669a      	str	r2, [r3, #104]	@ 0x68
 80054b8:	e002      	b.n	80054c0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a20      	ldr	r2, [pc, #128]	@ (8005540 <UART_Start_Receive_IT+0x188>)
 80054be:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d019      	beq.n	80054fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80054dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e6      	bne.n	80054c8 <UART_Start_Receive_IT+0x110>
 80054fa:	e018      	b.n	800552e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f043 0320 	orr.w	r3, r3, #32
 8005510:	653b      	str	r3, [r7, #80]	@ 0x50
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	69f9      	ldr	r1, [r7, #28]
 8005520:	6a3a      	ldr	r2, [r7, #32]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	61bb      	str	r3, [r7, #24]
   return(result);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	375c      	adds	r7, #92	@ 0x5c
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	08005849 	.word	0x08005849
 8005540:	0800568d 	.word	0x0800568d

08005544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b095      	sub	sp, #84	@ 0x54
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556a:	643b      	str	r3, [r7, #64]	@ 0x40
 800556c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005570:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	61fb      	str	r3, [r7, #28]
   return(result);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d118      	bne.n	80055ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	613b      	str	r3, [r7, #16]
   return(result);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005600:	bf00      	nop
 8005602:	3754      	adds	r7, #84	@ 0x54
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff fa3e 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	60bb      	str	r3, [r7, #8]
   return(result);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	613b      	str	r3, [r7, #16]
   return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fa0a 	bl	8004a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005684:	bf00      	nop
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b09c      	sub	sp, #112	@ 0x70
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800569a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a4:	2b22      	cmp	r3, #34	@ 0x22
 80056a6:	f040 80be 	bne.w	8005826 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056b8:	b2d9      	uxtb	r1, r3
 80056ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	400a      	ands	r2, r1
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 80a3 	bne.w	800583a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005712:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005714:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	667b      	str	r3, [r7, #100]	@ 0x64
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005746:	647a      	str	r2, [r7, #68]	@ 0x44
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800574c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a34      	ldr	r2, [pc, #208]	@ (8005844 <UART_RxISR_8BIT+0x1b8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d01f      	beq.n	80057b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	623b      	str	r3, [r7, #32]
   return(result);
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800579a:	663b      	str	r3, [r7, #96]	@ 0x60
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d12e      	bne.n	800581e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b10      	cmp	r3, #16
 8005804:	d103      	bne.n	800580e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2210      	movs	r2, #16
 800580c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff f952 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800581c:	e00d      	b.n	800583a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb fa18 	bl	8000c54 <HAL_UART_RxCpltCallback>
}
 8005824:	e009      	b.n	800583a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	8b1b      	ldrh	r3, [r3, #24]
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	b292      	uxth	r2, r2
 8005838:	831a      	strh	r2, [r3, #24]
}
 800583a:	bf00      	nop
 800583c:	3770      	adds	r7, #112	@ 0x70
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40008000 	.word	0x40008000

08005848 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b09c      	sub	sp, #112	@ 0x70
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005856:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005860:	2b22      	cmp	r3, #34	@ 0x22
 8005862:	f040 80be 	bne.w	80059e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800586c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005876:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800587a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800587e:	4013      	ands	r3, r2
 8005880:	b29a      	uxth	r2, r3
 8005882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005884:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	1c9a      	adds	r2, r3, #2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 80a3 	bne.w	80059f6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80058be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80058d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e6      	bne.n	80058b0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3308      	adds	r3, #8
 8005900:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005902:	643a      	str	r2, [r7, #64]	@ 0x40
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e5      	bne.n	80058e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a34      	ldr	r2, [pc, #208]	@ (8005a00 <UART_RxISR_16BIT+0x1b8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01f      	beq.n	8005974 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d018      	beq.n	8005974 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005962:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005978:	2b01      	cmp	r3, #1
 800597a:	d12e      	bne.n	80059da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6979      	ldr	r1, [r7, #20]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d103      	bne.n	80059ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2210      	movs	r2, #16
 80059c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff f874 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059d8:	e00d      	b.n	80059f6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb f93a 	bl	8000c54 <HAL_UART_RxCpltCallback>
}
 80059e0:	e009      	b.n	80059f6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	8b1b      	ldrh	r3, [r3, #24]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	b292      	uxth	r2, r2
 80059f4:	831a      	strh	r2, [r3, #24]
}
 80059f6:	bf00      	nop
 80059f8:	3770      	adds	r7, #112	@ 0x70
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40008000 	.word	0x40008000

08005a04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <atoi>:
 8005a18:	220a      	movs	r2, #10
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f000 b87a 	b.w	8005b14 <strtol>

08005a20 <_strtol_l.constprop.0>:
 8005a20:	2b24      	cmp	r3, #36	@ 0x24
 8005a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a26:	4686      	mov	lr, r0
 8005a28:	4690      	mov	r8, r2
 8005a2a:	d801      	bhi.n	8005a30 <_strtol_l.constprop.0+0x10>
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d106      	bne.n	8005a3e <_strtol_l.constprop.0+0x1e>
 8005a30:	f000 f896 	bl	8005b60 <__errno>
 8005a34:	2316      	movs	r3, #22
 8005a36:	6003      	str	r3, [r0, #0]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4834      	ldr	r0, [pc, #208]	@ (8005b10 <_strtol_l.constprop.0+0xf0>)
 8005a40:	460d      	mov	r5, r1
 8005a42:	462a      	mov	r2, r5
 8005a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a48:	5d06      	ldrb	r6, [r0, r4]
 8005a4a:	f016 0608 	ands.w	r6, r6, #8
 8005a4e:	d1f8      	bne.n	8005a42 <_strtol_l.constprop.0+0x22>
 8005a50:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a52:	d12d      	bne.n	8005ab0 <_strtol_l.constprop.0+0x90>
 8005a54:	782c      	ldrb	r4, [r5, #0]
 8005a56:	2601      	movs	r6, #1
 8005a58:	1c95      	adds	r5, r2, #2
 8005a5a:	f033 0210 	bics.w	r2, r3, #16
 8005a5e:	d109      	bne.n	8005a74 <_strtol_l.constprop.0+0x54>
 8005a60:	2c30      	cmp	r4, #48	@ 0x30
 8005a62:	d12a      	bne.n	8005aba <_strtol_l.constprop.0+0x9a>
 8005a64:	782a      	ldrb	r2, [r5, #0]
 8005a66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a6a:	2a58      	cmp	r2, #88	@ 0x58
 8005a6c:	d125      	bne.n	8005aba <_strtol_l.constprop.0+0x9a>
 8005a6e:	786c      	ldrb	r4, [r5, #1]
 8005a70:	2310      	movs	r3, #16
 8005a72:	3502      	adds	r5, #2
 8005a74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	fbbc f9f3 	udiv	r9, ip, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a8c:	2f09      	cmp	r7, #9
 8005a8e:	d81b      	bhi.n	8005ac8 <_strtol_l.constprop.0+0xa8>
 8005a90:	463c      	mov	r4, r7
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	dd27      	ble.n	8005ae6 <_strtol_l.constprop.0+0xc6>
 8005a96:	1c57      	adds	r7, r2, #1
 8005a98:	d007      	beq.n	8005aaa <_strtol_l.constprop.0+0x8a>
 8005a9a:	4581      	cmp	r9, r0
 8005a9c:	d320      	bcc.n	8005ae0 <_strtol_l.constprop.0+0xc0>
 8005a9e:	d101      	bne.n	8005aa4 <_strtol_l.constprop.0+0x84>
 8005aa0:	45a2      	cmp	sl, r4
 8005aa2:	db1d      	blt.n	8005ae0 <_strtol_l.constprop.0+0xc0>
 8005aa4:	fb00 4003 	mla	r0, r0, r3, r4
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aae:	e7eb      	b.n	8005a88 <_strtol_l.constprop.0+0x68>
 8005ab0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005ab2:	bf04      	itt	eq
 8005ab4:	782c      	ldrbeq	r4, [r5, #0]
 8005ab6:	1c95      	addeq	r5, r2, #2
 8005ab8:	e7cf      	b.n	8005a5a <_strtol_l.constprop.0+0x3a>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1da      	bne.n	8005a74 <_strtol_l.constprop.0+0x54>
 8005abe:	2c30      	cmp	r4, #48	@ 0x30
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2308      	moveq	r3, #8
 8005ac4:	230a      	movne	r3, #10
 8005ac6:	e7d5      	b.n	8005a74 <_strtol_l.constprop.0+0x54>
 8005ac8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005acc:	2f19      	cmp	r7, #25
 8005ace:	d801      	bhi.n	8005ad4 <_strtol_l.constprop.0+0xb4>
 8005ad0:	3c37      	subs	r4, #55	@ 0x37
 8005ad2:	e7de      	b.n	8005a92 <_strtol_l.constprop.0+0x72>
 8005ad4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005ad8:	2f19      	cmp	r7, #25
 8005ada:	d804      	bhi.n	8005ae6 <_strtol_l.constprop.0+0xc6>
 8005adc:	3c57      	subs	r4, #87	@ 0x57
 8005ade:	e7d8      	b.n	8005a92 <_strtol_l.constprop.0+0x72>
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	e7e1      	b.n	8005aaa <_strtol_l.constprop.0+0x8a>
 8005ae6:	1c53      	adds	r3, r2, #1
 8005ae8:	d108      	bne.n	8005afc <_strtol_l.constprop.0+0xdc>
 8005aea:	2322      	movs	r3, #34	@ 0x22
 8005aec:	f8ce 3000 	str.w	r3, [lr]
 8005af0:	4660      	mov	r0, ip
 8005af2:	f1b8 0f00 	cmp.w	r8, #0
 8005af6:	d0a0      	beq.n	8005a3a <_strtol_l.constprop.0+0x1a>
 8005af8:	1e69      	subs	r1, r5, #1
 8005afa:	e006      	b.n	8005b0a <_strtol_l.constprop.0+0xea>
 8005afc:	b106      	cbz	r6, 8005b00 <_strtol_l.constprop.0+0xe0>
 8005afe:	4240      	negs	r0, r0
 8005b00:	f1b8 0f00 	cmp.w	r8, #0
 8005b04:	d099      	beq.n	8005a3a <_strtol_l.constprop.0+0x1a>
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d1f6      	bne.n	8005af8 <_strtol_l.constprop.0+0xd8>
 8005b0a:	f8c8 1000 	str.w	r1, [r8]
 8005b0e:	e794      	b.n	8005a3a <_strtol_l.constprop.0+0x1a>
 8005b10:	08005c15 	.word	0x08005c15

08005b14 <strtol>:
 8005b14:	4613      	mov	r3, r2
 8005b16:	460a      	mov	r2, r1
 8005b18:	4601      	mov	r1, r0
 8005b1a:	4802      	ldr	r0, [pc, #8]	@ (8005b24 <strtol+0x10>)
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f7ff bf7f 	b.w	8005a20 <_strtol_l.constprop.0>
 8005b22:	bf00      	nop
 8005b24:	2000000c 	.word	0x2000000c

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <strncpy>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	3901      	subs	r1, #1
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b132      	cbz	r2, 8005b4e <strncpy+0x16>
 8005b40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b44:	f803 4b01 	strb.w	r4, [r3], #1
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d1f7      	bne.n	8005b3e <strncpy+0x6>
 8005b4e:	441a      	add	r2, r3
 8005b50:	2100      	movs	r1, #0
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d100      	bne.n	8005b58 <strncpy+0x20>
 8005b56:	bd10      	pop	{r4, pc}
 8005b58:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5c:	e7f9      	b.n	8005b52 <strncpy+0x1a>
	...

08005b60 <__errno>:
 8005b60:	4b01      	ldr	r3, [pc, #4]	@ (8005b68 <__errno+0x8>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ba4 <__libc_init_array+0x38>)
 8005b70:	4c0d      	ldr	r4, [pc, #52]	@ (8005ba8 <__libc_init_array+0x3c>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	2600      	movs	r6, #0
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005bac <__libc_init_array+0x40>)
 8005b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005bb0 <__libc_init_array+0x44>)
 8005b80:	f000 f818 	bl	8005bb4 <_init>
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	2600      	movs	r6, #0
 8005b8a:	42a6      	cmp	r6, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b94:	4798      	blx	r3
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9e:	4798      	blx	r3
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08005d20 	.word	0x08005d20
 8005ba8:	08005d20 	.word	0x08005d20
 8005bac:	08005d20 	.word	0x08005d20
 8005bb0:	08005d24 	.word	0x08005d24

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
