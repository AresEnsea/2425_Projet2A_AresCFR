
stepper_ares.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800658c  0800658c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800658c  0800658c  0000758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006594  08006594  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006594  08006594  00007594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800659c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000005c  080065f8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080065f8  0000838c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cf5  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245c  00000000  00000000  00018d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7b  00000000  00000000  0001c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e80  00000000  00000000  0001cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001224a  00000000  00000000  00035a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a160a  00000000  00000000  00047cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e92b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000e92fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ecc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800642c 	.word	0x0800642c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800642c 	.word	0x0800642c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fdd1 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */
  // Initialisation supplémentaire si nécessaire
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8bd 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // Configuration supplémentaire du système si nécessaire
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb01 	bl	8000c54 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000652:	f000 f917 	bl	8000884 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000656:	f000 f9e1 	bl	8000a1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800065a:	f000 fa5f 	bl	8000b1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800065e:	f000 faab 	bl	8000bb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Message de démarrage pour confirmer que USART2 fonctionne
  HAL_UART_Transmit(&huart2, (uint8_t *)"STM32 Started\r\n", 14, HAL_MAX_DELAY);
 8000662:	2301      	movs	r3, #1
 8000664:	425b      	negs	r3, r3
 8000666:	4950      	ldr	r1, [pc, #320]	@ (80007a8 <main+0x168>)
 8000668:	4850      	ldr	r0, [pc, #320]	@ (80007ac <main+0x16c>)
 800066a:	220e      	movs	r2, #14
 800066c:	f003 f960 	bl	8003930 <HAL_UART_Transmit>

  // Démarrer les canaux PWM pour les moteurs
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000670:	4b4f      	ldr	r3, [pc, #316]	@ (80007b0 <main+0x170>)
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f002 f929 	bl	80028cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800067a:	4b4e      	ldr	r3, [pc, #312]	@ (80007b4 <main+0x174>)
 800067c:	2108      	movs	r1, #8
 800067e:	0018      	movs	r0, r3
 8000680:	f002 f924 	bl	80028cc <HAL_TIM_PWM_Start>

  // Activer les pilotes de moteur
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Enable moteur 1
 8000684:	23a0      	movs	r3, #160	@ 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	0018      	movs	r0, r3
 800068e:	f001 f965 	bl	800195c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Enable moteur 2
 8000692:	4b49      	ldr	r3, [pc, #292]	@ (80007b8 <main+0x178>)
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	0018      	movs	r0, r3
 800069a:	f001 f95f 	bl	800195c <HAL_GPIO_WritePin>

  // Démarrer la réception UART via interruption sur USART1
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 2);
 800069e:	4947      	ldr	r1, [pc, #284]	@ (80007bc <main+0x17c>)
 80006a0:	4b47      	ldr	r3, [pc, #284]	@ (80007c0 <main+0x180>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 f9e7 	bl	8003a78 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Débogage : Transmettre les données reçues à USART2 pour vérification
    char debug_msg[32];
    sprintf(debug_msg, "rx_data: %d %d\r\n", rx_data[0], rx_data[1]);
 80006aa:	4b44      	ldr	r3, [pc, #272]	@ (80007bc <main+0x17c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <main+0x17c>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	4943      	ldr	r1, [pc, #268]	@ (80007c4 <main+0x184>)
 80006b6:	0038      	movs	r0, r7
 80006b8:	f005 fa1a 	bl	8005af0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 80006bc:	003b      	movs	r3, r7
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fd20 	bl	8000104 <strlen>
 80006c4:	0003      	movs	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	0039      	movs	r1, r7
 80006ce:	4837      	ldr	r0, [pc, #220]	@ (80007ac <main+0x16c>)
 80006d0:	f003 f92e 	bl	8003930 <HAL_UART_Transmit>

    // Contrôle du moteur 1 (TIM3)
    if (rx_data[0] == 0)
 80006d4:	4b39      	ldr	r3, [pc, #228]	@ (80007bc <main+0x17c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <main+0xb4>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006dc:	23a0      	movs	r3, #160	@ 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2200      	movs	r2, #0
 80006e2:	2110      	movs	r1, #16
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f939 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // Arrêt du moteur 1
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <main+0x170>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f2:	e020      	b.n	8000736 <main+0xf6>
    }
    else if (rx_data[0] == 1)
 80006f4:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <main+0x17c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10c      	bne.n	8000716 <main+0xd6>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f929 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499); // Monter le moteur 1
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <main+0x170>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	22f4      	movs	r2, #244	@ 0xf4
 8000710:	32ff      	adds	r2, #255	@ 0xff
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
 8000714:	e00f      	b.n	8000736 <main+0xf6>
    }
    else if (rx_data[0] == 2)
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <main+0x17c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d10b      	bne.n	8000736 <main+0xf6>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800071e:	23a0      	movs	r3, #160	@ 0xa0
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f918 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499); // Descendre le moteur 1
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <main+0x170>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	22f4      	movs	r2, #244	@ 0xf4
 8000732:	32ff      	adds	r2, #255	@ 0xff
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Contrôle du moteur 2 (TIM1)
    if (rx_data[1] == 0)
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <main+0x17c>)
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10c      	bne.n	8000758 <main+0x118>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	0099      	lsls	r1, r3, #2
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f907 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Arrêt du moteur 2
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <main+0x174>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000756:	e022      	b.n	800079e <main+0x15e>
    }
    else if (rx_data[1] == 1)
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <main+0x17c>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10d      	bne.n	800077c <main+0x13c>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	0099      	lsls	r1, r3, #2
 8000764:	23a0      	movs	r3, #160	@ 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2200      	movs	r2, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f8f6 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499); // Monter le moteur 2
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <main+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	22f4      	movs	r2, #244	@ 0xf4
 8000776:	32ff      	adds	r2, #255	@ 0xff
 8000778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800077a:	e010      	b.n	800079e <main+0x15e>
    }
    else if (rx_data[1] == 2)
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <main+0x17c>)
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d10c      	bne.n	800079e <main+0x15e>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	0099      	lsls	r1, r3, #2
 8000788:	23a0      	movs	r3, #160	@ 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2201      	movs	r2, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f8e4 	bl	800195c <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499); // Descendre le moteur 2
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <main+0x174>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	22f4      	movs	r2, #244	@ 0xf4
 800079a:	32ff      	adds	r2, #255	@ 0xff
 800079c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    HAL_Delay(100); // Petit délai pour éviter de surcharger le terminal série
 800079e:	2064      	movs	r0, #100	@ 0x64
 80007a0:	f000 fdaa 	bl	80012f8 <HAL_Delay>
  {
 80007a4:	e781      	b.n	80006aa <main+0x6a>
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	08006444 	.word	0x08006444
 80007ac:	200001a4 	.word	0x200001a4
 80007b0:	200000c4 	.word	0x200000c4
 80007b4:	20000078 	.word	0x20000078
 80007b8:	50000800 	.word	0x50000800
 80007bc:	20000238 	.word	0x20000238
 80007c0:	20000110 	.word	0x20000110
 80007c4:	08006454 	.word	0x08006454

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b093      	sub	sp, #76	@ 0x4c
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2410      	movs	r4, #16
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2338      	movs	r3, #56	@ 0x38
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f005 f9a9 	bl	8005b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	003b      	movs	r3, r7
 80007e0:	0018      	movs	r0, r3
 80007e2:	2310      	movs	r3, #16
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f005 f9a2 	bl	8005b30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 f8eb 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2240      	movs	r2, #64	@ 0x40
 8000810:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2202      	movs	r2, #2
 800081c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2209      	movs	r2, #9
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	0292      	lsls	r2, r2, #10
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	22a0      	movs	r2, #160	@ 0xa0
 8000836:	0512      	lsls	r2, r2, #20
 8000838:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	05d2      	lsls	r2, r2, #23
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	187b      	adds	r3, r7, r1
 8000844:	0018      	movs	r0, r3
 8000846:	f001 f90d 	bl	8001a64 <HAL_RCC_OscConfig>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800084e:	f000 faa9 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	003b      	movs	r3, r7
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	003b      	movs	r3, r7
 800085a:	2202      	movs	r2, #2
 800085c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	003b      	movs	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	003b      	movs	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086a:	003b      	movs	r3, r7
 800086c:	2101      	movs	r1, #1
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fc12 	bl	8002098 <HAL_RCC_ClockConfig>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000878:	f000 fa94 	bl	8000da4 <Error_Handler>
  }
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b013      	add	sp, #76	@ 0x4c
 8000882:	bd90      	pop	{r4, r7, pc}

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	@ 0x70
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  // Initialisation spécifique de TIM1 si nécessaire
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	2360      	movs	r3, #96	@ 0x60
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	0018      	movs	r0, r3
 8000890:	2310      	movs	r3, #16
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f005 f94b 	bl	8005b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	2354      	movs	r3, #84	@ 0x54
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	230c      	movs	r3, #12
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 f943 	bl	8005b30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	2338      	movs	r3, #56	@ 0x38
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	0018      	movs	r0, r3
 80008b0:	231c      	movs	r3, #28
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f005 f93b 	bl	8005b30 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	2334      	movs	r3, #52	@ 0x34
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f005 f934 	bl	8005b30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  // Configuration supplémentaire avant initialisation
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c8:	4b51      	ldr	r3, [pc, #324]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008ca:	4a52      	ldr	r2, [pc, #328]	@ (8000a14 <MX_TIM1_Init+0x190>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80008ce:	4b50      	ldr	r3, [pc, #320]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008d0:	222f      	movs	r2, #47	@ 0x2f
 80008d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008da:	4b4d      	ldr	r3, [pc, #308]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008dc:	4a4e      	ldr	r2, [pc, #312]	@ (8000a18 <MX_TIM1_Init+0x194>)
 80008de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f2:	4b47      	ldr	r3, [pc, #284]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 ff31 	bl	800275c <HAL_TIM_Base_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008fe:	f000 fa51 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000902:	2160      	movs	r1, #96	@ 0x60
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	0152      	lsls	r2, r2, #5
 800090a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090c:	187a      	adds	r2, r7, r1
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f002 f9c4 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800091c:	f000 fa42 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000920:	4b3b      	ldr	r3, [pc, #236]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 8000922:	0018      	movs	r0, r3
 8000924:	f001 ff72 	bl	800280c <HAL_TIM_PWM_Init>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800092c:	f000 fa3a 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2154      	movs	r1, #84	@ 0x54
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	187a      	adds	r2, r7, r1
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fe90 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000954:	f000 fa26 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2138      	movs	r1, #56	@ 0x38
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2260      	movs	r2, #96	@ 0x60
 800095e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000984:	1879      	adds	r1, r7, r1
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 8000988:	2208      	movs	r2, #8
 800098a:	0018      	movs	r0, r3
 800098c:	f002 f888 	bl	8002aa0 <HAL_TIM_PWM_ConfigChannel>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000994:	f000 fa06 	bl	8000da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	0192      	lsls	r2, r2, #6
 80009bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2280      	movs	r2, #128	@ 0x80
 80009d4:	0492      	lsls	r2, r2, #18
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 feab 	bl	800374c <HAL_TIMEx_ConfigBreakDeadTime>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009fa:	f000 f9d3 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // Configuration post-initialisation si nécessaire
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fe:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <MX_TIM1_Init+0x18c>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fa4d 	bl	8000ea0 <HAL_TIM_MspPostInit>
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b01c      	add	sp, #112	@ 0x70
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40012c00 	.word	0x40012c00
 8000a18:	000003e7 	.word	0x000003e7

08000a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	@ 0x38
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  // Initialisation spécifique de TIM3 si nécessaire
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	2328      	movs	r3, #40	@ 0x28
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	0018      	movs	r0, r3
 8000a28:	2310      	movs	r3, #16
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f005 f87f 	bl	8005b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	231c      	movs	r3, #28
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	230c      	movs	r3, #12
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f005 f877 	bl	8005b30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	231c      	movs	r3, #28
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f005 f870 	bl	8005b30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */
  // Configuration supplémentaire avant initialisation
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a52:	4a30      	ldr	r2, [pc, #192]	@ (8000b14 <MX_TIM3_Init+0xf8>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000a56:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a58:	222f      	movs	r2, #47	@ 0x2f
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a64:	4a2c      	ldr	r2, [pc, #176]	@ (8000b18 <MX_TIM3_Init+0xfc>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 fe70 	bl	800275c <HAL_TIM_Base_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a80:	f000 f990 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	2128      	movs	r1, #40	@ 0x28
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0152      	lsls	r2, r2, #5
 8000a8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 f903 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a9e:	f000 f981 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 feb1 	bl	800280c <HAL_TIM_PWM_Init>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000aae:	f000 f979 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	211c      	movs	r1, #28
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac0:	187a      	adds	r2, r7, r1
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 fdd2 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000ad0:	f000 f968 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2260      	movs	r2, #96	@ 0x60
 8000ad8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	0039      	movs	r1, r7
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 ffd4 	bl	8002aa0 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000afc:	f000 f952 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // Configuration post-initialisation si nécessaire
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <MX_TIM3_Init+0xf4>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f9cc 	bl	8000ea0 <HAL_TIM_MspPostInit>
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b00e      	add	sp, #56	@ 0x38
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000c4 	.word	0x200000c4
 8000b14:	40000400 	.word	0x40000400
 8000b18:	000003e7 	.word	0x000003e7

08000b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  // Configuration supplémentaire avant initialisation
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b22:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <MX_USART1_UART_Init+0x98>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b26:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b28:	22e1      	movs	r2, #225	@ 0xe1
 8000b2a:	0252      	lsls	r2, r2, #9
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fe8c 	bl	8003884 <HAL_UART_Init>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f918 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f004 fed9 	bl	8005930 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f90f 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f004 ff10 	bl	80059b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f906 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f004 fe8e 	bl	80058bc <HAL_UARTEx_DisableFifoMode>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f8fe 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // Configuration post-initialisation si nécessaire
  /* USER CODE END USART1_Init 2 */
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	20000110 	.word	0x20000110
 8000bb4:	40013800 	.word	0x40013800

08000bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  // Configuration supplémentaire avant initialisation
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bbe:	4a24      	ldr	r2, [pc, #144]	@ (8000c50 <MX_USART2_UART_Init+0x98>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bc4:	22e1      	movs	r2, #225	@ 0xe1
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 fe3e 	bl	8003884 <HAL_UART_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f8ca 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	0018      	movs	r0, r3
 8000c16:	f004 fe8b 	bl	8005930 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f8c1 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f004 fec2 	bl	80059b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 f8b8 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f004 fe40 	bl	80058bc <HAL_UARTEx_DisableFifoMode>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f8b0 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  // Configuration post-initialisation si nécessaire
  /* USER CODE END USART2_Init 2 */
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	200001a4 	.word	0x200001a4
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	240c      	movs	r4, #12
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2314      	movs	r3, #20
 8000c62:	001a      	movs	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	f004 ff63 	bl	8005b30 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  // Initialisation supplémentaire des GPIO si nécessaire
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c70:	2104      	movs	r1, #4
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c76:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000caa:	2202      	movs	r2, #2
 8000cac:	4013      	ands	r3, r2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dir2_Pin|EN2_Pin|dir1_Pin, GPIO_PIN_RESET);
 8000cb2:	238c      	movs	r3, #140	@ 0x8c
 8000cb4:	0099      	lsls	r1, r3, #2
 8000cb6:	23a0      	movs	r3, #160	@ 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	2200      	movs	r2, #0
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fe4d 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_GPIO_Init+0xd4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2140      	movs	r1, #64	@ 0x40
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fe47 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dir2_Pin EN2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin|EN2_Pin|dir1_Pin;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	228c      	movs	r2, #140	@ 0x8c
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	193a      	adds	r2, r7, r4
 8000cea:	23a0      	movs	r3, #160	@ 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fccf 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2240      	movs	r2, #64	@ 0x40
 8000cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <MX_GPIO_Init+0xd4>)
 8000d14:	0019      	movs	r1, r3
 8000d16:	0010      	movs	r0, r2
 8000d18:	f000 fcbc 	bl	8001694 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Configuration supplémentaire des GPIO si nécessaire
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b009      	add	sp, #36	@ 0x24
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	50000800 	.word	0x50000800

08000d2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	@ 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_UART_RxCpltCallback+0x68>)
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d127      	bne.n	8000d8c <HAL_UART_RxCpltCallback+0x60>
  {
    // Convertir les données ASCII en valeurs numériques avant traitement
    rx_data[0] = rx_data[0] - '0'; // Convertir '2' (ASCII 50) en 2
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b30      	subs	r3, #48	@ 0x30
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d46:	701a      	strb	r2, [r3, #0]
    rx_data[1] = rx_data[1] - '0'; // Convertir '0' (ASCII 48) en 0
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	3b30      	subs	r3, #48	@ 0x30
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d52:	705a      	strb	r2, [r3, #1]

    // Afficher les données converties pour le débogage
    char debug_msg[32];
    sprintf(debug_msg, "Received: %d %d\r\n", rx_data[0], rx_data[1]);
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	490f      	ldr	r1, [pc, #60]	@ (8000d9c <HAL_UART_RxCpltCallback+0x70>)
 8000d60:	2408      	movs	r4, #8
 8000d62:	1938      	adds	r0, r7, r4
 8000d64:	f004 fec4 	bl	8005af0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff f9ca 	bl	8000104 <strlen>
 8000d70:	0003      	movs	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	1939      	adds	r1, r7, r4
 8000d7a:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <HAL_UART_RxCpltCallback+0x74>)
 8000d7c:	f002 fdd8 	bl	8003930 <HAL_UART_Transmit>

    // Relancer la réception des 2 prochains octets via USART1
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 2);
 8000d80:	4905      	ldr	r1, [pc, #20]	@ (8000d98 <HAL_UART_RxCpltCallback+0x6c>)
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <HAL_UART_RxCpltCallback+0x68>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fe76 	bl	8003a78 <HAL_UART_Receive_IT>
  }
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b00b      	add	sp, #44	@ 0x2c
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000110 	.word	0x20000110
 8000d98:	20000238 	.word	0x20000238
 8000d9c:	08006468 	.word	0x08006468
 8000da0:	200001a4 	.word	0x200001a4

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  // Boucle infinie avec clignotement sur PA5 pour indiquer une erreur
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Clignoter une LED ou sortie sur PA5
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	2120      	movs	r1, #32
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fdf1 	bl	8001996 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000db4:	23fa      	movs	r3, #250	@ 0xfa
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fa9d 	bl	80012f8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Clignoter une LED ou sortie sur PA5
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	e7f2      	b.n	8000da8 <Error_Handler+0x4>
	...

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_MspInit+0x44>)
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	0549      	lsls	r1, r1, #21
 8000dec:	430a      	orrs	r2, r1
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_MspInit+0x44>)
 8000df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	055b      	lsls	r3, r3, #21
 8000df8:	4013      	ands	r3, r2
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b093      	sub	sp, #76	@ 0x4c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	2414      	movs	r4, #20
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2334      	movs	r3, #52	@ 0x34
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f004 fe86 	bl	8005b30 <memset>
  if(htim_base->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <HAL_TIM_Base_MspInit+0x88>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d11d      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	0392      	lsls	r2, r2, #14
 8000e34:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 fad4 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000e48:	f7ff ffac 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	0109      	lsls	r1, r1, #4
 8000e56:	430a      	orrs	r2, r1
 8000e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e68:	e010      	b.n	8000e8c <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_TIM_Base_MspInit+0x90>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10b      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_TIM_Base_MspInit+0x8c>)
 8000e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e84:	2202      	movs	r2, #2
 8000e86:	4013      	ands	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b013      	add	sp, #76	@ 0x4c
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40000400 	.word	0x40000400

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	2414      	movs	r4, #20
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f004 fe3c 	bl	8005b30 <memset>
  if(htim->Instance==TIM1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <HAL_TIM_MspPostInit+0xc4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d124      	bne.n	8000f0c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ec6:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	0021      	movs	r1, r4
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2202      	movs	r2, #2
 8000efa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8000efc:	187a      	adds	r2, r7, r1
 8000efe:	23a0      	movs	r3, #160	@ 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fbc5 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f0a:	e027      	b.n	8000f5c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a16      	ldr	r2, [pc, #88]	@ (8000f6c <HAL_TIM_MspPostInit+0xcc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d122      	bne.n	8000f5c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_TIM_MspPostInit+0xc8>)
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = step2_Pin;
 8000f2e:	2114      	movs	r1, #20
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2240      	movs	r2, #64	@ 0x40
 8000f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2202      	movs	r2, #2
 8000f3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	187a      	adds	r2, r7, r1
 8000f50:	23a0      	movs	r3, #160	@ 0xa0
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fb9c 	bl	8001694 <HAL_GPIO_Init>
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b00b      	add	sp, #44	@ 0x2c
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40000400 	.word	0x40000400

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b099      	sub	sp, #100	@ 0x64
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	234c      	movs	r3, #76	@ 0x4c
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2314      	movs	r3, #20
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f004 fdd4 	bl	8005b30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	2418      	movs	r4, #24
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2334      	movs	r3, #52	@ 0x34
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f004 fdcc 	bl	8005b30 <memset>
  if(huart->Instance==USART1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a49      	ldr	r2, [pc, #292]	@ (80010c4 <HAL_UART_MspInit+0x154>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d146      	bne.n	8001030 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f001 fa1b 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fba:	f7ff fef3 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbe:	4b42      	ldr	r3, [pc, #264]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc2:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	01c9      	lsls	r1, r1, #7
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fde:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe6:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff2:	214c      	movs	r1, #76	@ 0x4c
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	22c0      	movs	r2, #192	@ 0xc0
 8000ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	187b      	adds	r3, r7, r1
 8001014:	4a2d      	ldr	r2, [pc, #180]	@ (80010cc <HAL_UART_MspInit+0x15c>)
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f000 fb3b 	bl	8001694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201b      	movs	r0, #27
 8001024:	f000 fa38 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001028:	201b      	movs	r0, #27
 800102a:	f000 fa4a 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102e:	e044      	b.n	80010ba <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <HAL_UART_MspInit+0x160>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d13f      	bne.n	80010ba <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103a:	2118      	movs	r1, #24
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2202      	movs	r2, #2
 8001040:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	187b      	adds	r3, r7, r1
 800104a:	0018      	movs	r0, r3
 800104c:	f001 f9ce 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8001054:	f7ff fea6 	bl	8000da4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 800105a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0289      	lsls	r1, r1, #10
 8001062:	430a      	orrs	r2, r1
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8001068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	4013      	ands	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8001076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_UART_MspInit+0x158>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001084:	2201      	movs	r2, #1
 8001086:	4013      	ands	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108c:	214c      	movs	r1, #76	@ 0x4c
 800108e:	187b      	adds	r3, r7, r1
 8001090:	220c      	movs	r2, #12
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 faed 	bl	8001694 <HAL_GPIO_Init>
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b019      	add	sp, #100	@ 0x64
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	50000400 	.word	0x50000400
 80010d0:	40004400 	.word	0x40004400

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	e7fd      	b.n	80010d8 <NMI_Handler+0x4>

080010dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	e7fd      	b.n	80010e0 <HardFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8e0 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <USART1_IRQHandler+0x14>)
 800110e:	0018      	movs	r0, r3
 8001110:	f002 fd10 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	20000110 	.word	0x20000110

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f004 fcf6 	bl	8005b40 <__errno>
 8001154:	0003      	movs	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	18d2      	adds	r2, r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <_sbrk+0x64>)
 8001170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20009000 	.word	0x20009000
 8001180:	00000400 	.word	0x00000400
 8001184:	2000023c 	.word	0x2000023c
 8001188:	20000390 	.word	0x20000390

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001198:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800119c:	f7ff fff6 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011c6:	f004 fcc1 	bl	8005b4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011ca:	f7ff fa39 	bl	8000640 <main>

080011ce <LoopForever>:

LoopForever:
  b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   r0, =_estack
 80011d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011dc:	0800659c 	.word	0x0800659c
  ldr r2, =_sbss
 80011e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011e4:	2000038c 	.word	0x2000038c

080011e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_COMP_IRQHandler>
	...

080011ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_Init+0x3c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_Init+0x3c>)
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	0049      	lsls	r1, r1, #1
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001206:	2003      	movs	r0, #3
 8001208:	f000 f810 	bl	800122c <HAL_InitTick>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d003      	beq.n	8001218 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e001      	b.n	800121c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fdd4 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_InitTick+0x88>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d02b      	beq.n	800129c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <HAL_InitTick+0x8c>)
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_InitTick+0x88>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	0019      	movs	r1, r3
 800124e:	23fa      	movs	r3, #250	@ 0xfa
 8001250:	0098      	lsls	r0, r3, #2
 8001252:	f7fe ff69 	bl	8000128 <__udivsi3>
 8001256:	0003      	movs	r3, r0
 8001258:	0019      	movs	r1, r3
 800125a:	0020      	movs	r0, r4
 800125c:	f7fe ff64 	bl	8000128 <__udivsi3>
 8001260:	0003      	movs	r3, r0
 8001262:	0018      	movs	r0, r3
 8001264:	f000 f93d 	bl	80014e2 <HAL_SYSTICK_Config>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d112      	bne.n	8001292 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d80a      	bhi.n	8001288 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2301      	movs	r3, #1
 8001276:	425b      	negs	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f90c 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_InitTick+0x90>)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e00d      	b.n	80012a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e008      	b.n	80012a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e003      	b.n	80012a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b005      	add	sp, #20
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	18d2      	adds	r2, r2, r3
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_IncTick+0x20>)
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000240 	.word	0x20000240

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	@ (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	20000240 	.word	0x20000240

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fff0 	bl	80012e4 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	001a      	movs	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	189b      	adds	r3, r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	f7ff ffe0 	bl	80012e4 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b7f      	cmp	r3, #127	@ 0x7f
 8001352:	d809      	bhi.n	8001368 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	231f      	movs	r3, #31
 800135c:	401a      	ands	r2, r3
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <__NVIC_EnableIRQ+0x30>)
 8001360:	2101      	movs	r1, #1
 8001362:	4091      	lsls	r1, r2
 8001364:	000a      	movs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b7f      	cmp	r3, #127	@ 0x7f
 8001388:	d828      	bhi.n	80013dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138a:	4a2f      	ldr	r2, [pc, #188]	@ (8001448 <__NVIC_SetPriority+0xd4>)
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	33c0      	adds	r3, #192	@ 0xc0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	589b      	ldr	r3, [r3, r2]
 800139a:	1dfa      	adds	r2, r7, #7
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	0011      	movs	r1, r2
 80013a0:	2203      	movs	r2, #3
 80013a2:	400a      	ands	r2, r1
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	21ff      	movs	r1, #255	@ 0xff
 80013a8:	4091      	lsls	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	43d2      	mvns	r2, r2
 80013ae:	401a      	ands	r2, r3
 80013b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	22ff      	movs	r2, #255	@ 0xff
 80013b8:	401a      	ands	r2, r3
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	2303      	movs	r3, #3
 80013c2:	4003      	ands	r3, r0
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	481f      	ldr	r0, [pc, #124]	@ (8001448 <__NVIC_SetPriority+0xd4>)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	430a      	orrs	r2, r1
 80013d4:	33c0      	adds	r3, #192	@ 0xc0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013da:	e031      	b.n	8001440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <__NVIC_SetPriority+0xd8>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
 80013e4:	230f      	movs	r3, #15
 80013e6:	400b      	ands	r3, r1
 80013e8:	3b08      	subs	r3, #8
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3306      	adds	r3, #6
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	3304      	adds	r3, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1dfa      	adds	r2, r7, #7
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	0011      	movs	r1, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	400a      	ands	r2, r1
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	21ff      	movs	r1, #255	@ 0xff
 8001404:	4091      	lsls	r1, r2
 8001406:	000a      	movs	r2, r1
 8001408:	43d2      	mvns	r2, r2
 800140a:	401a      	ands	r2, r3
 800140c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	22ff      	movs	r2, #255	@ 0xff
 8001414:	401a      	ands	r2, r3
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	2303      	movs	r3, #3
 800141e:	4003      	ands	r3, r0
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <__NVIC_SetPriority+0xd8>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001c      	movs	r4, r3
 800142c:	230f      	movs	r3, #15
 800142e:	4023      	ands	r3, r4
 8001430:	3b08      	subs	r3, #8
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	430a      	orrs	r2, r1
 8001436:	3306      	adds	r3, #6
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	18c3      	adds	r3, r0, r3
 800143c:	3304      	adds	r3, #4
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b003      	add	sp, #12
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	045b      	lsls	r3, r3, #17
 8001460:	429a      	cmp	r2, r3
 8001462:	d301      	bcc.n	8001468 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001464:	2301      	movs	r3, #1
 8001466:	e010      	b.n	800148a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <SysTick_Config+0x44>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	3a01      	subs	r2, #1
 800146e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001470:	2301      	movs	r3, #1
 8001472:	425b      	negs	r3, r3
 8001474:	2103      	movs	r1, #3
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff ff7c 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x44>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	0002      	movs	r2, r0
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff ff33 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ffaf 	bl	8001450 <SysTick_Config>
 80014f2:	0003      	movs	r3, r0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e050      	b.n	80015b0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2225      	movs	r2, #37	@ 0x25
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d008      	beq.n	800152c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2204      	movs	r2, #4
 800151e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e041      	b.n	80015b0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	210e      	movs	r1, #14
 8001538:	438a      	bics	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	491c      	ldr	r1, [pc, #112]	@ (80015b8 <HAL_DMA_Abort+0xbc>)
 8001548:	400a      	ands	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_DMA_Abort+0xc0>)
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	221c      	movs	r2, #28
 8001566:	4013      	ands	r3, r2
 8001568:	2201      	movs	r2, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_DMA_Abort+0xc0>)
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800157a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00c      	beq.n	800159e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158e:	490a      	ldr	r1, [pc, #40]	@ (80015b8 <HAL_DMA_Abort+0xbc>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800159c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2225      	movs	r2, #37	@ 0x25
 80015a2:	2101      	movs	r1, #1
 80015a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2224      	movs	r2, #36	@ 0x24
 80015aa:	2100      	movs	r1, #0
 80015ac:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	fffffeff 	.word	0xfffffeff
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	210f      	movs	r1, #15
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2225      	movs	r2, #37	@ 0x25
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d006      	beq.n	80015ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e049      	b.n	800167e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	210e      	movs	r1, #14
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	491d      	ldr	r1, [pc, #116]	@ (800168c <HAL_DMA_Abort_IT+0xcc>)
 8001616:	400a      	ands	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800161a:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <HAL_DMA_Abort_IT+0xd0>)
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	221c      	movs	r2, #28
 8001624:	4013      	ands	r3, r2
 8001626:	2201      	movs	r2, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_DMA_Abort_IT+0xd0>)
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001638:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800164c:	490f      	ldr	r1, [pc, #60]	@ (800168c <HAL_DMA_Abort_IT+0xcc>)
 800164e:	400a      	ands	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800165a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2225      	movs	r2, #37	@ 0x25
 8001660:	2101      	movs	r1, #1
 8001662:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	0010      	movs	r0, r2
 800167c:	4798      	blx	r3
    }
  }
  return status;
 800167e:	230f      	movs	r3, #15
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}
 800168c:	fffffeff 	.word	0xfffffeff
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e147      	b.n	8001934 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d100      	bne.n	80016bc <HAL_GPIO_Init+0x28>
 80016ba:	e138      	b.n	800192e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d005      	beq.n	80016d4 <HAL_GPIO_Init+0x40>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d130      	bne.n	8001736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	43da      	mvns	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170a:	2201      	movs	r2, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	2201      	movs	r2, #1
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	4013      	ands	r3, r2
 800173e:	2b03      	cmp	r3, #3
 8001740:	d017      	beq.n	8001772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	43da      	mvns	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	4013      	ands	r3, r2
 800177a:	2b02      	cmp	r3, #2
 800177c:	d123      	bne.n	80017c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	58d3      	ldr	r3, [r2, r3]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2207      	movs	r2, #7
 8001790:	4013      	ands	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2107      	movs	r1, #7
 80017aa:	400b      	ands	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	6939      	ldr	r1, [r7, #16]
 80017c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	401a      	ands	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	23c0      	movs	r3, #192	@ 0xc0
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	4013      	ands	r3, r2
 8001804:	d100      	bne.n	8001808 <HAL_GPIO_Init+0x174>
 8001806:	e092      	b.n	800192e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001808:	4a50      	ldr	r2, [pc, #320]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3318      	adds	r3, #24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	589b      	ldr	r3, [r3, r2]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2203      	movs	r2, #3
 800181a:	4013      	ands	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	220f      	movs	r2, #15
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	23a0      	movs	r3, #160	@ 0xa0
 8001830:	05db      	lsls	r3, r3, #23
 8001832:	429a      	cmp	r2, r3
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x1ca>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a45      	ldr	r2, [pc, #276]	@ (8001950 <HAL_GPIO_Init+0x2bc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x1c6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a44      	ldr	r2, [pc, #272]	@ (8001954 <HAL_GPIO_Init+0x2c0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x1c2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a43      	ldr	r2, [pc, #268]	@ (8001958 <HAL_GPIO_Init+0x2c4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x1be>
 800184e:	2303      	movs	r3, #3
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x1cc>
 8001852:	2305      	movs	r3, #5
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x1cc>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x1cc>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x1cc>
 800185e:	2300      	movs	r3, #0
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	2103      	movs	r1, #3
 8001864:	400a      	ands	r2, r1
 8001866:	00d2      	lsls	r2, r2, #3
 8001868:	4093      	lsls	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001870:	4936      	ldr	r1, [pc, #216]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3318      	adds	r3, #24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800187e:	4b33      	ldr	r3, [pc, #204]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	035b      	lsls	r3, r3, #13
 8001896:	4013      	ands	r3, r2
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	039b      	lsls	r3, r3, #14
 80018c0:	4013      	ands	r3, r2
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d2:	4a1e      	ldr	r2, [pc, #120]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 80018d4:	2384      	movs	r3, #132	@ 0x84
 80018d6:	58d3      	ldr	r3, [r2, r3]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4914      	ldr	r1, [pc, #80]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 80018fa:	2284      	movs	r2, #132	@ 0x84
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	58d3      	ldr	r3, [r2, r3]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001926:	4909      	ldr	r1, [pc, #36]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	40da      	lsrs	r2, r3
 800193c:	1e13      	subs	r3, r2, #0
 800193e:	d000      	beq.n	8001942 <HAL_GPIO_Init+0x2ae>
 8001940:	e6b0      	b.n	80016a4 <HAL_GPIO_Init+0x10>
  }
}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021800 	.word	0x40021800
 8001950:	50000400 	.word	0x50000400
 8001954:	50000800 	.word	0x50000800
 8001958:	50000c00 	.word	0x50000c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	0008      	movs	r0, r1
 8001966:	0011      	movs	r1, r2
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	1c02      	adds	r2, r0, #0
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	1c7b      	adds	r3, r7, #1
 8001970:	1c0a      	adds	r2, r1, #0
 8001972:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001974:	1c7b      	adds	r3, r7, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197c:	1cbb      	adds	r3, r7, #2
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001984:	e003      	b.n	800198e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001986:	1cbb      	adds	r3, r7, #2
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	000a      	movs	r2, r1
 80019a0:	1cbb      	adds	r3, r7, #2
 80019a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019aa:	1cbb      	adds	r3, r7, #2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	041a      	lsls	r2, r3, #16
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	1cb9      	adds	r1, r7, #2
 80019ba:	8809      	ldrh	r1, [r1, #0]
 80019bc:	400b      	ands	r3, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d11f      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	0013      	movs	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	189b      	adds	r3, r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4912      	ldr	r1, [pc, #72]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fb92 	bl	8000128 <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0a:	e008      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e001      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e009      	b.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	401a      	ands	r2, r3
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d0ed      	beq.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	fffff9ff 	.word	0xfffff9ff
 8001a44:	20000000 	.word	0x20000000
 8001a48:	000f4240 	.word	0x000f4240

08001a4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	23e0      	movs	r3, #224	@ 0xe0
 8001a56:	01db      	lsls	r3, r3, #7
 8001a58:	4013      	ands	r3, r2
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e2fe      	b.n	8002074 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1e>
 8001a80:	e07c      	b.n	8001b7c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4bc3      	ldr	r3, [pc, #780]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	@ 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8c:	4bc0      	ldr	r3, [pc, #768]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2203      	movs	r2, #3
 8001a92:	4013      	ands	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3e>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4bb9      	ldr	r3, [pc, #740]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d062      	beq.n	8001b7a <HAL_RCC_OscConfig+0x116>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d15e      	bne.n	8001b7a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2d9      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x78>
 8001acc:	4bb0      	ldr	r3, [pc, #704]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4baf      	ldr	r3, [pc, #700]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0249      	lsls	r1, r1, #9
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e020      	b.n	8001b1e <HAL_RCC_OscConfig+0xba>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	23a0      	movs	r3, #160	@ 0xa0
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10e      	bne.n	8001b06 <HAL_RCC_OscConfig+0xa2>
 8001ae8:	4ba9      	ldr	r3, [pc, #676]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4ba8      	ldr	r3, [pc, #672]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	02c9      	lsls	r1, r1, #11
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4ba6      	ldr	r3, [pc, #664]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4ba5      	ldr	r3, [pc, #660]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	0249      	lsls	r1, r1, #9
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0xba>
 8001b06:	4ba2      	ldr	r3, [pc, #648]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	49a1      	ldr	r1, [pc, #644]	@ (8001d94 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4b9f      	ldr	r3, [pc, #636]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b9e      	ldr	r3, [pc, #632]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	499f      	ldr	r1, [pc, #636]	@ (8001d98 <HAL_RCC_OscConfig+0x334>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d014      	beq.n	8001b50 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff fbdd 	bl	80012e4 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fbd8 	bl	80012e4 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e298      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	4b93      	ldr	r3, [pc, #588]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	029b      	lsls	r3, r3, #10
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xcc>
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fbc8 	bl	80012e4 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fbc3 	bl	80012e4 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	@ 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e283      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6c:	4b88      	ldr	r3, [pc, #544]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0xf6>
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d100      	bne.n	8001b88 <HAL_RCC_OscConfig+0x124>
 8001b86:	e099      	b.n	8001cbc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b88:	4b81      	ldr	r3, [pc, #516]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2238      	movs	r2, #56	@ 0x38
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b92:	4b7f      	ldr	r3, [pc, #508]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2203      	movs	r2, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x144>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d002      	beq.n	8001bae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d135      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bae:	4b78      	ldr	r3, [pc, #480]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x162>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e256      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a74      	ldr	r2, [pc, #464]	@ (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	021a      	lsls	r2, r3, #8
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001be2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	@ (8001da0 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	4b67      	ldr	r3, [pc, #412]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bf6:	4b66      	ldr	r3, [pc, #408]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0adb      	lsrs	r3, r3, #11
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	4013      	ands	r3, r2
 8001c00:	4a68      	ldr	r2, [pc, #416]	@ (8001da4 <HAL_RCC_OscConfig+0x340>)
 8001c02:	40da      	lsrs	r2, r3
 8001c04:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x344>)
 8001c06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x348>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fb0d 	bl	800122c <HAL_InitTick>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d051      	beq.n	8001cba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e22c      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d030      	beq.n	8001c84 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c22:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5e      	ldr	r2, [pc, #376]	@ (8001da0 <HAL_RCC_OscConfig+0x33c>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	4b57      	ldr	r3, [pc, #348]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c36:	4b56      	ldr	r3, [pc, #344]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b55      	ldr	r3, [pc, #340]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	2180      	movs	r1, #128	@ 0x80
 8001c3e:	0049      	lsls	r1, r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb4e 	bl	80012e4 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fb49 	bl	80012e4 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e209      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	4b4b      	ldr	r3, [pc, #300]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b48      	ldr	r3, [pc, #288]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a4a      	ldr	r2, [pc, #296]	@ (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	021a      	lsls	r2, r3, #8
 8001c7c:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	e01b      	b.n	8001cbc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c84:	4b42      	ldr	r3, [pc, #264]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	4949      	ldr	r1, [pc, #292]	@ (8001db0 <HAL_RCC_OscConfig+0x34c>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb28 	bl	80012e4 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb23 	bl	80012e4 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1e3      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cac:	4b38      	ldr	r3, [pc, #224]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x236>
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d047      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cc6:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2238      	movs	r2, #56	@ 0x38
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b18      	cmp	r3, #24
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d03c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d138      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e1c5      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d019      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cf4:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff faf2 	bl	80012e4 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff faed 	bl	80012e4 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1ad      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d0f1      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2a2>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fad8 	bl	80012e4 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fad3 	bl	80012e4 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e193      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f1      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2fe>
 8001d60:	e0c6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	231f      	movs	r3, #31
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2238      	movs	r2, #56	@ 0x38
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d11e      	bne.n	8001db4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCC_OscConfig+0x31e>
 8001d80:	e0b6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x48c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d000      	beq.n	8001d8c <HAL_RCC_OscConfig+0x328>
 8001d8a:	e0b1      	b.n	8001ef0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e171      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	fffeffff 	.word	0xfffeffff
 8001d98:	fffbffff 	.word	0xfffbffff
 8001d9c:	ffff80ff 	.word	0xffff80ff
 8001da0:	ffffc7ff 	.word	0xffffc7ff
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004
 8001db0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001db4:	4bb1      	ldr	r3, [pc, #708]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	055b      	lsls	r3, r3, #21
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x360>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x362>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d011      	beq.n	8001dee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4bac      	ldr	r3, [pc, #688]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dce:	4bab      	ldr	r3, [pc, #684]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0549      	lsls	r1, r1, #21
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dd8:	4ba8      	ldr	r3, [pc, #672]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	055b      	lsls	r3, r3, #21
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001de6:	231f      	movs	r3, #31
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dee:	4ba4      	ldr	r3, [pc, #656]	@ (8002080 <HAL_RCC_OscConfig+0x61c>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	d11a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8002080 <HAL_RCC_OscConfig+0x61c>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4ba0      	ldr	r3, [pc, #640]	@ (8002080 <HAL_RCC_OscConfig+0x61c>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	0049      	lsls	r1, r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa6c 	bl	80012e4 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff fa67 	bl	80012e4 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e127      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e24:	4b96      	ldr	r3, [pc, #600]	@ (8002080 <HAL_RCC_OscConfig+0x61c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3e2>
 8001e38:	4b90      	ldr	r3, [pc, #576]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x404>
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e52:	4b8a      	ldr	r3, [pc, #552]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e54:	2104      	movs	r1, #4
 8001e56:	430a      	orrs	r2, r1
 8001e58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e5a:	4b88      	ldr	r3, [pc, #544]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e5e:	4b87      	ldr	r3, [pc, #540]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
 8001e68:	4b84      	ldr	r3, [pc, #528]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e6c:	4b83      	ldr	r3, [pc, #524]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e74:	4b81      	ldr	r3, [pc, #516]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e78:	4b80      	ldr	r3, [pc, #512]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d014      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa2c 	bl	80012e4 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff fa27 	bl	80012e4 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a79      	ldr	r2, [pc, #484]	@ (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0e6      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea6:	4b75      	ldr	r3, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x42e>
 8001eb0:	e013      	b.n	8001eda <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fa17 	bl	80012e4 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fa12 	bl	80012e4 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0d1      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001eda:	231f      	movs	r3, #31
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b65      	ldr	r3, [pc, #404]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee8:	4b64      	ldr	r3, [pc, #400]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001eea:	4967      	ldr	r1, [pc, #412]	@ (8002088 <HAL_RCC_OscConfig+0x624>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x496>
 8001ef8:	e0bb      	b.n	8002072 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efa:	4b60      	ldr	r3, [pc, #384]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2238      	movs	r2, #56	@ 0x38
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d100      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4a4>
 8001f06:	e07b      	b.n	8002000 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d156      	bne.n	8001fbe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b5a      	ldr	r3, [pc, #360]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f16:	495d      	ldr	r1, [pc, #372]	@ (800208c <HAL_RCC_OscConfig+0x628>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f9e2 	bl	80012e4 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f9dd 	bl	80012e4 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e09d      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	049b      	lsls	r3, r3, #18
 8001f40:	4013      	ands	r3, r2
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a51      	ldr	r2, [pc, #324]	@ (8002090 <HAL_RCC_OscConfig+0x62c>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	431a      	orrs	r2, r3
 8001f72:	4b42      	ldr	r3, [pc, #264]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b40      	ldr	r3, [pc, #256]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	0449      	lsls	r1, r1, #17
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	0549      	lsls	r1, r1, #21
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f9a6 	bl	80012e4 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff f9a1 	bl	80012e4 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e061      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb0:	4b32      	ldr	r3, [pc, #200]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	049b      	lsls	r3, r3, #18
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x53a>
 8001fbc:	e059      	b.n	8002072 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001fc4:	4931      	ldr	r1, [pc, #196]	@ (800208c <HAL_RCC_OscConfig+0x628>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f98b 	bl	80012e4 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff f986 	bl	80012e4 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e046      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	049b      	lsls	r3, r3, #18
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 8001ff8:	4926      	ldr	r1, [pc, #152]	@ (8002094 <HAL_RCC_OscConfig+0x630>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e038      	b.n	8002072 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e033      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCC_OscConfig+0x618>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2203      	movs	r2, #3
 8002016:	401a      	ands	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d126      	bne.n	800206e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2270      	movs	r2, #112	@ 0x70
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d11f      	bne.n	800206e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	23fe      	movs	r3, #254	@ 0xfe
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d116      	bne.n	800206e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	23f8      	movs	r3, #248	@ 0xf8
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d10e      	bne.n	800206e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	23e0      	movs	r3, #224	@ 0xe0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0f5b      	lsrs	r3, r3, #29
 8002064:	075a      	lsls	r2, r3, #29
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b008      	add	sp, #32
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
 8002084:	00001388 	.word	0x00001388
 8002088:	efffffff 	.word	0xefffffff
 800208c:	feffffff 	.word	0xfeffffff
 8002090:	11c1808c 	.word	0x11c1808c
 8002094:	eefefffc 	.word	0xeefefffc

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0e9      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2207      	movs	r2, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d91e      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2207      	movs	r2, #7
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	4b70      	ldr	r3, [pc, #448]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f90a 	bl	80012e4 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7ff f905 	bl	80012e4 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a6a      	ldr	r2, [pc, #424]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0ca      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ea:	4b67      	ldr	r3, [pc, #412]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2207      	movs	r2, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d015      	beq.n	800212e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d006      	beq.n	800211a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800210c:	4b60      	ldr	r3, [pc, #384]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b5f      	ldr	r3, [pc, #380]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002112:	21e0      	movs	r1, #224	@ 0xe0
 8002114:	01c9      	lsls	r1, r1, #7
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211a:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a5d      	ldr	r2, [pc, #372]	@ (8002294 <HAL_RCC_ClockConfig+0x1fc>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b59      	ldr	r3, [pc, #356]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d057      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002140:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	4013      	ands	r3, r2
 800214a:	d12b      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e097      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d107      	bne.n	8002168 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002158:	4b4d      	ldr	r3, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	049b      	lsls	r3, r3, #18
 8002160:	4013      	ands	r3, r2
 8002162:	d11f      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e08b      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4013      	ands	r3, r2
 800217a:	d113      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e07f      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d106      	bne.n	8002196 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002188:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e074      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b3e      	ldr	r3, [pc, #248]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2207      	movs	r2, #7
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7ff f894 	bl	80012e4 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c2:	f7ff f88f 	bl	80012e4 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e054      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2238      	movs	r2, #56	@ 0x38
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1ec      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2207      	movs	r2, #7
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d21e      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4393      	bics	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002208:	f7ff f86c 	bl	80012e4 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002210:	e009      	b.n	8002226 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7ff f867 	bl	80012e4 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e02c      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4013      	ands	r3, r2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a15      	ldr	r2, [pc, #84]	@ (8002298 <HAL_RCC_ClockConfig+0x200>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002252:	f000 f829 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002256:	0001      	movs	r1, r0
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	220f      	movs	r2, #15
 8002260:	401a      	ands	r2, r3
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_RCC_ClockConfig+0x204>)
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	58d3      	ldr	r3, [r2, r3]
 8002268:	221f      	movs	r2, #31
 800226a:	4013      	ands	r3, r2
 800226c:	000a      	movs	r2, r1
 800226e:	40da      	lsrs	r2, r3
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x208>)
 8002272:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCC_ClockConfig+0x20c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7fe ffd7 	bl	800122c <HAL_InitTick>
 800227e:	0003      	movs	r3, r0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40022000 	.word	0x40022000
 800228c:	00001388 	.word	0x00001388
 8002290:	40021000 	.word	0x40021000
 8002294:	fffff0ff 	.word	0xfffff0ff
 8002298:	ffff8fff 	.word	0xffff8fff
 800229c:	0800647c 	.word	0x0800647c
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004

080022a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2238      	movs	r2, #56	@ 0x38
 80022b4:	4013      	ands	r3, r2
 80022b6:	d10f      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022b8:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0adb      	lsrs	r3, r3, #11
 80022be:	2207      	movs	r2, #7
 80022c0:	4013      	ands	r3, r2
 80022c2:	2201      	movs	r2, #1
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	4835      	ldr	r0, [pc, #212]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ce:	f7fd ff2b 	bl	8000128 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e05d      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2238      	movs	r2, #56	@ 0x38
 80022de:	4013      	ands	r3, r2
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e4:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e054      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2238      	movs	r2, #56	@ 0x38
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d138      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	2207      	movs	r2, #7
 8002308:	4013      	ands	r3, r2
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d10d      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4824      	ldr	r0, [pc, #144]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002318:	f7fd ff06 	bl	8000128 <__udivsi3>
 800231c:	0003      	movs	r3, r0
 800231e:	0019      	movs	r1, r3
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	227f      	movs	r2, #127	@ 0x7f
 8002328:	4013      	ands	r3, r2
 800232a:	434b      	muls	r3, r1
 800232c:	617b      	str	r3, [r7, #20]
        break;
 800232e:	e00d      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	481c      	ldr	r0, [pc, #112]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002334:	f7fd fef8 	bl	8000128 <__udivsi3>
 8002338:	0003      	movs	r3, r0
 800233a:	0019      	movs	r1, r3
 800233c:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	227f      	movs	r2, #127	@ 0x7f
 8002344:	4013      	ands	r3, r2
 8002346:	434b      	muls	r3, r1
 8002348:	617b      	str	r3, [r7, #20]
        break;
 800234a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0f5b      	lsrs	r3, r3, #29
 8002352:	2207      	movs	r2, #7
 8002354:	4013      	ands	r3, r2
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7fd fee3 	bl	8000128 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e015      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2238      	movs	r2, #56	@ 0x38
 800236e:	4013      	ands	r3, r2
 8002370:	2b20      	cmp	r3, #32
 8002372:	d103      	bne.n	800237c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2238      	movs	r2, #56	@ 0x38
 8002382:	4013      	ands	r3, r2
 8002384:	2b18      	cmp	r3, #24
 8002386:	d103      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002388:	23fa      	movs	r3, #250	@ 0xfa
 800238a:	01db      	lsls	r3, r3, #7
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e001      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002394:	693b      	ldr	r3, [r7, #16]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	@ (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	0004      	movs	r4, r0
 80023ca:	f7ff fb3f 	bl	8001a4c <LL_RCC_GetAPB1Prescaler>
 80023ce:	0003      	movs	r3, r0
 80023d0:	0b1a      	lsrs	r2, r3, #12
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	58d3      	ldr	r3, [r2, r3]
 80023d8:	221f      	movs	r2, #31
 80023da:	4013      	ands	r3, r2
 80023dc:	40dc      	lsrs	r4, r3
 80023de:	0023      	movs	r3, r4
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bdb0      	pop	{r4, r5, r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	080064bc 	.word	0x080064bc

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023f4:	2313      	movs	r3, #19
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023fc:	2312      	movs	r3, #18
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002410:	e0a3      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2011      	movs	r0, #17
 8002414:	183b      	adds	r3, r7, r0
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4bc3      	ldr	r3, [pc, #780]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	055b      	lsls	r3, r3, #21
 8002422:	4013      	ands	r3, r2
 8002424:	d110      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4bc0      	ldr	r3, [pc, #768]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800242a:	4bbf      	ldr	r3, [pc, #764]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	2180      	movs	r1, #128	@ 0x80
 800242e:	0549      	lsls	r1, r1, #21
 8002430:	430a      	orrs	r2, r1
 8002432:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002434:	4bbc      	ldr	r3, [pc, #752]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	055b      	lsls	r3, r3, #21
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	183b      	adds	r3, r7, r0
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4bb8      	ldr	r3, [pc, #736]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4bb7      	ldr	r3, [pc, #732]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800244e:	2180      	movs	r1, #128	@ 0x80
 8002450:	0049      	lsls	r1, r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002456:	f7fe ff45 	bl	80012e4 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800245e:	e00b      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002460:	f7fe ff40 	bl	80012e4 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d904      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800246e:	2313      	movs	r3, #19
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2203      	movs	r2, #3
 8002474:	701a      	strb	r2, [r3, #0]
        break;
 8002476:	e005      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002478:	4bac      	ldr	r3, [pc, #688]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d0ed      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002484:	2313      	movs	r3, #19
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d154      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800248e:	4ba6      	ldr	r3, [pc, #664]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002492:	23c0      	movs	r3, #192	@ 0xc0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4013      	ands	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d019      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d014      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024aa:	4b9f      	ldr	r3, [pc, #636]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	4aa0      	ldr	r2, [pc, #640]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	0249      	lsls	r1, r1, #9
 80024be:	430a      	orrs	r2, r1
 80024c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024c2:	4b99      	ldr	r3, [pc, #612]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024c6:	4b98      	ldr	r3, [pc, #608]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c8:	499a      	ldr	r1, [pc, #616]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ce:	4b96      	ldr	r3, [pc, #600]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d016      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff02 	bl	80012e4 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	e00c      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fefd 	bl	80012e4 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a91      	ldr	r2, [pc, #580]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d904      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024f6:	2313      	movs	r3, #19
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
            break;
 80024fe:	e004      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002500:	4b89      	ldr	r3, [pc, #548]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2202      	movs	r2, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d0ed      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800250a:	2313      	movs	r3, #19
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002514:	4b84      	ldr	r3, [pc, #528]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	4a85      	ldr	r2, [pc, #532]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002522:	4b81      	ldr	r3, [pc, #516]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002524:	430a      	orrs	r2, r1
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002528:	e00c      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800252a:	2312      	movs	r3, #18
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2213      	movs	r2, #19
 8002530:	18ba      	adds	r2, r7, r2
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e005      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	2312      	movs	r3, #18
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2213      	movs	r2, #19
 800253e:	18ba      	adds	r2, r7, r2
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002544:	2311      	movs	r3, #17
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b76      	ldr	r3, [pc, #472]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002552:	4b75      	ldr	r3, [pc, #468]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002554:	4979      	ldr	r1, [pc, #484]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002556:	400a      	ands	r2, r1
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002564:	4b70      	ldr	r3, [pc, #448]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2203      	movs	r2, #3
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b6d      	ldr	r3, [pc, #436]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	430a      	orrs	r2, r1
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002582:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	220c      	movs	r2, #12
 8002588:	4393      	bics	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	4b65      	ldr	r3, [pc, #404]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002592:	430a      	orrs	r2, r1
 8002594:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2210      	movs	r2, #16
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	4a66      	ldr	r2, [pc, #408]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c0:	4b59      	ldr	r3, [pc, #356]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	4b56      	ldr	r3, [pc, #344]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e0:	4b51      	ldr	r3, [pc, #324]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002602:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	4b46      	ldr	r3, [pc, #280]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	4013      	ands	r3, r2
 800261c:	d015      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261e:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	0899      	lsrs	r1, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	4b3f      	ldr	r3, [pc, #252]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262c:	430a      	orrs	r2, r1
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	05db      	lsls	r3, r3, #23
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800263c:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	0249      	lsls	r1, r1, #9
 8002646:	430a      	orrs	r2, r1
 8002648:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	031b      	lsls	r3, r3, #12
 8002652:	4013      	ands	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	4393      	bics	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002664:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002666:	430a      	orrs	r2, r1
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	039b      	lsls	r3, r3, #14
 8002672:	4013      	ands	r3, r2
 8002674:	d016      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002676:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	4a35      	ldr	r2, [pc, #212]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002684:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002686:	430a      	orrs	r2, r1
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	03db      	lsls	r3, r3, #15
 8002692:	429a      	cmp	r2, r3
 8002694:	d106      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	0449      	lsls	r1, r1, #17
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	03db      	lsls	r3, r3, #15
 80026ac:	4013      	ands	r3, r2
 80026ae:	d016      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	045b      	lsls	r3, r3, #17
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026d0:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d6:	2180      	movs	r1, #128	@ 0x80
 80026d8:	0449      	lsls	r1, r1, #17
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d016      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	01db      	lsls	r3, r3, #7
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800270a:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	0249      	lsls	r1, r1, #9
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002718:	2312      	movs	r3, #18
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b006      	add	sp, #24
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	fffffcff 	.word	0xfffffcff
 8002734:	fffeffff 	.word	0xfffeffff
 8002738:	00001388 	.word	0x00001388
 800273c:	efffffff 	.word	0xefffffff
 8002740:	fffff3ff 	.word	0xfffff3ff
 8002744:	fff3ffff 	.word	0xfff3ffff
 8002748:	ffcfffff 	.word	0xffcfffff
 800274c:	ffffcfff 	.word	0xffffcfff
 8002750:	ffbfffff 	.word	0xffbfffff
 8002754:	feffffff 	.word	0xfeffffff
 8002758:	ffff3fff 	.word	0xffff3fff

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e04a      	b.n	8002804 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223d      	movs	r2, #61	@ 0x3d
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223c      	movs	r2, #60	@ 0x3c
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f7fe fb41 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223d      	movs	r2, #61	@ 0x3d
 800278e:	2102      	movs	r1, #2
 8002790:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f000 fb55 	bl	8002e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2248      	movs	r2, #72	@ 0x48
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223e      	movs	r2, #62	@ 0x3e
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223f      	movs	r2, #63	@ 0x3f
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2240      	movs	r2, #64	@ 0x40
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2241      	movs	r2, #65	@ 0x41
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2242      	movs	r2, #66	@ 0x42
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2243      	movs	r2, #67	@ 0x43
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2244      	movs	r2, #68	@ 0x44
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2245      	movs	r2, #69	@ 0x45
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2246      	movs	r2, #70	@ 0x46
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2247      	movs	r2, #71	@ 0x47
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223d      	movs	r2, #61	@ 0x3d
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04a      	b.n	80028b4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223d      	movs	r2, #61	@ 0x3d
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223c      	movs	r2, #60	@ 0x3c
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f841 	bl	80028bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223d      	movs	r2, #61	@ 0x3d
 800283e:	2102      	movs	r1, #2
 8002840:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	0019      	movs	r1, r3
 800284c:	0010      	movs	r0, r2
 800284e:	f000 fafd 	bl	8002e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2248      	movs	r2, #72	@ 0x48
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223e      	movs	r2, #62	@ 0x3e
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223f      	movs	r2, #63	@ 0x3f
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2241      	movs	r2, #65	@ 0x41
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2242      	movs	r2, #66	@ 0x42
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2243      	movs	r2, #67	@ 0x43
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2244      	movs	r2, #68	@ 0x44
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2245      	movs	r2, #69	@ 0x45
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2246      	movs	r2, #70	@ 0x46
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2247      	movs	r2, #71	@ 0x47
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223d      	movs	r2, #61	@ 0x3d
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_TIM_PWM_Start+0x22>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	223e      	movs	r2, #62	@ 0x3e
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	4193      	sbcs	r3, r2
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e037      	b.n	800295e <HAL_TIM_PWM_Start+0x92>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d108      	bne.n	8002906 <HAL_TIM_PWM_Start+0x3a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223f      	movs	r2, #63	@ 0x3f
 80028f8:	5c9b      	ldrb	r3, [r3, r2]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	4193      	sbcs	r3, r2
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e02b      	b.n	800295e <HAL_TIM_PWM_Start+0x92>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d108      	bne.n	800291e <HAL_TIM_PWM_Start+0x52>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	4193      	sbcs	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e01f      	b.n	800295e <HAL_TIM_PWM_Start+0x92>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d108      	bne.n	8002936 <HAL_TIM_PWM_Start+0x6a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2241      	movs	r2, #65	@ 0x41
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	1e5a      	subs	r2, r3, #1
 8002930:	4193      	sbcs	r3, r2
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e013      	b.n	800295e <HAL_TIM_PWM_Start+0x92>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b10      	cmp	r3, #16
 800293a:	d108      	bne.n	800294e <HAL_TIM_PWM_Start+0x82>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2242      	movs	r2, #66	@ 0x42
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	4193      	sbcs	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e007      	b.n	800295e <HAL_TIM_PWM_Start+0x92>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2243      	movs	r2, #67	@ 0x43
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	4193      	sbcs	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e08b      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0xaa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	223e      	movs	r2, #62	@ 0x3e
 8002970:	2102      	movs	r1, #2
 8002972:	5499      	strb	r1, [r3, r2]
 8002974:	e023      	b.n	80029be <HAL_TIM_PWM_Start+0xf2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0xba>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	223f      	movs	r2, #63	@ 0x3f
 8002980:	2102      	movs	r1, #2
 8002982:	5499      	strb	r1, [r3, r2]
 8002984:	e01b      	b.n	80029be <HAL_TIM_PWM_Start+0xf2>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0xca>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	2102      	movs	r1, #2
 8002992:	5499      	strb	r1, [r3, r2]
 8002994:	e013      	b.n	80029be <HAL_TIM_PWM_Start+0xf2>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xda>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2241      	movs	r2, #65	@ 0x41
 80029a0:	2102      	movs	r1, #2
 80029a2:	5499      	strb	r1, [r3, r2]
 80029a4:	e00b      	b.n	80029be <HAL_TIM_PWM_Start+0xf2>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xea>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2242      	movs	r2, #66	@ 0x42
 80029b0:	2102      	movs	r1, #2
 80029b2:	5499      	strb	r1, [r3, r2]
 80029b4:	e003      	b.n	80029be <HAL_TIM_PWM_Start+0xf2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2243      	movs	r2, #67	@ 0x43
 80029ba:	2102      	movs	r1, #2
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fe2e 	bl	8003628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_TIM_PWM_Start+0x1bc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x128>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	@ (8002a8c <HAL_TIM_PWM_Start+0x1c0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x128>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a90 <HAL_TIM_PWM_Start+0x1c4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x128>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_TIM_PWM_Start+0x1c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x12c>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_TIM_PWM_Start+0x12e>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	0209      	lsls	r1, r1, #8
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <HAL_TIM_PWM_Start+0x1bc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x16e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	05db      	lsls	r3, r3, #23
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d009      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x16e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_TIM_PWM_Start+0x1cc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x16e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	@ (8002a8c <HAL_TIM_PWM_Start+0x1c0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d116      	bne.n	8002a68 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_TIM_PWM_Start+0x1d0>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d016      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x1ae>
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d011      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e008      	b.n	8002a7a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e000      	b.n	8002a7c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40014400 	.word	0x40014400
 8002a94:	40014800 	.word	0x40014800
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	00010007 	.word	0x00010007

08002aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2317      	movs	r3, #23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	223c      	movs	r2, #60	@ 0x3c
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0e5      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	223c      	movs	r2, #60	@ 0x3c
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b14      	cmp	r3, #20
 8002ace:	d900      	bls.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ad0:	e0d1      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	4b70      	ldr	r3, [pc, #448]	@ (8002c98 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002ad8:	18d3      	adds	r3, r2, r3
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fa3e 	bl	8002f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2108      	movs	r1, #8
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2104      	movs	r1, #4
 8002b08:	438a      	bics	r2, r1
 8002b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	619a      	str	r2, [r3, #24]
      break;
 8002b1e:	e0af      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 faa7 	bl	800307c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	0109      	lsls	r1, r1, #4
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4954      	ldr	r1, [pc, #336]	@ (8002c9c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	021a      	lsls	r2, r3, #8
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	619a      	str	r2, [r3, #24]
      break;
 8002b64:	e08c      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fb08 	bl	8003184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2108      	movs	r1, #8
 8002b80:	430a      	orrs	r2, r1
 8002b82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2104      	movs	r1, #4
 8002b90:	438a      	bics	r2, r1
 8002b92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69d9      	ldr	r1, [r3, #28]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	61da      	str	r2, [r3, #28]
      break;
 8002ba6:	e06b      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fb6f 	bl	8003294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2180      	movs	r1, #128	@ 0x80
 8002bc2:	0109      	lsls	r1, r1, #4
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4932      	ldr	r1, [pc, #200]	@ (8002c9c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69d9      	ldr	r1, [r3, #28]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	021a      	lsls	r2, r3, #8
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
      break;
 8002bec:	e048      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fbb6 	bl	8003368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2108      	movs	r1, #8
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2104      	movs	r1, #4
 8002c18:	438a      	bics	r2, r1
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002c2e:	e027      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fbf5 	bl	8003428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	0109      	lsls	r1, r1, #4
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4910      	ldr	r1, [pc, #64]	@ (8002c9c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002c74:	e004      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002c76:	2317      	movs	r3, #23
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	223c      	movs	r2, #60	@ 0x3c
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]

  return status;
 8002c88:	2317      	movs	r3, #23
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	781b      	ldrb	r3, [r3, #0]
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b006      	add	sp, #24
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	080064dc 	.word	0x080064dc
 8002c9c:	fffffbff 	.word	0xfffffbff

08002ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	230f      	movs	r3, #15
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	223c      	movs	r2, #60	@ 0x3c
 8002cb6:	5c9b      	ldrb	r3, [r3, r2]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x20>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0bc      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x19a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	223c      	movs	r2, #60	@ 0x3c
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	223d      	movs	r2, #61	@ 0x3d
 8002ccc:	2102      	movs	r1, #2
 8002cce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a5a      	ldr	r2, [pc, #360]	@ (8002e44 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a59      	ldr	r2, [pc, #356]	@ (8002e48 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2280      	movs	r2, #128	@ 0x80
 8002cf6:	0192      	lsls	r2, r2, #6
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0xde>
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	0192      	lsls	r2, r2, #6
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d900      	bls.n	8002d06 <HAL_TIM_ConfigClockSource+0x66>
 8002d04:	e088      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	0152      	lsls	r2, r2, #5
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d100      	bne.n	8002d10 <HAL_TIM_ConfigClockSource+0x70>
 8002d0e:	e088      	b.n	8002e22 <HAL_TIM_ConfigClockSource+0x182>
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	0152      	lsls	r2, r2, #5
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d900      	bls.n	8002d1a <HAL_TIM_ConfigClockSource+0x7a>
 8002d18:	e07e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d1a:	2b70      	cmp	r3, #112	@ 0x70
 8002d1c:	d018      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0xb0>
 8002d1e:	d900      	bls.n	8002d22 <HAL_TIM_ConfigClockSource+0x82>
 8002d20:	e07a      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d22:	2b60      	cmp	r3, #96	@ 0x60
 8002d24:	d04f      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x126>
 8002d26:	d900      	bls.n	8002d2a <HAL_TIM_ConfigClockSource+0x8a>
 8002d28:	e076      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d2a:	2b50      	cmp	r3, #80	@ 0x50
 8002d2c:	d03b      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x106>
 8002d2e:	d900      	bls.n	8002d32 <HAL_TIM_ConfigClockSource+0x92>
 8002d30:	e072      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d057      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x146>
 8002d36:	d900      	bls.n	8002d3a <HAL_TIM_ConfigClockSource+0x9a>
 8002d38:	e06e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d3a:	2b30      	cmp	r3, #48	@ 0x30
 8002d3c:	d063      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x166>
 8002d3e:	d86b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d060      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x166>
 8002d44:	d868      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d05d      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x166>
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d05b      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x166>
 8002d4e:	e063      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d60:	f000 fc42 	bl	80035e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2277      	movs	r2, #119	@ 0x77
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
      break;
 8002d7c:	e052      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d8e:	f000 fc2b 	bl	80035e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	01c9      	lsls	r1, r1, #7
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e03e      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	001a      	movs	r2, r3
 8002db4:	f000 fb9c 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2150      	movs	r1, #80	@ 0x50
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fbf6 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e02e      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	f000 fbba 	bl	800354c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2160      	movs	r1, #96	@ 0x60
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 fbe6 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e01e      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	001a      	movs	r2, r3
 8002df4:	f000 fb7c 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	@ 0x40
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 fbd6 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e00e      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f000 fbcd 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002e16:	e005      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e18:	230f      	movs	r3, #15
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
      break;
 8002e20:	e000      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e22:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223d      	movs	r2, #61	@ 0x3d
 8002e28:	2101      	movs	r1, #1
 8002e2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	223c      	movs	r2, #60	@ 0x3c
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

  return status;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	ffceff88 	.word	0xffceff88
 8002e48:	ffff00ff 	.word	0xffff00ff

08002e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f4c <TIM_Base_SetConfig+0x100>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d008      	beq.n	8002e76 <TIM_Base_SetConfig+0x2a>
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	05db      	lsls	r3, r3, #23
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0x2a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a37      	ldr	r2, [pc, #220]	@ (8002f50 <TIM_Base_SetConfig+0x104>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2270      	movs	r2, #112	@ 0x70
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a30      	ldr	r2, [pc, #192]	@ (8002f4c <TIM_Base_SetConfig+0x100>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	05db      	lsls	r3, r3, #23
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d013      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f50 <TIM_Base_SetConfig+0x104>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00f      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f54 <TIM_Base_SetConfig+0x108>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	@ (8002f58 <TIM_Base_SetConfig+0x10c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <TIM_Base_SetConfig+0x110>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_Base_SetConfig+0x76>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a28      	ldr	r2, [pc, #160]	@ (8002f60 <TIM_Base_SetConfig+0x114>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a27      	ldr	r2, [pc, #156]	@ (8002f64 <TIM_Base_SetConfig+0x118>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2280      	movs	r2, #128	@ 0x80
 8002ed8:	4393      	bics	r3, r2
 8002eda:	001a      	movs	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <TIM_Base_SetConfig+0x100>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_Base_SetConfig+0xce>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a14      	ldr	r2, [pc, #80]	@ (8002f58 <TIM_Base_SetConfig+0x10c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0xce>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <TIM_Base_SetConfig+0x110>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0xce>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <TIM_Base_SetConfig+0x114>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d103      	bne.n	8002f22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
  }
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40002000 	.word	0x40002000
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4393      	bics	r3, r2
 8002f80:	001a      	movs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <TIM_OC1_SetConfig+0xf8>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <TIM_OC1_SetConfig+0xfc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_OC1_SetConfig+0x76>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <TIM_OC1_SetConfig+0x100>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_OC1_SetConfig+0x76>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	@ (800306c <TIM_OC1_SetConfig+0x104>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_OC1_SetConfig+0x76>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <TIM_OC1_SetConfig+0x108>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4393      	bics	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8003064 <TIM_OC1_SetConfig+0xfc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_OC1_SetConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <TIM_OC1_SetConfig+0x100>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_OC1_SetConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a18      	ldr	r2, [pc, #96]	@ (800306c <TIM_OC1_SetConfig+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_OC1_SetConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <TIM_OC1_SetConfig+0x108>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4a16      	ldr	r2, [pc, #88]	@ (8003074 <TIM_OC1_SetConfig+0x10c>)
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <TIM_OC1_SetConfig+0x110>)
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	fffeff8f 	.word	0xfffeff8f
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	fffffeff 	.word	0xfffffeff
 8003078:	fffffdff 	.word	0xfffffdff

0800307c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	2210      	movs	r2, #16
 8003092:	4393      	bics	r3, r2
 8003094:	001a      	movs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003164 <TIM_OC2_SetConfig+0xe8>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003168 <TIM_OC2_SetConfig+0xec>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2220      	movs	r2, #32
 80030c6:	4393      	bics	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a24      	ldr	r2, [pc, #144]	@ (800316c <TIM_OC2_SetConfig+0xf0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10d      	bne.n	80030fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	4393      	bics	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	4393      	bics	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <TIM_OC2_SetConfig+0xf0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_OC2_SetConfig+0x9e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1a      	ldr	r2, [pc, #104]	@ (8003170 <TIM_OC2_SetConfig+0xf4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC2_SetConfig+0x9e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <TIM_OC2_SetConfig+0xf8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC2_SetConfig+0x9e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a18      	ldr	r2, [pc, #96]	@ (8003178 <TIM_OC2_SetConfig+0xfc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4a17      	ldr	r2, [pc, #92]	@ (800317c <TIM_OC2_SetConfig+0x100>)
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a16      	ldr	r2, [pc, #88]	@ (8003180 <TIM_OC2_SetConfig+0x104>)
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}
 8003164:	feff8fff 	.word	0xfeff8fff
 8003168:	fffffcff 	.word	0xfffffcff
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800
 800317c:	fffffbff 	.word	0xfffffbff
 8003180:	fffff7ff 	.word	0xfffff7ff

08003184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a33      	ldr	r2, [pc, #204]	@ (8003268 <TIM_OC3_SetConfig+0xe4>)
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <TIM_OC3_SetConfig+0xe8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2203      	movs	r2, #3
 80031b8:	4393      	bics	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4a29      	ldr	r2, [pc, #164]	@ (8003270 <TIM_OC3_SetConfig+0xec>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a25      	ldr	r2, [pc, #148]	@ (8003274 <TIM_OC3_SetConfig+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10d      	bne.n	80031fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a24      	ldr	r2, [pc, #144]	@ (8003278 <TIM_OC3_SetConfig+0xf4>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4a20      	ldr	r2, [pc, #128]	@ (800327c <TIM_OC3_SetConfig+0xf8>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <TIM_OC3_SetConfig+0xf0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00b      	beq.n	800321e <TIM_OC3_SetConfig+0x9a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <TIM_OC3_SetConfig+0xfc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <TIM_OC3_SetConfig+0x9a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	@ (8003284 <TIM_OC3_SetConfig+0x100>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <TIM_OC3_SetConfig+0x9a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <TIM_OC3_SetConfig+0x104>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d113      	bne.n	8003246 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <TIM_OC3_SetConfig+0x108>)
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <TIM_OC3_SetConfig+0x10c>)
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}
 8003268:	fffffeff 	.word	0xfffffeff
 800326c:	fffeff8f 	.word	0xfffeff8f
 8003270:	fffffdff 	.word	0xfffffdff
 8003274:	40012c00 	.word	0x40012c00
 8003278:	fffff7ff 	.word	0xfffff7ff
 800327c:	fffffbff 	.word	0xfffffbff
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	ffffefff 	.word	0xffffefff
 8003290:	ffffdfff 	.word	0xffffdfff

08003294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a26      	ldr	r2, [pc, #152]	@ (8003344 <TIM_OC4_SetConfig+0xb0>)
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <TIM_OC4_SetConfig+0xb4>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a21      	ldr	r2, [pc, #132]	@ (800334c <TIM_OC4_SetConfig+0xb8>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <TIM_OC4_SetConfig+0xbc>)
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	031b      	lsls	r3, r3, #12
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <TIM_OC4_SetConfig+0xc0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_OC4_SetConfig+0x78>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <TIM_OC4_SetConfig+0xc4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_OC4_SetConfig+0x78>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <TIM_OC4_SetConfig+0xc8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC4_SetConfig+0x78>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <TIM_OC4_SetConfig+0xcc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d109      	bne.n	8003320 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <TIM_OC4_SetConfig+0xd0>)
 8003310:	4013      	ands	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	ffffefff 	.word	0xffffefff
 8003348:	feff8fff 	.word	0xfeff8fff
 800334c:	fffffcff 	.word	0xfffffcff
 8003350:	ffffdfff 	.word	0xffffdfff
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	ffffbfff 	.word	0xffffbfff

08003368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a23      	ldr	r2, [pc, #140]	@ (800340c <TIM_OC5_SetConfig+0xa4>)
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <TIM_OC5_SetConfig+0xa8>)
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003414 <TIM_OC5_SetConfig+0xac>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <TIM_OC5_SetConfig+0xb0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_OC5_SetConfig+0x6e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <TIM_OC5_SetConfig+0xb4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_OC5_SetConfig+0x6e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <TIM_OC5_SetConfig+0xb8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC5_SetConfig+0x6e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <TIM_OC5_SetConfig+0xbc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d109      	bne.n	80033ea <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <TIM_OC5_SetConfig+0xa4>)
 80033da:	4013      	ands	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	fffeffff 	.word	0xfffeffff
 8003410:	fffeff8f 	.word	0xfffeff8f
 8003414:	fffdffff 	.word	0xfffdffff
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800

08003428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a24      	ldr	r2, [pc, #144]	@ (80034d0 <TIM_OC6_SetConfig+0xa8>)
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a20      	ldr	r2, [pc, #128]	@ (80034d4 <TIM_OC6_SetConfig+0xac>)
 8003454:	4013      	ands	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <TIM_OC6_SetConfig+0xb0>)
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	051b      	lsls	r3, r3, #20
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a18      	ldr	r2, [pc, #96]	@ (80034dc <TIM_OC6_SetConfig+0xb4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00b      	beq.n	8003498 <TIM_OC6_SetConfig+0x70>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <TIM_OC6_SetConfig+0xb8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <TIM_OC6_SetConfig+0x70>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <TIM_OC6_SetConfig+0xbc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_OC6_SetConfig+0x70>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <TIM_OC6_SetConfig+0xc0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d109      	bne.n	80034ac <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <TIM_OC6_SetConfig+0xc4>)
 800349c:	4013      	ands	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	029b      	lsls	r3, r3, #10
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b006      	add	sp, #24
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	ffefffff 	.word	0xffefffff
 80034d4:	feff8fff 	.word	0xfeff8fff
 80034d8:	ffdfffff 	.word	0xffdfffff
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	fffbffff 	.word	0xfffbffff

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	2201      	movs	r2, #1
 8003508:	4393      	bics	r3, r2
 800350a:	001a      	movs	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	22f0      	movs	r2, #240	@ 0xf0
 800351a:	4393      	bics	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	220a      	movs	r2, #10
 800352c:	4393      	bics	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b006      	add	sp, #24
 800354a:	bd80      	pop	{r7, pc}

0800354c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	2210      	movs	r2, #16
 8003564:	4393      	bics	r3, r2
 8003566:	001a      	movs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <TIM_TI2_ConfigInputStage+0x60>)
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	22a0      	movs	r2, #160	@ 0xa0
 8003588:	4393      	bics	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b006      	add	sp, #24
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	ffff0fff 	.word	0xffff0fff

080035b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <TIM_ITRx_SetConfig+0x34>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	2207      	movs	r2, #7
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	ffcfff8f 	.word	0xffcfff8f

080035e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4a09      	ldr	r2, [pc, #36]	@ (8003624 <TIM_ETR_SetConfig+0x3c>)
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	431a      	orrs	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b006      	add	sp, #24
 8003622:	bd80      	pop	{r7, pc}
 8003624:	ffff00ff 	.word	0xffff00ff

08003628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	221f      	movs	r2, #31
 8003638:	4013      	ands	r3, r2
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	43d2      	mvns	r2, r2
 800364a:	401a      	ands	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	211f      	movs	r1, #31
 8003658:	400b      	ands	r3, r1
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4099      	lsls	r1, r3
 800365e:	000b      	movs	r3, r1
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b006      	add	sp, #24
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	@ 0x3c
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e055      	b.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223c      	movs	r2, #60	@ 0x3c
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	@ 0x3d
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a23      	ldr	r2, [pc, #140]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d108      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2270      	movs	r2, #112	@ 0x70
 80036c8:	4393      	bics	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00f      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	05db      	lsls	r3, r3, #23
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d009      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10c      	bne.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2280      	movs	r2, #128	@ 0x80
 800370c:	4393      	bics	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223d      	movs	r2, #61	@ 0x3d
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223c      	movs	r2, #60	@ 0x3c
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40012c00 	.word	0x40012c00
 8003740:	ff0fffff 	.word	0xff0fffff
 8003744:	40000400 	.word	0x40000400
 8003748:	40014000 	.word	0x40014000

0800374c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223c      	movs	r2, #60	@ 0x3c
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e06f      	b.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	223c      	movs	r2, #60	@ 0x3c
 800376c:	2101      	movs	r1, #1
 800376e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	22ff      	movs	r2, #255	@ 0xff
 8003774:	4393      	bics	r3, r2
 8003776:	001a      	movs	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003784:	401a      	ands	r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a30      	ldr	r2, [pc, #192]	@ (8003854 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003792:	401a      	ands	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a2e      	ldr	r2, [pc, #184]	@ (8003858 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80037a0:	401a      	ands	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	@ (800385c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80037ae:	401a      	ands	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a29      	ldr	r2, [pc, #164]	@ (8003860 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80037bc:	401a      	ands	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a26      	ldr	r2, [pc, #152]	@ (8003864 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80037ca:	401a      	ands	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a24      	ldr	r2, [pc, #144]	@ (8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80037d8:	401a      	ands	r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a21      	ldr	r2, [pc, #132]	@ (800386c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80037e8:	401a      	ands	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d11c      	bne.n	8003836 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003800:	401a      	ands	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	051b      	lsls	r3, r3, #20
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003810:	401a      	ands	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a17      	ldr	r2, [pc, #92]	@ (800387c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800381e:	401a      	ands	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800382c:	401a      	ands	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223c      	movs	r2, #60	@ 0x3c
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b004      	add	sp, #16
 800384e:	bd80      	pop	{r7, pc}
 8003850:	fffffcff 	.word	0xfffffcff
 8003854:	fffffbff 	.word	0xfffffbff
 8003858:	fffff7ff 	.word	0xfffff7ff
 800385c:	ffffefff 	.word	0xffffefff
 8003860:	ffffdfff 	.word	0xffffdfff
 8003864:	ffffbfff 	.word	0xffffbfff
 8003868:	fff0ffff 	.word	0xfff0ffff
 800386c:	efffffff 	.word	0xefffffff
 8003870:	40012c00 	.word	0x40012c00
 8003874:	ff0fffff 	.word	0xff0fffff
 8003878:	feffffff 	.word	0xfeffffff
 800387c:	fdffffff 	.word	0xfdffffff
 8003880:	dfffffff 	.word	0xdfffffff

08003884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e046      	b.n	8003924 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2288      	movs	r2, #136	@ 0x88
 800389a:	589b      	ldr	r3, [r3, r2]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2284      	movs	r2, #132	@ 0x84
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7fd fb60 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2288      	movs	r2, #136	@ 0x88
 80038b4:	2124      	movs	r1, #36	@ 0x24
 80038b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2101      	movs	r1, #1
 80038c4:	438a      	bics	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 ff2e 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 fc6c 	bl	80041b8 <UART_SetConfig>
 80038e0:	0003      	movs	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01c      	b.n	8003924 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	490d      	ldr	r1, [pc, #52]	@ (800392c <HAL_UART_Init+0xa8>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	212a      	movs	r1, #42	@ 0x2a
 8003906:	438a      	bics	r2, r1
 8003908:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f000 ffbd 	bl	800489c <UART_CheckIdleState>
 8003922:	0003      	movs	r3, r0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	ffffb7ff 	.word	0xffffb7ff

08003930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	@ 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	1dbb      	adds	r3, r7, #6
 800393e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2288      	movs	r2, #136	@ 0x88
 8003944:	589b      	ldr	r3, [r3, r2]
 8003946:	2b20      	cmp	r3, #32
 8003948:	d000      	beq.n	800394c <HAL_UART_Transmit+0x1c>
 800394a:	e090      	b.n	8003a6e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_UART_Transmit+0x2a>
 8003952:	1dbb      	adds	r3, r7, #6
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e088      	b.n	8003a70 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	015b      	lsls	r3, r3, #5
 8003966:	429a      	cmp	r2, r3
 8003968:	d109      	bne.n	800397e <HAL_UART_Transmit+0x4e>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d001      	beq.n	800397e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e078      	b.n	8003a70 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2290      	movs	r2, #144	@ 0x90
 8003982:	2100      	movs	r1, #0
 8003984:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2288      	movs	r2, #136	@ 0x88
 800398a:	2121      	movs	r1, #33	@ 0x21
 800398c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd fca9 	bl	80012e4 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1dba      	adds	r2, r7, #6
 800399a:	2154      	movs	r1, #84	@ 0x54
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1dba      	adds	r2, r7, #6
 80039a4:	2156      	movs	r1, #86	@ 0x56
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	015b      	lsls	r3, r3, #5
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d108      	bne.n	80039c8 <HAL_UART_Transmit+0x98>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e003      	b.n	80039d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d0:	e030      	b.n	8003a34 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	0013      	movs	r3, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	@ 0x80
 80039e0:	f001 f806 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2288      	movs	r2, #136	@ 0x88
 80039ec:	2120      	movs	r1, #32
 80039ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03d      	b.n	8003a70 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	001a      	movs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	05d2      	lsls	r2, r2, #23
 8003a06:	0dd2      	lsrs	r2, r2, #23
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e007      	b.n	8003a22 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2256      	movs	r2, #86	@ 0x56
 8003a26:	5a9b      	ldrh	r3, [r3, r2]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2256      	movs	r2, #86	@ 0x56
 8003a32:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2256      	movs	r2, #86	@ 0x56
 8003a38:	5a9b      	ldrh	r3, [r3, r2]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1c8      	bne.n	80039d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	0013      	movs	r3, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2140      	movs	r1, #64	@ 0x40
 8003a4e:	f000 ffcf 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2288      	movs	r2, #136	@ 0x88
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e006      	b.n	8003a70 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2288      	movs	r2, #136	@ 0x88
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b008      	add	sp, #32
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	228c      	movs	r2, #140	@ 0x8c
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d14a      	bne.n	8003b26 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_Receive_IT+0x26>
 8003a96:	1dbb      	adds	r3, r7, #6
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e042      	b.n	8003b28 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	015b      	lsls	r3, r3, #5
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d109      	bne.n	8003ac2 <HAL_UART_Receive_IT+0x4a>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d001      	beq.n	8003ac2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e032      	b.n	8003b28 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <HAL_UART_Receive_IT+0xb8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d020      	beq.n	8003b14 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	d019      	beq.n	8003b14 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			@ (mov r8, r8)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	04c9      	lsls	r1, r1, #19
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b14:	1dbb      	adds	r3, r7, #6
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 ffd7 	bl	8004ad0 <UART_Start_Receive_IT>
 8003b22:	0003      	movs	r3, r0
 8003b24:	e000      	b.n	8003b28 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b008      	add	sp, #32
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40008000 	.word	0x40008000

08003b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b0aa      	sub	sp, #168	@ 0xa8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	22a4      	movs	r2, #164	@ 0xa4
 8003b44:	18b9      	adds	r1, r7, r2
 8003b46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	20a0      	movs	r0, #160	@ 0xa0
 8003b50:	1839      	adds	r1, r7, r0
 8003b52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	249c      	movs	r4, #156	@ 0x9c
 8003b5c:	1939      	adds	r1, r7, r4
 8003b5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b60:	0011      	movs	r1, r2
 8003b62:	18bb      	adds	r3, r7, r2
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4aa2      	ldr	r2, [pc, #648]	@ (8003df0 <HAL_UART_IRQHandler+0x2bc>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2298      	movs	r2, #152	@ 0x98
 8003b6c:	18bd      	adds	r5, r7, r2
 8003b6e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003b70:	18bb      	adds	r3, r7, r2
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11a      	bne.n	8003bae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d015      	beq.n	8003bae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b82:	183b      	adds	r3, r7, r0
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d105      	bne.n	8003b98 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	055b      	lsls	r3, r3, #21
 8003b94:	4013      	ands	r3, r2
 8003b96:	d00a      	beq.n	8003bae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d100      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x6e>
 8003ba0:	e2dc      	b.n	800415c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	0010      	movs	r0, r2
 8003baa:	4798      	blx	r3
      }
      return;
 8003bac:	e2d6      	b.n	800415c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bae:	2398      	movs	r3, #152	@ 0x98
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d100      	bne.n	8003bba <HAL_UART_IRQHandler+0x86>
 8003bb8:	e122      	b.n	8003e00 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003bba:	239c      	movs	r3, #156	@ 0x9c
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a8c      	ldr	r2, [pc, #560]	@ (8003df4 <HAL_UART_IRQHandler+0x2c0>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bc6:	23a0      	movs	r3, #160	@ 0xa0
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8003df8 <HAL_UART_IRQHandler+0x2c4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d100      	bne.n	8003bd4 <HAL_UART_IRQHandler+0xa0>
 8003bd2:	e115      	b.n	8003e00 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bd4:	23a4      	movs	r3, #164	@ 0xa4
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d012      	beq.n	8003c06 <HAL_UART_IRQHandler+0xd2>
 8003be0:	23a0      	movs	r3, #160	@ 0xa0
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2290      	movs	r2, #144	@ 0x90
 8003bfa:	589b      	ldr	r3, [r3, r2]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2190      	movs	r1, #144	@ 0x90
 8003c04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c06:	23a4      	movs	r3, #164	@ 0xa4
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d011      	beq.n	8003c36 <HAL_UART_IRQHandler+0x102>
 8003c12:	239c      	movs	r3, #156	@ 0x9c
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2202      	movs	r2, #2
 8003c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2290      	movs	r2, #144	@ 0x90
 8003c2a:	589b      	ldr	r3, [r3, r2]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2190      	movs	r1, #144	@ 0x90
 8003c34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c36:	23a4      	movs	r3, #164	@ 0xa4
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d011      	beq.n	8003c66 <HAL_UART_IRQHandler+0x132>
 8003c42:	239c      	movs	r3, #156	@ 0x9c
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2204      	movs	r2, #4
 8003c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2290      	movs	r2, #144	@ 0x90
 8003c5a:	589b      	ldr	r3, [r3, r2]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2190      	movs	r1, #144	@ 0x90
 8003c64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c66:	23a4      	movs	r3, #164	@ 0xa4
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d017      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c72:	23a0      	movs	r3, #160	@ 0xa0
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d105      	bne.n	8003c8a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c7e:	239c      	movs	r3, #156	@ 0x9c
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5b      	ldr	r2, [pc, #364]	@ (8003df4 <HAL_UART_IRQHandler+0x2c0>)
 8003c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2208      	movs	r2, #8
 8003c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2290      	movs	r2, #144	@ 0x90
 8003c96:	589b      	ldr	r3, [r3, r2]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2190      	movs	r1, #144	@ 0x90
 8003ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ca2:	23a4      	movs	r3, #164	@ 0xa4
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4013      	ands	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x1a4>
 8003cb0:	23a0      	movs	r3, #160	@ 0xa0
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	04db      	lsls	r3, r3, #19
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2280      	movs	r2, #128	@ 0x80
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2290      	movs	r2, #144	@ 0x90
 8003ccc:	589b      	ldr	r3, [r3, r2]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2190      	movs	r1, #144	@ 0x90
 8003cd6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2290      	movs	r2, #144	@ 0x90
 8003cdc:	589b      	ldr	r3, [r3, r2]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x1b0>
 8003ce2:	e23d      	b.n	8004160 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ce4:	23a4      	movs	r3, #164	@ 0xa4
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2220      	movs	r2, #32
 8003cec:	4013      	ands	r3, r2
 8003cee:	d015      	beq.n	8003d1c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cf0:	23a0      	movs	r3, #160	@ 0xa0
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d106      	bne.n	8003d0a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cfc:	239c      	movs	r3, #156	@ 0x9c
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	@ 0x80
 8003d04:	055b      	lsls	r3, r3, #21
 8003d06:	4013      	ands	r3, r2
 8003d08:	d008      	beq.n	8003d1c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	0010      	movs	r0, r2
 8003d1a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2290      	movs	r2, #144	@ 0x90
 8003d20:	589b      	ldr	r3, [r3, r2]
 8003d22:	2194      	movs	r1, #148	@ 0x94
 8003d24:	187a      	adds	r2, r7, r1
 8003d26:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b40      	cmp	r3, #64	@ 0x40
 8003d34:	d004      	beq.n	8003d40 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2228      	movs	r2, #40	@ 0x28
 8003d3c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d3e:	d04c      	beq.n	8003dda <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 ffe8 	bl	8004d18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2240      	movs	r2, #64	@ 0x40
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d13c      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d56:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	2090      	movs	r0, #144	@ 0x90
 8003d60:	183a      	adds	r2, r7, r0
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	2301      	movs	r3, #1
 8003d66:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2140      	movs	r1, #64	@ 0x40
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2280      	movs	r2, #128	@ 0x80
 8003d92:	589b      	ldr	r3, [r3, r2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d016      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	589b      	ldr	r3, [r3, r2]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_UART_IRQHandler+0x2c8>)
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	589b      	ldr	r3, [r3, r2]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fd fc09 	bl	80015c0 <HAL_DMA_Abort_IT>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d01c      	beq.n	8003dec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	@ 0x80
 8003db6:	589b      	ldr	r3, [r3, r2]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	2180      	movs	r1, #128	@ 0x80
 8003dbe:	5852      	ldr	r2, [r2, r1]
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e012      	b.n	8003dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 f9e1 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dce:	e00d      	b.n	8003dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 f9dc 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e008      	b.n	8003dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 f9d7 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2290      	movs	r2, #144	@ 0x90
 8003de6:	2100      	movs	r1, #0
 8003de8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003dea:	e1b9      	b.n	8004160 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	46c0      	nop			@ (mov r8, r8)
    return;
 8003dee:	e1b7      	b.n	8004160 <HAL_UART_IRQHandler+0x62c>
 8003df0:	0000080f 	.word	0x0000080f
 8003df4:	10000001 	.word	0x10000001
 8003df8:	04000120 	.word	0x04000120
 8003dfc:	08004de5 	.word	0x08004de5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d000      	beq.n	8003e0a <HAL_UART_IRQHandler+0x2d6>
 8003e08:	e13e      	b.n	8004088 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e0a:	23a4      	movs	r3, #164	@ 0xa4
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	4013      	ands	r3, r2
 8003e14:	d100      	bne.n	8003e18 <HAL_UART_IRQHandler+0x2e4>
 8003e16:	e137      	b.n	8004088 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e18:	23a0      	movs	r3, #160	@ 0xa0
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_UART_IRQHandler+0x2f2>
 8003e24:	e130      	b.n	8004088 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2240      	movs	r2, #64	@ 0x40
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d000      	beq.n	8003e3e <HAL_UART_IRQHandler+0x30a>
 8003e3c:	e0a4      	b.n	8003f88 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2280      	movs	r2, #128	@ 0x80
 8003e42:	589b      	ldr	r3, [r3, r2]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	217e      	movs	r1, #126	@ 0x7e
 8003e4a:	187b      	adds	r3, r7, r1
 8003e4c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d100      	bne.n	8003e58 <HAL_UART_IRQHandler+0x324>
 8003e56:	e185      	b.n	8004164 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	225c      	movs	r2, #92	@ 0x5c
 8003e5c:	5a9b      	ldrh	r3, [r3, r2]
 8003e5e:	187a      	adds	r2, r7, r1
 8003e60:	8812      	ldrh	r2, [r2, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d300      	bcc.n	8003e68 <HAL_UART_IRQHandler+0x334>
 8003e66:	e17d      	b.n	8004164 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	187a      	adds	r2, r7, r1
 8003e6c:	215e      	movs	r1, #94	@ 0x5e
 8003e6e:	8812      	ldrh	r2, [r2, #0]
 8003e70:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2280      	movs	r2, #128	@ 0x80
 8003e76:	589b      	ldr	r3, [r3, r2]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d170      	bne.n	8003f64 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	49b4      	ldr	r1, [pc, #720]	@ (8004174 <HAL_UART_IRQHandler+0x640>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003edc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2140      	movs	r1, #64	@ 0x40
 8003f08:	438a      	bics	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	228c      	movs	r2, #140	@ 0x8c
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f26:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f30:	2301      	movs	r3, #1
 8003f32:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f36:	f383 8810 	msr	PRIMASK, r3
}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2110      	movs	r1, #16
 8003f48:	438a      	bics	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f52:	f383 8810 	msr	PRIMASK, r3
}
 8003f56:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2280      	movs	r2, #128	@ 0x80
 8003f5c:	589b      	ldr	r3, [r3, r2]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7fd facc 	bl	80014fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	225c      	movs	r2, #92	@ 0x5c
 8003f6e:	5a9a      	ldrh	r2, [r3, r2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	215e      	movs	r1, #94	@ 0x5e
 8003f74:	5a5b      	ldrh	r3, [r3, r1]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 f90d 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f86:	e0ed      	b.n	8004164 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	225c      	movs	r2, #92	@ 0x5c
 8003f8c:	5a99      	ldrh	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	225e      	movs	r2, #94	@ 0x5e
 8003f92:	5a9b      	ldrh	r3, [r3, r2]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	208e      	movs	r0, #142	@ 0x8e
 8003f98:	183b      	adds	r3, r7, r0
 8003f9a:	1a8a      	subs	r2, r1, r2
 8003f9c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	225e      	movs	r2, #94	@ 0x5e
 8003fa2:	5a9b      	ldrh	r3, [r3, r2]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d100      	bne.n	8003fac <HAL_UART_IRQHandler+0x478>
 8003faa:	e0dd      	b.n	8004168 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003fac:	183b      	adds	r3, r7, r0
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d100      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x482>
 8003fb4:	e0d8      	b.n	8004168 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fbe:	2488      	movs	r4, #136	@ 0x88
 8003fc0:	193a      	adds	r2, r7, r4
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4967      	ldr	r1, [pc, #412]	@ (8004178 <HAL_UART_IRQHandler+0x644>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	193b      	adds	r3, r7, r4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ff4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff6:	2484      	movs	r4, #132	@ 0x84
 8003ff8:	193a      	adds	r2, r7, r4
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f383 8810 	msr	PRIMASK, r3
}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	495a      	ldr	r1, [pc, #360]	@ (800417c <HAL_UART_IRQHandler+0x648>)
 8004014:	400a      	ands	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	193b      	adds	r3, r7, r4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	228c      	movs	r2, #140	@ 0x8c
 800402a:	2120      	movs	r1, #32
 800402c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403a:	f3ef 8310 	mrs	r3, PRIMASK
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004042:	2480      	movs	r4, #128	@ 0x80
 8004044:	193a      	adds	r2, r7, r4
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	2301      	movs	r3, #1
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2110      	movs	r1, #16
 8004060:	438a      	bics	r2, r1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	193b      	adds	r3, r7, r4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004078:	183b      	adds	r3, r7, r0
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f000 f88d 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004086:	e06f      	b.n	8004168 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004088:	23a4      	movs	r3, #164	@ 0xa4
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	035b      	lsls	r3, r3, #13
 8004092:	4013      	ands	r3, r2
 8004094:	d010      	beq.n	80040b8 <HAL_UART_IRQHandler+0x584>
 8004096:	239c      	movs	r3, #156	@ 0x9c
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	03db      	lsls	r3, r3, #15
 80040a0:	4013      	ands	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2280      	movs	r2, #128	@ 0x80
 80040aa:	0352      	lsls	r2, r2, #13
 80040ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f001 fbeb 	bl	800588c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040b6:	e05a      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040b8:	23a4      	movs	r3, #164	@ 0xa4
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2280      	movs	r2, #128	@ 0x80
 80040c0:	4013      	ands	r3, r2
 80040c2:	d016      	beq.n	80040f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040c4:	23a0      	movs	r3, #160	@ 0xa0
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2280      	movs	r2, #128	@ 0x80
 80040cc:	4013      	ands	r3, r2
 80040ce:	d106      	bne.n	80040de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040d0:	239c      	movs	r3, #156	@ 0x9c
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	4013      	ands	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d042      	beq.n	800416c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	0010      	movs	r0, r2
 80040ee:	4798      	blx	r3
    }
    return;
 80040f0:	e03c      	b.n	800416c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040f2:	23a4      	movs	r3, #164	@ 0xa4
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2240      	movs	r2, #64	@ 0x40
 80040fa:	4013      	ands	r3, r2
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0x5e0>
 80040fe:	23a0      	movs	r3, #160	@ 0xa0
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2240      	movs	r2, #64	@ 0x40
 8004106:	4013      	ands	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fe80 	bl	8004e12 <UART_EndTransmit_IT>
    return;
 8004112:	e02c      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004114:	23a4      	movs	r3, #164	@ 0xa4
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	4013      	ands	r3, r2
 8004120:	d00b      	beq.n	800413a <HAL_UART_IRQHandler+0x606>
 8004122:	23a0      	movs	r3, #160	@ 0xa0
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	05db      	lsls	r3, r3, #23
 800412c:	4013      	ands	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f001 fbba 	bl	80058ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004138:	e019      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800413a:	23a4      	movs	r3, #164	@ 0xa4
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	045b      	lsls	r3, r3, #17
 8004144:	4013      	ands	r3, r2
 8004146:	d012      	beq.n	800416e <HAL_UART_IRQHandler+0x63a>
 8004148:	23a0      	movs	r3, #160	@ 0xa0
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da0d      	bge.n	800416e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f001 fba1 	bl	800589c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800415a:	e008      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
      return;
 800415c:	46c0      	nop			@ (mov r8, r8)
 800415e:	e006      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
    return;
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	e004      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
      return;
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	e002      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
      return;
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	e000      	b.n	800416e <HAL_UART_IRQHandler+0x63a>
    return;
 800416c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800416e:	46bd      	mov	sp, r7
 8004170:	b02a      	add	sp, #168	@ 0xa8
 8004172:	bdb0      	pop	{r4, r5, r7, pc}
 8004174:	fffffeff 	.word	0xfffffeff
 8004178:	fffffedf 	.word	0xfffffedf
 800417c:	effffffe 	.word	0xeffffffe

08004180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004188:	46c0      	nop			@ (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	000a      	movs	r2, r1
 80041aa:	1cbb      	adds	r3, r7, #2
 80041ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b090      	sub	sp, #64	@ 0x40
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041c0:	231a      	movs	r3, #26
 80041c2:	2220      	movs	r2, #32
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	431a      	orrs	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4aaf      	ldr	r2, [pc, #700]	@ (80044a8 <UART_SetConfig+0x2f0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4aaa      	ldr	r2, [pc, #680]	@ (80044ac <UART_SetConfig+0x2f4>)
 8004202:	4013      	ands	r3, r2
 8004204:	0018      	movs	r0, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	68d9      	ldr	r1, [r3, #12]
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	0003      	movs	r3, r0
 8004210:	430b      	orrs	r3, r1
 8004212:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4aa4      	ldr	r2, [pc, #656]	@ (80044b0 <UART_SetConfig+0x2f8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800422a:	4313      	orrs	r3, r2
 800422c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a9f      	ldr	r2, [pc, #636]	@ (80044b4 <UART_SetConfig+0x2fc>)
 8004236:	4013      	ands	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	220f      	movs	r2, #15
 800424c:	4393      	bics	r3, r2
 800424e:	0018      	movs	r0, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	0003      	movs	r3, r0
 800425a:	430b      	orrs	r3, r1
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a95      	ldr	r2, [pc, #596]	@ (80044b8 <UART_SetConfig+0x300>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d131      	bne.n	80042cc <UART_SetConfig+0x114>
 8004268:	4b94      	ldr	r3, [pc, #592]	@ (80044bc <UART_SetConfig+0x304>)
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	2203      	movs	r2, #3
 800426e:	4013      	ands	r3, r2
 8004270:	2b03      	cmp	r3, #3
 8004272:	d01d      	beq.n	80042b0 <UART_SetConfig+0xf8>
 8004274:	d823      	bhi.n	80042be <UART_SetConfig+0x106>
 8004276:	2b02      	cmp	r3, #2
 8004278:	d00c      	beq.n	8004294 <UART_SetConfig+0xdc>
 800427a:	d820      	bhi.n	80042be <UART_SetConfig+0x106>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <UART_SetConfig+0xce>
 8004280:	2b01      	cmp	r3, #1
 8004282:	d00e      	beq.n	80042a2 <UART_SetConfig+0xea>
 8004284:	e01b      	b.n	80042be <UART_SetConfig+0x106>
 8004286:	231b      	movs	r3, #27
 8004288:	2220      	movs	r2, #32
 800428a:	189b      	adds	r3, r3, r2
 800428c:	19db      	adds	r3, r3, r7
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e0b4      	b.n	80043fe <UART_SetConfig+0x246>
 8004294:	231b      	movs	r3, #27
 8004296:	2220      	movs	r2, #32
 8004298:	189b      	adds	r3, r3, r2
 800429a:	19db      	adds	r3, r3, r7
 800429c:	2202      	movs	r2, #2
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e0ad      	b.n	80043fe <UART_SetConfig+0x246>
 80042a2:	231b      	movs	r3, #27
 80042a4:	2220      	movs	r2, #32
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2204      	movs	r2, #4
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e0a6      	b.n	80043fe <UART_SetConfig+0x246>
 80042b0:	231b      	movs	r3, #27
 80042b2:	2220      	movs	r2, #32
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	19db      	adds	r3, r3, r7
 80042b8:	2208      	movs	r2, #8
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e09f      	b.n	80043fe <UART_SetConfig+0x246>
 80042be:	231b      	movs	r3, #27
 80042c0:	2220      	movs	r2, #32
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	19db      	adds	r3, r3, r7
 80042c6:	2210      	movs	r2, #16
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e098      	b.n	80043fe <UART_SetConfig+0x246>
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7b      	ldr	r2, [pc, #492]	@ (80044c0 <UART_SetConfig+0x308>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d131      	bne.n	800433a <UART_SetConfig+0x182>
 80042d6:	4b79      	ldr	r3, [pc, #484]	@ (80044bc <UART_SetConfig+0x304>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042da:	220c      	movs	r2, #12
 80042dc:	4013      	ands	r3, r2
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d01d      	beq.n	800431e <UART_SetConfig+0x166>
 80042e2:	d823      	bhi.n	800432c <UART_SetConfig+0x174>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d00c      	beq.n	8004302 <UART_SetConfig+0x14a>
 80042e8:	d820      	bhi.n	800432c <UART_SetConfig+0x174>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <UART_SetConfig+0x13c>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00e      	beq.n	8004310 <UART_SetConfig+0x158>
 80042f2:	e01b      	b.n	800432c <UART_SetConfig+0x174>
 80042f4:	231b      	movs	r3, #27
 80042f6:	2220      	movs	r2, #32
 80042f8:	189b      	adds	r3, r3, r2
 80042fa:	19db      	adds	r3, r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e07d      	b.n	80043fe <UART_SetConfig+0x246>
 8004302:	231b      	movs	r3, #27
 8004304:	2220      	movs	r2, #32
 8004306:	189b      	adds	r3, r3, r2
 8004308:	19db      	adds	r3, r3, r7
 800430a:	2202      	movs	r2, #2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e076      	b.n	80043fe <UART_SetConfig+0x246>
 8004310:	231b      	movs	r3, #27
 8004312:	2220      	movs	r2, #32
 8004314:	189b      	adds	r3, r3, r2
 8004316:	19db      	adds	r3, r3, r7
 8004318:	2204      	movs	r2, #4
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e06f      	b.n	80043fe <UART_SetConfig+0x246>
 800431e:	231b      	movs	r3, #27
 8004320:	2220      	movs	r2, #32
 8004322:	189b      	adds	r3, r3, r2
 8004324:	19db      	adds	r3, r3, r7
 8004326:	2208      	movs	r2, #8
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	e068      	b.n	80043fe <UART_SetConfig+0x246>
 800432c:	231b      	movs	r3, #27
 800432e:	2220      	movs	r2, #32
 8004330:	189b      	adds	r3, r3, r2
 8004332:	19db      	adds	r3, r3, r7
 8004334:	2210      	movs	r2, #16
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e061      	b.n	80043fe <UART_SetConfig+0x246>
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a61      	ldr	r2, [pc, #388]	@ (80044c4 <UART_SetConfig+0x30c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d106      	bne.n	8004352 <UART_SetConfig+0x19a>
 8004344:	231b      	movs	r3, #27
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e055      	b.n	80043fe <UART_SetConfig+0x246>
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5c      	ldr	r2, [pc, #368]	@ (80044c8 <UART_SetConfig+0x310>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d106      	bne.n	800436a <UART_SetConfig+0x1b2>
 800435c:	231b      	movs	r3, #27
 800435e:	2220      	movs	r2, #32
 8004360:	189b      	adds	r3, r3, r2
 8004362:	19db      	adds	r3, r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e049      	b.n	80043fe <UART_SetConfig+0x246>
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a50      	ldr	r2, [pc, #320]	@ (80044b0 <UART_SetConfig+0x2f8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d13e      	bne.n	80043f2 <UART_SetConfig+0x23a>
 8004374:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <UART_SetConfig+0x304>)
 8004376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004378:	23c0      	movs	r3, #192	@ 0xc0
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	4013      	ands	r3, r2
 800437e:	22c0      	movs	r2, #192	@ 0xc0
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	4293      	cmp	r3, r2
 8004384:	d027      	beq.n	80043d6 <UART_SetConfig+0x21e>
 8004386:	22c0      	movs	r2, #192	@ 0xc0
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	4293      	cmp	r3, r2
 800438c:	d82a      	bhi.n	80043e4 <UART_SetConfig+0x22c>
 800438e:	2280      	movs	r2, #128	@ 0x80
 8004390:	0112      	lsls	r2, r2, #4
 8004392:	4293      	cmp	r3, r2
 8004394:	d011      	beq.n	80043ba <UART_SetConfig+0x202>
 8004396:	2280      	movs	r2, #128	@ 0x80
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	4293      	cmp	r3, r2
 800439c:	d822      	bhi.n	80043e4 <UART_SetConfig+0x22c>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <UART_SetConfig+0x1f4>
 80043a2:	2280      	movs	r2, #128	@ 0x80
 80043a4:	00d2      	lsls	r2, r2, #3
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <UART_SetConfig+0x210>
 80043aa:	e01b      	b.n	80043e4 <UART_SetConfig+0x22c>
 80043ac:	231b      	movs	r3, #27
 80043ae:	2220      	movs	r2, #32
 80043b0:	189b      	adds	r3, r3, r2
 80043b2:	19db      	adds	r3, r3, r7
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e021      	b.n	80043fe <UART_SetConfig+0x246>
 80043ba:	231b      	movs	r3, #27
 80043bc:	2220      	movs	r2, #32
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	19db      	adds	r3, r3, r7
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e01a      	b.n	80043fe <UART_SetConfig+0x246>
 80043c8:	231b      	movs	r3, #27
 80043ca:	2220      	movs	r2, #32
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	2204      	movs	r2, #4
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e013      	b.n	80043fe <UART_SetConfig+0x246>
 80043d6:	231b      	movs	r3, #27
 80043d8:	2220      	movs	r2, #32
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	19db      	adds	r3, r3, r7
 80043de:	2208      	movs	r2, #8
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e00c      	b.n	80043fe <UART_SetConfig+0x246>
 80043e4:	231b      	movs	r3, #27
 80043e6:	2220      	movs	r2, #32
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	2210      	movs	r2, #16
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e005      	b.n	80043fe <UART_SetConfig+0x246>
 80043f2:	231b      	movs	r3, #27
 80043f4:	2220      	movs	r2, #32
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	2210      	movs	r2, #16
 80043fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2b      	ldr	r2, [pc, #172]	@ (80044b0 <UART_SetConfig+0x2f8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d000      	beq.n	800440a <UART_SetConfig+0x252>
 8004408:	e0a9      	b.n	800455e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800440a:	231b      	movs	r3, #27
 800440c:	2220      	movs	r2, #32
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d015      	beq.n	8004444 <UART_SetConfig+0x28c>
 8004418:	dc18      	bgt.n	800444c <UART_SetConfig+0x294>
 800441a:	2b04      	cmp	r3, #4
 800441c:	d00d      	beq.n	800443a <UART_SetConfig+0x282>
 800441e:	dc15      	bgt.n	800444c <UART_SetConfig+0x294>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <UART_SetConfig+0x272>
 8004424:	2b02      	cmp	r3, #2
 8004426:	d005      	beq.n	8004434 <UART_SetConfig+0x27c>
 8004428:	e010      	b.n	800444c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442a:	f7fd ffc9 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 800442e:	0003      	movs	r3, r0
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004432:	e014      	b.n	800445e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b25      	ldr	r3, [pc, #148]	@ (80044cc <UART_SetConfig+0x314>)
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004438:	e011      	b.n	800445e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fd ff35 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 800443e:	0003      	movs	r3, r0
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004442:	e00c      	b.n	800445e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800444a:	e008      	b.n	800445e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004450:	231a      	movs	r3, #26
 8004452:	2220      	movs	r2, #32
 8004454:	189b      	adds	r3, r3, r2
 8004456:	19db      	adds	r3, r3, r7
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
        break;
 800445c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800445e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	d100      	bne.n	8004466 <UART_SetConfig+0x2ae>
 8004464:	e14b      	b.n	80046fe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800446a:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <UART_SetConfig+0x318>)
 800446c:	0052      	lsls	r2, r2, #1
 800446e:	5ad3      	ldrh	r3, [r2, r3]
 8004470:	0019      	movs	r1, r3
 8004472:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004474:	f7fb fe58 	bl	8000128 <__udivsi3>
 8004478:	0003      	movs	r3, r0
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	0013      	movs	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	189b      	adds	r3, r3, r2
 8004486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004488:	429a      	cmp	r2, r3
 800448a:	d305      	bcc.n	8004498 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004494:	429a      	cmp	r2, r3
 8004496:	d91d      	bls.n	80044d4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004498:	231a      	movs	r3, #26
 800449a:	2220      	movs	r2, #32
 800449c:	189b      	adds	r3, r3, r2
 800449e:	19db      	adds	r3, r3, r7
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e12b      	b.n	80046fe <UART_SetConfig+0x546>
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	cfff69f3 	.word	0xcfff69f3
 80044ac:	ffffcfff 	.word	0xffffcfff
 80044b0:	40008000 	.word	0x40008000
 80044b4:	11fff4ff 	.word	0x11fff4ff
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40004400 	.word	0x40004400
 80044c4:	40004800 	.word	0x40004800
 80044c8:	40004c00 	.word	0x40004c00
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	08006530 	.word	0x08006530
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e0:	4b92      	ldr	r3, [pc, #584]	@ (800472c <UART_SetConfig+0x574>)
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	5ad3      	ldrh	r3, [r2, r3]
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	69b8      	ldr	r0, [r7, #24]
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	f7fb ff8e 	bl	8000414 <__aeabi_uldivmod>
 80044f8:	0002      	movs	r2, r0
 80044fa:	000b      	movs	r3, r1
 80044fc:	0e11      	lsrs	r1, r2, #24
 80044fe:	021d      	lsls	r5, r3, #8
 8004500:	430d      	orrs	r5, r1
 8004502:	0214      	lsls	r4, r2, #8
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	68f9      	ldr	r1, [r7, #12]
 8004514:	1900      	adds	r0, r0, r4
 8004516:	4169      	adcs	r1, r5
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f7fb ff75 	bl	8000414 <__aeabi_uldivmod>
 800452a:	0002      	movs	r2, r0
 800452c:	000b      	movs	r3, r1
 800452e:	0013      	movs	r3, r2
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004534:	23c0      	movs	r3, #192	@ 0xc0
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	429a      	cmp	r2, r3
 800453a:	d309      	bcc.n	8004550 <UART_SetConfig+0x398>
 800453c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	035b      	lsls	r3, r3, #13
 8004542:	429a      	cmp	r2, r3
 8004544:	d204      	bcs.n	8004550 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e0d6      	b.n	80046fe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004550:	231a      	movs	r3, #26
 8004552:	2220      	movs	r2, #32
 8004554:	189b      	adds	r3, r3, r2
 8004556:	19db      	adds	r3, r3, r7
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e0cf      	b.n	80046fe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	429a      	cmp	r2, r3
 8004568:	d000      	beq.n	800456c <UART_SetConfig+0x3b4>
 800456a:	e070      	b.n	800464e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800456c:	231b      	movs	r3, #27
 800456e:	2220      	movs	r2, #32
 8004570:	189b      	adds	r3, r3, r2
 8004572:	19db      	adds	r3, r3, r7
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d015      	beq.n	80045a6 <UART_SetConfig+0x3ee>
 800457a:	dc18      	bgt.n	80045ae <UART_SetConfig+0x3f6>
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00d      	beq.n	800459c <UART_SetConfig+0x3e4>
 8004580:	dc15      	bgt.n	80045ae <UART_SetConfig+0x3f6>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <UART_SetConfig+0x3d4>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d005      	beq.n	8004596 <UART_SetConfig+0x3de>
 800458a:	e010      	b.n	80045ae <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fd ff18 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8004590:	0003      	movs	r3, r0
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004594:	e014      	b.n	80045c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004596:	4b66      	ldr	r3, [pc, #408]	@ (8004730 <UART_SetConfig+0x578>)
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800459a:	e011      	b.n	80045c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459c:	f7fd fe84 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80045a0:	0003      	movs	r3, r0
 80045a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ac:	e008      	b.n	80045c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80045b2:	231a      	movs	r3, #26
 80045b4:	2220      	movs	r2, #32
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
        break;
 80045be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d100      	bne.n	80045c8 <UART_SetConfig+0x410>
 80045c6:	e09a      	b.n	80046fe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045cc:	4b57      	ldr	r3, [pc, #348]	@ (800472c <UART_SetConfig+0x574>)
 80045ce:	0052      	lsls	r2, r2, #1
 80045d0:	5ad3      	ldrh	r3, [r2, r3]
 80045d2:	0019      	movs	r1, r3
 80045d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045d6:	f7fb fda7 	bl	8000128 <__udivsi3>
 80045da:	0003      	movs	r3, r0
 80045dc:	005a      	lsls	r2, r3, #1
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	18d2      	adds	r2, r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0019      	movs	r1, r3
 80045ec:	0010      	movs	r0, r2
 80045ee:	f7fb fd9b 	bl	8000128 <__udivsi3>
 80045f2:	0003      	movs	r3, r0
 80045f4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d921      	bls.n	8004640 <UART_SetConfig+0x488>
 80045fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	429a      	cmp	r2, r3
 8004604:	d21c      	bcs.n	8004640 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	b29a      	uxth	r2, r3
 800460a:	200e      	movs	r0, #14
 800460c:	2420      	movs	r4, #32
 800460e:	1903      	adds	r3, r0, r4
 8004610:	19db      	adds	r3, r3, r7
 8004612:	210f      	movs	r1, #15
 8004614:	438a      	bics	r2, r1
 8004616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	b299      	uxth	r1, r3
 8004624:	1903      	adds	r3, r0, r4
 8004626:	19db      	adds	r3, r3, r7
 8004628:	1902      	adds	r2, r0, r4
 800462a:	19d2      	adds	r2, r2, r7
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1902      	adds	r2, r0, r4
 8004638:	19d2      	adds	r2, r2, r7
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e05e      	b.n	80046fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004640:	231a      	movs	r3, #26
 8004642:	2220      	movs	r2, #32
 8004644:	189b      	adds	r3, r3, r2
 8004646:	19db      	adds	r3, r3, r7
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e057      	b.n	80046fe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464e:	231b      	movs	r3, #27
 8004650:	2220      	movs	r2, #32
 8004652:	189b      	adds	r3, r3, r2
 8004654:	19db      	adds	r3, r3, r7
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d015      	beq.n	8004688 <UART_SetConfig+0x4d0>
 800465c:	dc18      	bgt.n	8004690 <UART_SetConfig+0x4d8>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00d      	beq.n	800467e <UART_SetConfig+0x4c6>
 8004662:	dc15      	bgt.n	8004690 <UART_SetConfig+0x4d8>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <UART_SetConfig+0x4b6>
 8004668:	2b02      	cmp	r3, #2
 800466a:	d005      	beq.n	8004678 <UART_SetConfig+0x4c0>
 800466c:	e010      	b.n	8004690 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466e:	f7fd fea7 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8004672:	0003      	movs	r3, r0
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004676:	e014      	b.n	80046a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <UART_SetConfig+0x578>)
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800467c:	e011      	b.n	80046a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fd fe13 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8004682:	0003      	movs	r3, r0
 8004684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004686:	e00c      	b.n	80046a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800468e:	e008      	b.n	80046a2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004694:	231a      	movs	r3, #26
 8004696:	2220      	movs	r2, #32
 8004698:	189b      	adds	r3, r3, r2
 800469a:	19db      	adds	r3, r3, r7
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
        break;
 80046a0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80046a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02a      	beq.n	80046fe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ac:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <UART_SetConfig+0x574>)
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	5ad3      	ldrh	r3, [r2, r3]
 80046b2:	0019      	movs	r1, r3
 80046b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80046b6:	f7fb fd37 	bl	8000128 <__udivsi3>
 80046ba:	0003      	movs	r3, r0
 80046bc:	001a      	movs	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	18d2      	adds	r2, r2, r3
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	0019      	movs	r1, r3
 80046cc:	0010      	movs	r0, r2
 80046ce:	f7fb fd2b 	bl	8000128 <__udivsi3>
 80046d2:	0003      	movs	r3, r0
 80046d4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	2b0f      	cmp	r3, #15
 80046da:	d90a      	bls.n	80046f2 <UART_SetConfig+0x53a>
 80046dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	025b      	lsls	r3, r3, #9
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d205      	bcs.n	80046f2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e005      	b.n	80046fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	231a      	movs	r3, #26
 80046f4:	2220      	movs	r2, #32
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	226a      	movs	r2, #106	@ 0x6a
 8004702:	2101      	movs	r1, #1
 8004704:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	2268      	movs	r2, #104	@ 0x68
 800470a:	2101      	movs	r1, #1
 800470c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	2200      	movs	r2, #0
 8004712:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	2200      	movs	r2, #0
 8004718:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800471a:	231a      	movs	r3, #26
 800471c:	2220      	movs	r2, #32
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b010      	add	sp, #64	@ 0x40
 800472a:	bdb0      	pop	{r4, r5, r7, pc}
 800472c:	08006530 	.word	0x08006530
 8004730:	00f42400 	.word	0x00f42400

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	2208      	movs	r2, #8
 8004742:	4013      	ands	r3, r2
 8004744:	d00b      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a4a      	ldr	r2, [pc, #296]	@ (8004878 <UART_AdvFeatureConfig+0x144>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	2201      	movs	r2, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d00b      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4a43      	ldr	r2, [pc, #268]	@ (800487c <UART_AdvFeatureConfig+0x148>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	2202      	movs	r2, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d00b      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <UART_AdvFeatureConfig+0x14c>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	2204      	movs	r2, #4
 80047a8:	4013      	ands	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <UART_AdvFeatureConfig+0x150>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	2210      	movs	r2, #16
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004888 <UART_AdvFeatureConfig+0x154>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	2220      	movs	r2, #32
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00b      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a25      	ldr	r2, [pc, #148]	@ (800488c <UART_AdvFeatureConfig+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	2240      	movs	r2, #64	@ 0x40
 800480e:	4013      	ands	r3, r2
 8004810:	d01d      	beq.n	800484e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a1d      	ldr	r2, [pc, #116]	@ (8004890 <UART_AdvFeatureConfig+0x15c>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	035b      	lsls	r3, r3, #13
 8004832:	429a      	cmp	r2, r3
 8004834:	d10b      	bne.n	800484e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <UART_AdvFeatureConfig+0x160>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	2280      	movs	r2, #128	@ 0x80
 8004854:	4013      	ands	r3, r2
 8004856:	d00b      	beq.n	8004870 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a0e      	ldr	r2, [pc, #56]	@ (8004898 <UART_AdvFeatureConfig+0x164>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	ffff7fff 	.word	0xffff7fff
 800487c:	fffdffff 	.word	0xfffdffff
 8004880:	fffeffff 	.word	0xfffeffff
 8004884:	fffbffff 	.word	0xfffbffff
 8004888:	ffffefff 	.word	0xffffefff
 800488c:	ffffdfff 	.word	0xffffdfff
 8004890:	ffefffff 	.word	0xffefffff
 8004894:	ff9fffff 	.word	0xff9fffff
 8004898:	fff7ffff 	.word	0xfff7ffff

0800489c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b092      	sub	sp, #72	@ 0x48
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2290      	movs	r2, #144	@ 0x90
 80048a8:	2100      	movs	r1, #0
 80048aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ac:	f7fc fd1a 	bl	80012e4 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4013      	ands	r3, r2
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d12d      	bne.n	800491e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	2280      	movs	r2, #128	@ 0x80
 80048c6:	0391      	lsls	r1, r2, #14
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4a47      	ldr	r2, [pc, #284]	@ (80049e8 <UART_CheckIdleState+0x14c>)
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f000 f88e 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d022      	beq.n	800491e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d8:	f3ef 8310 	mrs	r3, PRIMASK
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e2:	2301      	movs	r3, #1
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2180      	movs	r1, #128	@ 0x80
 80048fa:	438a      	bics	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004904:	f383 8810 	msr	PRIMASK, r3
}
 8004908:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2288      	movs	r2, #136	@ 0x88
 800490e:	2120      	movs	r1, #32
 8004910:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2284      	movs	r2, #132	@ 0x84
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e060      	b.n	80049e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2204      	movs	r2, #4
 8004926:	4013      	ands	r3, r2
 8004928:	2b04      	cmp	r3, #4
 800492a:	d146      	bne.n	80049ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492e:	2280      	movs	r2, #128	@ 0x80
 8004930:	03d1      	lsls	r1, r2, #15
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <UART_CheckIdleState+0x14c>)
 8004936:	9200      	str	r2, [sp, #0]
 8004938:	2200      	movs	r2, #0
 800493a:	f000 f859 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d03b      	beq.n	80049ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	60fb      	str	r3, [r7, #12]
  return(result);
 8004948:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	2301      	movs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4922      	ldr	r1, [pc, #136]	@ (80049ec <UART_CheckIdleState+0x150>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	61bb      	str	r3, [r7, #24]
  return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
 800497e:	2301      	movs	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f383 8810 	msr	PRIMASK, r3
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	438a      	bics	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	228c      	movs	r2, #140	@ 0x8c
 80049aa:	2120      	movs	r1, #32
 80049ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2284      	movs	r2, #132	@ 0x84
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e012      	b.n	80049e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2288      	movs	r2, #136	@ 0x88
 80049be:	2120      	movs	r1, #32
 80049c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	228c      	movs	r2, #140	@ 0x8c
 80049c6:	2120      	movs	r1, #32
 80049c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2284      	movs	r2, #132	@ 0x84
 80049da:	2100      	movs	r1, #0
 80049dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b010      	add	sp, #64	@ 0x40
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	01ffffff 	.word	0x01ffffff
 80049ec:	fffffedf 	.word	0xfffffedf

080049f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a00:	e051      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	3301      	adds	r3, #1
 8004a06:	d04e      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a08:	f7fc fc6c 	bl	80012e4 <HAL_GetTick>
 8004a0c:	0002      	movs	r2, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e051      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b80      	cmp	r3, #128	@ 0x80
 8004a32:	d038      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b40      	cmp	r3, #64	@ 0x40
 8004a38:	d035      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	2208      	movs	r2, #8
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d111      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 f960 	bl	8004d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2290      	movs	r2, #144	@ 0x90
 8004a5c:	2108      	movs	r1, #8
 8004a5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2284      	movs	r2, #132	@ 0x84
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e02c      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	401a      	ands	r2, r3
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d112      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 f943 	bl	8004d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2290      	movs	r2, #144	@ 0x90
 8004a96:	2120      	movs	r1, #32
 8004a98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2284      	movs	r2, #132	@ 0x84
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e00f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	425a      	negs	r2, r3
 8004ab6:	4153      	adcs	r3, r2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	001a      	movs	r2, r3
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d09e      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b098      	sub	sp, #96	@ 0x60
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	1dbb      	adds	r3, r7, #6
 8004adc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1dba      	adds	r2, r7, #6
 8004ae8:	215c      	movs	r1, #92	@ 0x5c
 8004aea:	8812      	ldrh	r2, [r2, #0]
 8004aec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1dba      	adds	r2, r7, #6
 8004af2:	215e      	movs	r1, #94	@ 0x5e
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	015b      	lsls	r3, r3, #5
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10d      	bne.n	8004b26 <UART_Start_Receive_IT+0x56>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <UART_Start_Receive_IT+0x4c>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2260      	movs	r2, #96	@ 0x60
 8004b16:	497b      	ldr	r1, [pc, #492]	@ (8004d04 <UART_Start_Receive_IT+0x234>)
 8004b18:	5299      	strh	r1, [r3, r2]
 8004b1a:	e02e      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2260      	movs	r2, #96	@ 0x60
 8004b20:	21ff      	movs	r1, #255	@ 0xff
 8004b22:	5299      	strh	r1, [r3, r2]
 8004b24:	e029      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <UART_Start_Receive_IT+0x7a>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <UART_Start_Receive_IT+0x70>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2260      	movs	r2, #96	@ 0x60
 8004b3a:	21ff      	movs	r1, #255	@ 0xff
 8004b3c:	5299      	strh	r1, [r3, r2]
 8004b3e:	e01c      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2260      	movs	r2, #96	@ 0x60
 8004b44:	217f      	movs	r1, #127	@ 0x7f
 8004b46:	5299      	strh	r1, [r3, r2]
 8004b48:	e017      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	055b      	lsls	r3, r3, #21
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d10d      	bne.n	8004b72 <UART_Start_Receive_IT+0xa2>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <UART_Start_Receive_IT+0x98>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2260      	movs	r2, #96	@ 0x60
 8004b62:	217f      	movs	r1, #127	@ 0x7f
 8004b64:	5299      	strh	r1, [r3, r2]
 8004b66:	e008      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2260      	movs	r2, #96	@ 0x60
 8004b6c:	213f      	movs	r1, #63	@ 0x3f
 8004b6e:	5299      	strh	r1, [r3, r2]
 8004b70:	e003      	b.n	8004b7a <UART_Start_Receive_IT+0xaa>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2260      	movs	r2, #96	@ 0x60
 8004b76:	2100      	movs	r1, #0
 8004b78:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2290      	movs	r2, #144	@ 0x90
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	228c      	movs	r2, #140	@ 0x8c
 8004b86:	2122      	movs	r1, #34	@ 0x22
 8004b88:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b94:	2301      	movs	r3, #1
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2101      	movs	r1, #1
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	059b      	lsls	r3, r3, #22
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d150      	bne.n	8004c6a <UART_Start_Receive_IT+0x19a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2268      	movs	r2, #104	@ 0x68
 8004bcc:	5a9b      	ldrh	r3, [r3, r2]
 8004bce:	1dba      	adds	r2, r7, #6
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d349      	bcc.n	8004c6a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	2380      	movs	r3, #128	@ 0x80
 8004bdc:	015b      	lsls	r3, r3, #5
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d107      	bne.n	8004bf2 <UART_Start_Receive_IT+0x122>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a46      	ldr	r2, [pc, #280]	@ (8004d08 <UART_Start_Receive_IT+0x238>)
 8004bee:	675a      	str	r2, [r3, #116]	@ 0x74
 8004bf0:	e002      	b.n	8004bf8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a45      	ldr	r2, [pc, #276]	@ (8004d0c <UART_Start_Receive_IT+0x23c>)
 8004bf6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d019      	beq.n	8004c34 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	0049      	lsls	r1, r1, #1
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c34:	f3ef 8310 	mrs	r3, PRIMASK
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c3e:	2301      	movs	r3, #1
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2180      	movs	r1, #128	@ 0x80
 8004c56:	0549      	lsls	r1, r1, #21
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	e047      	b.n	8004cfa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	2380      	movs	r3, #128	@ 0x80
 8004c70:	015b      	lsls	r3, r3, #5
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d107      	bne.n	8004c86 <UART_Start_Receive_IT+0x1b6>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a23      	ldr	r2, [pc, #140]	@ (8004d10 <UART_Start_Receive_IT+0x240>)
 8004c82:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c84:	e002      	b.n	8004c8c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <UART_Start_Receive_IT+0x244>)
 8004c8a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c94:	f3ef 8310 	mrs	r3, PRIMASK
 8004c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			@ (mov r8, r8)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2190      	movs	r1, #144	@ 0x90
 8004cb6:	0049      	lsls	r1, r1, #1
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	f383 8810 	msr	PRIMASK, r3
}
 8004cc6:	e018      	b.n	8004cfa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8004cce:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2120      	movs	r1, #32
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b018      	add	sp, #96	@ 0x60
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	000001ff 	.word	0x000001ff
 8004d08:	08005535 	.word	0x08005535
 8004d0c:	080051f5 	.word	0x080051f5
 8004d10:	08005031 	.word	0x08005031
 8004d14:	08004e6d 	.word	0x08004e6d

08004d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	@ 0x38
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	617b      	str	r3, [r7, #20]
  return(result);
 8004d26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4926      	ldr	r1, [pc, #152]	@ (8004ddc <UART_EndRxTransfer+0xc4>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d52:	f3ef 8310 	mrs	r3, PRIMASK
 8004d56:	623b      	str	r3, [r7, #32]
  return(result);
 8004d58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	f383 8810 	msr	PRIMASK, r3
}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	491b      	ldr	r1, [pc, #108]	@ (8004de0 <UART_EndRxTransfer+0xc8>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	f383 8810 	msr	PRIMASK, r3
}
 8004d82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d118      	bne.n	8004dbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d96:	2301      	movs	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2110      	movs	r1, #16
 8004dae:	438a      	bics	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	228c      	movs	r2, #140	@ 0x8c
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b00e      	add	sp, #56	@ 0x38
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	fffffedf 	.word	0xfffffedf
 8004de0:	effffffe 	.word	0xeffffffe

08004de4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	225e      	movs	r2, #94	@ 0x5e
 8004df6:	2100      	movs	r1, #0
 8004df8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2256      	movs	r2, #86	@ 0x56
 8004dfe:	2100      	movs	r1, #0
 8004e00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff f9c3 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	2301      	movs	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f383 8810 	msr	PRIMASK, r3
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2140      	movs	r1, #64	@ 0x40
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f383 8810 	msr	PRIMASK, r3
}
 8004e4a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2288      	movs	r2, #136	@ 0x88
 8004e50:	2120      	movs	r1, #32
 8004e52:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff f98f 	bl	8004180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b006      	add	sp, #24
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b094      	sub	sp, #80	@ 0x50
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e74:	204e      	movs	r0, #78	@ 0x4e
 8004e76:	183b      	adds	r3, r7, r0
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	2160      	movs	r1, #96	@ 0x60
 8004e7c:	5a52      	ldrh	r2, [r2, r1]
 8004e7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	228c      	movs	r2, #140	@ 0x8c
 8004e84:	589b      	ldr	r3, [r3, r2]
 8004e86:	2b22      	cmp	r3, #34	@ 0x22
 8004e88:	d000      	beq.n	8004e8c <UART_RxISR_8BIT+0x20>
 8004e8a:	e0bf      	b.n	800500c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e92:	214c      	movs	r1, #76	@ 0x4c
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b2d9      	uxtb	r1, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	225e      	movs	r2, #94	@ 0x5e
 8004ebc:	5a9b      	ldrh	r3, [r3, r2]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b299      	uxth	r1, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	225e      	movs	r2, #94	@ 0x5e
 8004ec8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	225e      	movs	r2, #94	@ 0x5e
 8004ece:	5a9b      	ldrh	r3, [r3, r2]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d000      	beq.n	8004ed8 <UART_RxISR_8BIT+0x6c>
 8004ed6:	e0a1      	b.n	800501c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	494a      	ldr	r1, [pc, #296]	@ (8005024 <UART_RxISR_8BIT+0x1b8>)
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f04:	f383 8810 	msr	PRIMASK, r3
}
 8004f08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f14:	2301      	movs	r3, #1
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1a:	f383 8810 	msr	PRIMASK, r3
}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	f383 8810 	msr	PRIMASK, r3
}
 8004f3a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	228c      	movs	r2, #140	@ 0x8c
 8004f40:	2120      	movs	r1, #32
 8004f42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a34      	ldr	r2, [pc, #208]	@ (8005028 <UART_RxISR_8BIT+0x1bc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01f      	beq.n	8004f9a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	4013      	ands	r3, r2
 8004f66:	d018      	beq.n	8004f9a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f68:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f72:	2301      	movs	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4928      	ldr	r1, [pc, #160]	@ (800502c <UART_RxISR_8BIT+0x1c0>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d12f      	bne.n	8005002 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fac:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			@ (mov r8, r8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2110      	movs	r1, #16
 8004fca:	438a      	bics	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f383 8810 	msr	PRIMASK, r3
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d103      	bne.n	8004ff0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	225c      	movs	r2, #92	@ 0x5c
 8004ff4:	5a9a      	ldrh	r2, [r3, r2]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0011      	movs	r1, r2
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff f8d0 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005000:	e00c      	b.n	800501c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	0018      	movs	r0, r3
 8005006:	f7fb fe91 	bl	8000d2c <HAL_UART_RxCpltCallback>
}
 800500a:	e007      	b.n	800501c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2108      	movs	r1, #8
 8005018:	430a      	orrs	r2, r1
 800501a:	619a      	str	r2, [r3, #24]
}
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b014      	add	sp, #80	@ 0x50
 8005022:	bd80      	pop	{r7, pc}
 8005024:	fffffedf 	.word	0xfffffedf
 8005028:	40008000 	.word	0x40008000
 800502c:	fbffffff 	.word	0xfbffffff

08005030 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b094      	sub	sp, #80	@ 0x50
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005038:	204e      	movs	r0, #78	@ 0x4e
 800503a:	183b      	adds	r3, r7, r0
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	2160      	movs	r1, #96	@ 0x60
 8005040:	5a52      	ldrh	r2, [r2, r1]
 8005042:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	228c      	movs	r2, #140	@ 0x8c
 8005048:	589b      	ldr	r3, [r3, r2]
 800504a:	2b22      	cmp	r3, #34	@ 0x22
 800504c:	d000      	beq.n	8005050 <UART_RxISR_16BIT+0x20>
 800504e:	e0bf      	b.n	80051d0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005056:	214c      	movs	r1, #76	@ 0x4c
 8005058:	187b      	adds	r3, r7, r1
 800505a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005062:	187b      	adds	r3, r7, r1
 8005064:	183a      	adds	r2, r7, r0
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	4013      	ands	r3, r2
 800506c:	b29a      	uxth	r2, r3
 800506e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005070:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	225e      	movs	r2, #94	@ 0x5e
 8005080:	5a9b      	ldrh	r3, [r3, r2]
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b299      	uxth	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	225e      	movs	r2, #94	@ 0x5e
 800508c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	225e      	movs	r2, #94	@ 0x5e
 8005092:	5a9b      	ldrh	r3, [r3, r2]
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d000      	beq.n	800509c <UART_RxISR_16BIT+0x6c>
 800509a:	e0a1      	b.n	80051e0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	623b      	str	r3, [r7, #32]
  return(result);
 80050a2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a6:	2301      	movs	r3, #1
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			@ (mov r8, r8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	494a      	ldr	r1, [pc, #296]	@ (80051e8 <UART_RxISR_16BIT+0x1b8>)
 80050be:	400a      	ands	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ce:	f3ef 8310 	mrs	r3, PRIMASK
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d8:	2301      	movs	r3, #1
 80050da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2101      	movs	r1, #1
 80050f0:	438a      	bics	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	228c      	movs	r2, #140	@ 0x8c
 8005104:	2120      	movs	r1, #32
 8005106:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <UART_RxISR_16BIT+0x1bc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	2380      	movs	r3, #128	@ 0x80
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	4013      	ands	r3, r2
 800512a:	d018      	beq.n	800515e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512c:	f3ef 8310 	mrs	r3, PRIMASK
 8005130:	617b      	str	r3, [r7, #20]
  return(result);
 8005132:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005136:	2301      	movs	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f383 8810 	msr	PRIMASK, r3
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4928      	ldr	r1, [pc, #160]	@ (80051f0 <UART_RxISR_16BIT+0x1c0>)
 800514e:	400a      	ands	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f383 8810 	msr	PRIMASK, r3
}
 800515c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d12f      	bne.n	80051c6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	60bb      	str	r3, [r7, #8]
  return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005176:	2301      	movs	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2110      	movs	r1, #16
 800518e:	438a      	bics	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d103      	bne.n	80051b4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	225c      	movs	r2, #92	@ 0x5c
 80051b8:	5a9a      	ldrh	r2, [r3, r2]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fe ffee 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051c4:	e00c      	b.n	80051e0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7fb fdaf 	bl	8000d2c <HAL_UART_RxCpltCallback>
}
 80051ce:	e007      	b.n	80051e0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2108      	movs	r1, #8
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b014      	add	sp, #80	@ 0x50
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffffedf 	.word	0xfffffedf
 80051ec:	40008000 	.word	0x40008000
 80051f0:	fbffffff 	.word	0xfbffffff

080051f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0a0      	sub	sp, #128	@ 0x80
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051fc:	237a      	movs	r3, #122	@ 0x7a
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	2160      	movs	r1, #96	@ 0x60
 8005204:	5a52      	ldrh	r2, [r2, r1]
 8005206:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	228c      	movs	r2, #140	@ 0x8c
 8005224:	589b      	ldr	r3, [r3, r2]
 8005226:	2b22      	cmp	r3, #34	@ 0x22
 8005228:	d000      	beq.n	800522c <UART_RxISR_8BIT_FIFOEN+0x38>
 800522a:	e16a      	b.n	8005502 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800522c:	236e      	movs	r3, #110	@ 0x6e
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	2168      	movs	r1, #104	@ 0x68
 8005234:	5a52      	ldrh	r2, [r2, r1]
 8005236:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005238:	e111      	b.n	800545e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005240:	216c      	movs	r1, #108	@ 0x6c
 8005242:	187b      	adds	r3, r7, r1
 8005244:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005246:	187b      	adds	r3, r7, r1
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	237a      	movs	r3, #122	@ 0x7a
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b2d9      	uxtb	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005258:	400a      	ands	r2, r1
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	225e      	movs	r2, #94	@ 0x5e
 800526c:	5a9b      	ldrh	r3, [r3, r2]
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b299      	uxth	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	225e      	movs	r2, #94	@ 0x5e
 8005278:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005284:	2207      	movs	r2, #7
 8005286:	4013      	ands	r3, r2
 8005288:	d049      	beq.n	800531e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800528a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800528c:	2201      	movs	r2, #1
 800528e:	4013      	ands	r3, r2
 8005290:	d010      	beq.n	80052b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005292:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d00b      	beq.n	80052b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2290      	movs	r2, #144	@ 0x90
 80052a8:	589b      	ldr	r3, [r3, r2]
 80052aa:	2201      	movs	r2, #1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2190      	movs	r1, #144	@ 0x90
 80052b2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052b6:	2202      	movs	r2, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00f      	beq.n	80052dc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80052bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052be:	2201      	movs	r2, #1
 80052c0:	4013      	ands	r3, r2
 80052c2:	d00b      	beq.n	80052dc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2202      	movs	r2, #2
 80052ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2290      	movs	r2, #144	@ 0x90
 80052d0:	589b      	ldr	r3, [r3, r2]
 80052d2:	2204      	movs	r2, #4
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2190      	movs	r1, #144	@ 0x90
 80052da:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052de:	2204      	movs	r2, #4
 80052e0:	4013      	ands	r3, r2
 80052e2:	d00f      	beq.n	8005304 <UART_RxISR_8BIT_FIFOEN+0x110>
 80052e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	d00b      	beq.n	8005304 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2204      	movs	r2, #4
 80052f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2290      	movs	r2, #144	@ 0x90
 80052f8:	589b      	ldr	r3, [r3, r2]
 80052fa:	2202      	movs	r2, #2
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2190      	movs	r1, #144	@ 0x90
 8005302:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2290      	movs	r2, #144	@ 0x90
 8005308:	589b      	ldr	r3, [r3, r2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0018      	movs	r0, r3
 8005312:	f7fe ff3d 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2290      	movs	r2, #144	@ 0x90
 800531a:	2100      	movs	r1, #0
 800531c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	225e      	movs	r2, #94	@ 0x5e
 8005322:	5a9b      	ldrh	r3, [r3, r2]
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d000      	beq.n	800532c <UART_RxISR_8BIT_FIFOEN+0x138>
 800532a:	e098      	b.n	800545e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532c:	f3ef 8310 	mrs	r3, PRIMASK
 8005330:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005336:	2301      	movs	r3, #1
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533c:	f383 8810 	msr	PRIMASK, r3
}
 8005340:	46c0      	nop			@ (mov r8, r8)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4973      	ldr	r1, [pc, #460]	@ (800551c <UART_RxISR_8BIT_FIFOEN+0x328>)
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005354:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535e:	f3ef 8310 	mrs	r3, PRIMASK
 8005362:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005366:	667b      	str	r3, [r7, #100]	@ 0x64
 8005368:	2301      	movs	r3, #1
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800536e:	f383 8810 	msr	PRIMASK, r3
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4968      	ldr	r1, [pc, #416]	@ (8005520 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005380:	400a      	ands	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	228c      	movs	r2, #140	@ 0x8c
 8005394:	2120      	movs	r1, #32
 8005396:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005524 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	4013      	ands	r3, r2
 80053ba:	d018      	beq.n	80053ee <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053bc:	f3ef 8310 	mrs	r3, PRIMASK
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80053c6:	2301      	movs	r3, #1
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	f383 8810 	msr	PRIMASK, r3
}
 80053d0:	46c0      	nop			@ (mov r8, r8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4952      	ldr	r1, [pc, #328]	@ (8005528 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80053de:	400a      	ands	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053e4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e8:	f383 8810 	msr	PRIMASK, r3
}
 80053ec:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d12f      	bne.n	8005456 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005400:	623b      	str	r3, [r7, #32]
  return(result);
 8005402:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005406:	2301      	movs	r3, #1
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2110      	movs	r1, #16
 800541e:	438a      	bics	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005424:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	2210      	movs	r2, #16
 8005436:	4013      	ands	r3, r2
 8005438:	2b10      	cmp	r3, #16
 800543a:	d103      	bne.n	8005444 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2210      	movs	r2, #16
 8005442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	225c      	movs	r2, #92	@ 0x5c
 8005448:	5a9a      	ldrh	r2, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0011      	movs	r1, r2
 800544e:	0018      	movs	r0, r3
 8005450:	f7fe fea6 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
 8005454:	e003      	b.n	800545e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f7fb fc67 	bl	8000d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800545e:	236e      	movs	r3, #110	@ 0x6e
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800546a:	2220      	movs	r2, #32
 800546c:	4013      	ands	r3, r2
 800546e:	d000      	beq.n	8005472 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005470:	e6e3      	b.n	800523a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005472:	205a      	movs	r0, #90	@ 0x5a
 8005474:	183b      	adds	r3, r7, r0
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	215e      	movs	r1, #94	@ 0x5e
 800547a:	5a52      	ldrh	r2, [r2, r1]
 800547c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800547e:	0001      	movs	r1, r0
 8005480:	187b      	adds	r3, r7, r1
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d044      	beq.n	8005512 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2268      	movs	r2, #104	@ 0x68
 800548c:	5a9b      	ldrh	r3, [r3, r2]
 800548e:	187a      	adds	r2, r7, r1
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d23d      	bcs.n	8005512 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	60bb      	str	r3, [r7, #8]
  return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800549e:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a0:	2301      	movs	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	491d      	ldr	r1, [pc, #116]	@ (800552c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80054b8:	400a      	ands	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80054cc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	617b      	str	r3, [r7, #20]
  return(result);
 80054d4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d8:	2301      	movs	r3, #1
 80054da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2120      	movs	r1, #32
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005500:	e007      	b.n	8005512 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2108      	movs	r1, #8
 800550e:	430a      	orrs	r2, r1
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b020      	add	sp, #128	@ 0x80
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	fffffeff 	.word	0xfffffeff
 8005520:	effffffe 	.word	0xeffffffe
 8005524:	40008000 	.word	0x40008000
 8005528:	fbffffff 	.word	0xfbffffff
 800552c:	efffffff 	.word	0xefffffff
 8005530:	08004e6d 	.word	0x08004e6d

08005534 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b0a2      	sub	sp, #136	@ 0x88
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800553c:	2382      	movs	r3, #130	@ 0x82
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	2160      	movs	r1, #96	@ 0x60
 8005544:	5a52      	ldrh	r2, [r2, r1]
 8005546:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	2284      	movs	r2, #132	@ 0x84
 8005550:	18ba      	adds	r2, r7, r2
 8005552:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	228c      	movs	r2, #140	@ 0x8c
 8005568:	589b      	ldr	r3, [r3, r2]
 800556a:	2b22      	cmp	r3, #34	@ 0x22
 800556c:	d000      	beq.n	8005570 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800556e:	e174      	b.n	800585a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005570:	2376      	movs	r3, #118	@ 0x76
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	2168      	movs	r1, #104	@ 0x68
 8005578:	5a52      	ldrh	r2, [r2, r1]
 800557a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800557c:	e119      	b.n	80057b2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005584:	2174      	movs	r1, #116	@ 0x74
 8005586:	187b      	adds	r3, r7, r1
 8005588:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005590:	187b      	adds	r3, r7, r1
 8005592:	2282      	movs	r2, #130	@ 0x82
 8005594:	18ba      	adds	r2, r7, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	8812      	ldrh	r2, [r2, #0]
 800559a:	4013      	ands	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	225e      	movs	r2, #94	@ 0x5e
 80055b0:	5a9b      	ldrh	r3, [r3, r2]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b299      	uxth	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	225e      	movs	r2, #94	@ 0x5e
 80055bc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2184      	movs	r1, #132	@ 0x84
 80055c6:	187a      	adds	r2, r7, r1
 80055c8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2207      	movs	r2, #7
 80055d0:	4013      	ands	r3, r2
 80055d2:	d04e      	beq.n	8005672 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055d4:	187b      	adds	r3, r7, r1
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	4013      	ands	r3, r2
 80055dc:	d010      	beq.n	8005600 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80055de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	d00b      	beq.n	8005600 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2201      	movs	r2, #1
 80055ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2290      	movs	r2, #144	@ 0x90
 80055f4:	589b      	ldr	r3, [r3, r2]
 80055f6:	2201      	movs	r2, #1
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2190      	movs	r1, #144	@ 0x90
 80055fe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005600:	2384      	movs	r3, #132	@ 0x84
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2202      	movs	r2, #2
 8005608:	4013      	ands	r3, r2
 800560a:	d00f      	beq.n	800562c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800560c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800560e:	2201      	movs	r2, #1
 8005610:	4013      	ands	r3, r2
 8005612:	d00b      	beq.n	800562c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2202      	movs	r2, #2
 800561a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2290      	movs	r2, #144	@ 0x90
 8005620:	589b      	ldr	r3, [r3, r2]
 8005622:	2204      	movs	r2, #4
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2190      	movs	r1, #144	@ 0x90
 800562a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800562c:	2384      	movs	r3, #132	@ 0x84
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2204      	movs	r2, #4
 8005634:	4013      	ands	r3, r2
 8005636:	d00f      	beq.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800563a:	2201      	movs	r2, #1
 800563c:	4013      	ands	r3, r2
 800563e:	d00b      	beq.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2204      	movs	r2, #4
 8005646:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2290      	movs	r2, #144	@ 0x90
 800564c:	589b      	ldr	r3, [r3, r2]
 800564e:	2202      	movs	r2, #2
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2190      	movs	r1, #144	@ 0x90
 8005656:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2290      	movs	r2, #144	@ 0x90
 800565c:	589b      	ldr	r3, [r3, r2]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f7fe fd93 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2290      	movs	r2, #144	@ 0x90
 800566e:	2100      	movs	r1, #0
 8005670:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	225e      	movs	r2, #94	@ 0x5e
 8005676:	5a9b      	ldrh	r3, [r3, r2]
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d000      	beq.n	8005680 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800567e:	e098      	b.n	80057b2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005680:	f3ef 8310 	mrs	r3, PRIMASK
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800568a:	2301      	movs	r3, #1
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005690:	f383 8810 	msr	PRIMASK, r3
}
 8005694:	46c0      	nop			@ (mov r8, r8)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4974      	ldr	r1, [pc, #464]	@ (8005874 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80056a2:	400a      	ands	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b2:	f3ef 8310 	mrs	r3, PRIMASK
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80056b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056bc:	2301      	movs	r3, #1
 80056be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4969      	ldr	r1, [pc, #420]	@ (8005878 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	228c      	movs	r2, #140	@ 0x8c
 80056e8:	2120      	movs	r1, #32
 80056ea:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a5f      	ldr	r2, [pc, #380]	@ (800587c <UART_RxISR_16BIT_FIFOEN+0x348>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01f      	beq.n	8005742 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	4013      	ands	r3, r2
 800570e:	d018      	beq.n	8005742 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005710:	f3ef 8310 	mrs	r3, PRIMASK
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005718:	667b      	str	r3, [r7, #100]	@ 0x64
 800571a:	2301      	movs	r3, #1
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	f383 8810 	msr	PRIMASK, r3
}
 8005724:	46c0      	nop			@ (mov r8, r8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4953      	ldr	r1, [pc, #332]	@ (8005880 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005732:	400a      	ands	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005738:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d12f      	bne.n	80057aa <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005750:	f3ef 8310 	mrs	r3, PRIMASK
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	663b      	str	r3, [r7, #96]	@ 0x60
 800575a:	2301      	movs	r3, #1
 800575c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			@ (mov r8, r8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2110      	movs	r1, #16
 8005772:	438a      	bics	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	2210      	movs	r2, #16
 800578a:	4013      	ands	r3, r2
 800578c:	2b10      	cmp	r3, #16
 800578e:	d103      	bne.n	8005798 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2210      	movs	r2, #16
 8005796:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	225c      	movs	r2, #92	@ 0x5c
 800579c:	5a9a      	ldrh	r2, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0011      	movs	r1, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fe fcfc 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
 80057a8:	e003      	b.n	80057b2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fb fabd 	bl	8000d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057b2:	2376      	movs	r3, #118	@ 0x76
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <UART_RxISR_16BIT_FIFOEN+0x296>
 80057bc:	2384      	movs	r3, #132	@ 0x84
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2220      	movs	r2, #32
 80057c4:	4013      	ands	r3, r2
 80057c6:	d000      	beq.n	80057ca <UART_RxISR_16BIT_FIFOEN+0x296>
 80057c8:	e6d9      	b.n	800557e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057ca:	205e      	movs	r0, #94	@ 0x5e
 80057cc:	183b      	adds	r3, r7, r0
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	215e      	movs	r1, #94	@ 0x5e
 80057d2:	5a52      	ldrh	r2, [r2, r1]
 80057d4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057d6:	0001      	movs	r1, r0
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d044      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0x336>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2268      	movs	r2, #104	@ 0x68
 80057e4:	5a9b      	ldrh	r3, [r3, r2]
 80057e6:	187a      	adds	r2, r7, r1
 80057e8:	8812      	ldrh	r2, [r2, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d23d      	bcs.n	800586a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ee:	f3ef 8310 	mrs	r3, PRIMASK
 80057f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80057f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057f8:	2301      	movs	r3, #1
 80057fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	491d      	ldr	r1, [pc, #116]	@ (8005884 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005810:	400a      	ands	r2, r1
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005816:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f383 8810 	msr	PRIMASK, r3
}
 800581e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005824:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005826:	f3ef 8310 	mrs	r3, PRIMASK
 800582a:	61bb      	str	r3, [r7, #24]
  return(result);
 800582c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800582e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005830:	2301      	movs	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f383 8810 	msr	PRIMASK, r3
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2120      	movs	r1, #32
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f383 8810 	msr	PRIMASK, r3
}
 8005856:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005858:	e007      	b.n	800586a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2108      	movs	r1, #8
 8005866:	430a      	orrs	r2, r1
 8005868:	619a      	str	r2, [r3, #24]
}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b022      	add	sp, #136	@ 0x88
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	fffffeff 	.word	0xfffffeff
 8005878:	effffffe 	.word	0xeffffffe
 800587c:	40008000 	.word	0x40008000
 8005880:	fbffffff 	.word	0xfbffffff
 8005884:	efffffff 	.word	0xefffffff
 8005888:	08005031 	.word	0x08005031

0800588c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058b4:	46c0      	nop			@ (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2284      	movs	r2, #132	@ 0x84
 80058c8:	5c9b      	ldrb	r3, [r3, r2]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e027      	b.n	8005922 <HAL_UARTEx_DisableFifoMode+0x66>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2284      	movs	r2, #132	@ 0x84
 80058d6:	2101      	movs	r1, #1
 80058d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2288      	movs	r2, #136	@ 0x88
 80058de:	2124      	movs	r1, #36	@ 0x24
 80058e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2101      	movs	r1, #1
 80058f6:	438a      	bics	r2, r1
 80058f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a0b      	ldr	r2, [pc, #44]	@ (800592c <HAL_UARTEx_DisableFifoMode+0x70>)
 80058fe:	4013      	ands	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2288      	movs	r2, #136	@ 0x88
 8005914:	2120      	movs	r1, #32
 8005916:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2284      	movs	r2, #132	@ 0x84
 800591c:	2100      	movs	r1, #0
 800591e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	dfffffff 	.word	0xdfffffff

08005930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2284      	movs	r2, #132	@ 0x84
 800593e:	5c9b      	ldrb	r3, [r3, r2]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e02e      	b.n	80059a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2284      	movs	r2, #132	@ 0x84
 800594c:	2101      	movs	r1, #1
 800594e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2288      	movs	r2, #136	@ 0x88
 8005954:	2124      	movs	r1, #36	@ 0x24
 8005956:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2101      	movs	r1, #1
 800596c:	438a      	bics	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	08d9      	lsrs	r1, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0018      	movs	r0, r3
 8005988:	f000 f854 	bl	8005a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2288      	movs	r2, #136	@ 0x88
 8005998:	2120      	movs	r1, #32
 800599a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2284      	movs	r2, #132	@ 0x84
 80059a0:	2100      	movs	r1, #0
 80059a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2284      	movs	r2, #132	@ 0x84
 80059be:	5c9b      	ldrb	r3, [r3, r2]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e02f      	b.n	8005a28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2284      	movs	r2, #132	@ 0x84
 80059cc:	2101      	movs	r1, #1
 80059ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2288      	movs	r2, #136	@ 0x88
 80059d4:	2124      	movs	r1, #36	@ 0x24
 80059d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	0019      	movs	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f813 	bl	8005a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2288      	movs	r2, #136	@ 0x88
 8005a1a:	2120      	movs	r1, #32
 8005a1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2284      	movs	r2, #132	@ 0x84
 8005a22:	2100      	movs	r1, #0
 8005a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b004      	add	sp, #16
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	f1ffffff 	.word	0xf1ffffff

08005a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d108      	bne.n	8005a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	226a      	movs	r2, #106	@ 0x6a
 8005a48:	2101      	movs	r1, #1
 8005a4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2268      	movs	r2, #104	@ 0x68
 8005a50:	2101      	movs	r1, #1
 8005a52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a54:	e043      	b.n	8005ade <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a56:	260f      	movs	r6, #15
 8005a58:	19bb      	adds	r3, r7, r6
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a5e:	200e      	movs	r0, #14
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	2208      	movs	r2, #8
 8005a64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	0e5b      	lsrs	r3, r3, #25
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	240d      	movs	r4, #13
 8005a72:	193b      	adds	r3, r7, r4
 8005a74:	2107      	movs	r1, #7
 8005a76:	400a      	ands	r2, r1
 8005a78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	0f5b      	lsrs	r3, r3, #29
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	250c      	movs	r5, #12
 8005a86:	197b      	adds	r3, r7, r5
 8005a88:	2107      	movs	r1, #7
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a8e:	183b      	adds	r3, r7, r0
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	197a      	adds	r2, r7, r5
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	4914      	ldr	r1, [pc, #80]	@ (8005ae8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a98:	5c8a      	ldrb	r2, [r1, r2]
 8005a9a:	435a      	muls	r2, r3
 8005a9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a9e:	197b      	adds	r3, r7, r5
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <UARTEx_SetNbDataToProcess+0xb8>)
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	f7fa fbc8 	bl	800023c <__divsi3>
 8005aac:	0003      	movs	r3, r0
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	226a      	movs	r2, #106	@ 0x6a
 8005ab4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab6:	19bb      	adds	r3, r7, r6
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	193a      	adds	r2, r7, r4
 8005abc:	7812      	ldrb	r2, [r2, #0]
 8005abe:	490a      	ldr	r1, [pc, #40]	@ (8005ae8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ac0:	5c8a      	ldrb	r2, [r1, r2]
 8005ac2:	435a      	muls	r2, r3
 8005ac4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac6:	193b      	adds	r3, r7, r4
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <UARTEx_SetNbDataToProcess+0xb8>)
 8005acc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ace:	0019      	movs	r1, r3
 8005ad0:	f7fa fbb4 	bl	800023c <__divsi3>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	b299      	uxth	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2268      	movs	r2, #104	@ 0x68
 8005adc:	5299      	strh	r1, [r3, r2]
}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b005      	add	sp, #20
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	08006548 	.word	0x08006548
 8005aec:	08006550 	.word	0x08006550

08005af0 <siprintf>:
 8005af0:	b40e      	push	{r1, r2, r3}
 8005af2:	b500      	push	{lr}
 8005af4:	490b      	ldr	r1, [pc, #44]	@ (8005b24 <siprintf+0x34>)
 8005af6:	b09c      	sub	sp, #112	@ 0x70
 8005af8:	ab1d      	add	r3, sp, #116	@ 0x74
 8005afa:	9002      	str	r0, [sp, #8]
 8005afc:	9006      	str	r0, [sp, #24]
 8005afe:	9107      	str	r1, [sp, #28]
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	4809      	ldr	r0, [pc, #36]	@ (8005b28 <siprintf+0x38>)
 8005b04:	4909      	ldr	r1, [pc, #36]	@ (8005b2c <siprintf+0x3c>)
 8005b06:	cb04      	ldmia	r3!, {r2}
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	a902      	add	r1, sp, #8
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	f000 f99e 	bl	8005e50 <_svfiprintf_r>
 8005b14:	2200      	movs	r2, #0
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	b01c      	add	sp, #112	@ 0x70
 8005b1c:	bc08      	pop	{r3}
 8005b1e:	b003      	add	sp, #12
 8005b20:	4718      	bx	r3
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	7fffffff 	.word	0x7fffffff
 8005b28:	2000000c 	.word	0x2000000c
 8005b2c:	ffff0208 	.word	0xffff0208

08005b30 <memset>:
 8005b30:	0003      	movs	r3, r0
 8005b32:	1882      	adds	r2, r0, r2
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	7019      	strb	r1, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	@ (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	2600      	movs	r6, #0
 8005b50:	4c0c      	ldr	r4, [pc, #48]	@ (8005b84 <__libc_init_array+0x38>)
 8005b52:	4d0d      	ldr	r5, [pc, #52]	@ (8005b88 <__libc_init_array+0x3c>)
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	f000 fc65 	bl	800642c <_init>
 8005b62:	4c0a      	ldr	r4, [pc, #40]	@ (8005b8c <__libc_init_array+0x40>)
 8005b64:	4d0a      	ldr	r5, [pc, #40]	@ (8005b90 <__libc_init_array+0x44>)
 8005b66:	1b64      	subs	r4, r4, r5
 8005b68:	10a4      	asrs	r4, r4, #2
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	00b3      	lsls	r3, r6, #2
 8005b72:	58eb      	ldr	r3, [r5, r3]
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	00b3      	lsls	r3, r6, #2
 8005b7c:	58eb      	ldr	r3, [r5, r3]
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08006594 	.word	0x08006594
 8005b88:	08006594 	.word	0x08006594
 8005b8c:	08006598 	.word	0x08006598
 8005b90:	08006594 	.word	0x08006594

08005b94 <__retarget_lock_acquire_recursive>:
 8005b94:	4770      	bx	lr

08005b96 <__retarget_lock_release_recursive>:
 8005b96:	4770      	bx	lr

08005b98 <_free_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	0005      	movs	r5, r0
 8005b9c:	1e0c      	subs	r4, r1, #0
 8005b9e:	d010      	beq.n	8005bc2 <_free_r+0x2a>
 8005ba0:	3c04      	subs	r4, #4
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da00      	bge.n	8005baa <_free_r+0x12>
 8005ba8:	18e4      	adds	r4, r4, r3
 8005baa:	0028      	movs	r0, r5
 8005bac:	f000 f8e0 	bl	8005d70 <__malloc_lock>
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <_free_r+0x90>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <_free_r+0x2c>
 8005bb8:	6063      	str	r3, [r4, #4]
 8005bba:	6014      	str	r4, [r2, #0]
 8005bbc:	0028      	movs	r0, r5
 8005bbe:	f000 f8df 	bl	8005d80 <__malloc_unlock>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x42>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	d1f3      	bne.n	8005bb8 <_free_r+0x20>
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	1809      	adds	r1, r1, r0
 8005bd6:	6021      	str	r1, [r4, #0]
 8005bd8:	e7ee      	b.n	8005bb8 <_free_r+0x20>
 8005bda:	001a      	movs	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <_free_r+0x4e>
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	d9f9      	bls.n	8005bda <_free_r+0x42>
 8005be6:	6811      	ldr	r1, [r2, #0]
 8005be8:	1850      	adds	r0, r2, r1
 8005bea:	42a0      	cmp	r0, r4
 8005bec:	d10b      	bne.n	8005c06 <_free_r+0x6e>
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	1809      	adds	r1, r1, r0
 8005bf2:	1850      	adds	r0, r2, r1
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	4283      	cmp	r3, r0
 8005bf8:	d1e0      	bne.n	8005bbc <_free_r+0x24>
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	1841      	adds	r1, r0, r1
 8005c00:	6011      	str	r1, [r2, #0]
 8005c02:	6053      	str	r3, [r2, #4]
 8005c04:	e7da      	b.n	8005bbc <_free_r+0x24>
 8005c06:	42a0      	cmp	r0, r4
 8005c08:	d902      	bls.n	8005c10 <_free_r+0x78>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	e7d5      	b.n	8005bbc <_free_r+0x24>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	1821      	adds	r1, r4, r0
 8005c14:	428b      	cmp	r3, r1
 8005c16:	d103      	bne.n	8005c20 <_free_r+0x88>
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	1809      	adds	r1, r1, r0
 8005c1e:	6021      	str	r1, [r4, #0]
 8005c20:	6063      	str	r3, [r4, #4]
 8005c22:	6054      	str	r4, [r2, #4]
 8005c24:	e7ca      	b.n	8005bbc <_free_r+0x24>
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	20000388 	.word	0x20000388

08005c2c <sbrk_aligned>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c6c <sbrk_aligned+0x40>)
 8005c30:	000d      	movs	r5, r1
 8005c32:	6831      	ldr	r1, [r6, #0]
 8005c34:	0004      	movs	r4, r0
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d102      	bne.n	8005c40 <sbrk_aligned+0x14>
 8005c3a:	f000 fb99 	bl	8006370 <_sbrk_r>
 8005c3e:	6030      	str	r0, [r6, #0]
 8005c40:	0029      	movs	r1, r5
 8005c42:	0020      	movs	r0, r4
 8005c44:	f000 fb94 	bl	8006370 <_sbrk_r>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d103      	bne.n	8005c54 <sbrk_aligned+0x28>
 8005c4c:	2501      	movs	r5, #1
 8005c4e:	426d      	negs	r5, r5
 8005c50:	0028      	movs	r0, r5
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	2303      	movs	r3, #3
 8005c56:	1cc5      	adds	r5, r0, #3
 8005c58:	439d      	bics	r5, r3
 8005c5a:	42a8      	cmp	r0, r5
 8005c5c:	d0f8      	beq.n	8005c50 <sbrk_aligned+0x24>
 8005c5e:	1a29      	subs	r1, r5, r0
 8005c60:	0020      	movs	r0, r4
 8005c62:	f000 fb85 	bl	8006370 <_sbrk_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d1f2      	bne.n	8005c50 <sbrk_aligned+0x24>
 8005c6a:	e7ef      	b.n	8005c4c <sbrk_aligned+0x20>
 8005c6c:	20000384 	.word	0x20000384

08005c70 <_malloc_r>:
 8005c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c72:	2203      	movs	r2, #3
 8005c74:	1ccb      	adds	r3, r1, #3
 8005c76:	4393      	bics	r3, r2
 8005c78:	3308      	adds	r3, #8
 8005c7a:	0005      	movs	r5, r0
 8005c7c:	001f      	movs	r7, r3
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d234      	bcs.n	8005cec <_malloc_r+0x7c>
 8005c82:	270c      	movs	r7, #12
 8005c84:	42b9      	cmp	r1, r7
 8005c86:	d833      	bhi.n	8005cf0 <_malloc_r+0x80>
 8005c88:	0028      	movs	r0, r5
 8005c8a:	f000 f871 	bl	8005d70 <__malloc_lock>
 8005c8e:	4e37      	ldr	r6, [pc, #220]	@ (8005d6c <_malloc_r+0xfc>)
 8005c90:	6833      	ldr	r3, [r6, #0]
 8005c92:	001c      	movs	r4, r3
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d12f      	bne.n	8005cf8 <_malloc_r+0x88>
 8005c98:	0039      	movs	r1, r7
 8005c9a:	0028      	movs	r0, r5
 8005c9c:	f7ff ffc6 	bl	8005c2c <sbrk_aligned>
 8005ca0:	0004      	movs	r4, r0
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d15f      	bne.n	8005d66 <_malloc_r+0xf6>
 8005ca6:	6834      	ldr	r4, [r6, #0]
 8005ca8:	9400      	str	r4, [sp, #0]
 8005caa:	9b00      	ldr	r3, [sp, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d14a      	bne.n	8005d46 <_malloc_r+0xd6>
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	d052      	beq.n	8005d5a <_malloc_r+0xea>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	18e3      	adds	r3, r4, r3
 8005cba:	9900      	ldr	r1, [sp, #0]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f000 fb57 	bl	8006370 <_sbrk_r>
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	4283      	cmp	r3, r0
 8005cc6:	d148      	bne.n	8005d5a <_malloc_r+0xea>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	0028      	movs	r0, r5
 8005ccc:	1aff      	subs	r7, r7, r3
 8005cce:	0039      	movs	r1, r7
 8005cd0:	f7ff ffac 	bl	8005c2c <sbrk_aligned>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d040      	beq.n	8005d5a <_malloc_r+0xea>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	19db      	adds	r3, r3, r7
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	6833      	ldr	r3, [r6, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d133      	bne.n	8005d4e <_malloc_r+0xde>
 8005ce6:	9b00      	ldr	r3, [sp, #0]
 8005ce8:	6033      	str	r3, [r6, #0]
 8005cea:	e019      	b.n	8005d20 <_malloc_r+0xb0>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dac9      	bge.n	8005c84 <_malloc_r+0x14>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	1bc9      	subs	r1, r1, r7
 8005cfc:	d420      	bmi.n	8005d40 <_malloc_r+0xd0>
 8005cfe:	290b      	cmp	r1, #11
 8005d00:	d90a      	bls.n	8005d18 <_malloc_r+0xa8>
 8005d02:	19e2      	adds	r2, r4, r7
 8005d04:	6027      	str	r7, [r4, #0]
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	d104      	bne.n	8005d14 <_malloc_r+0xa4>
 8005d0a:	6032      	str	r2, [r6, #0]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	e005      	b.n	8005d20 <_malloc_r+0xb0>
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e7f9      	b.n	8005d0c <_malloc_r+0x9c>
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d10e      	bne.n	8005d3c <_malloc_r+0xcc>
 8005d1e:	6032      	str	r2, [r6, #0]
 8005d20:	0028      	movs	r0, r5
 8005d22:	f000 f82d 	bl	8005d80 <__malloc_unlock>
 8005d26:	0020      	movs	r0, r4
 8005d28:	2207      	movs	r2, #7
 8005d2a:	300b      	adds	r0, #11
 8005d2c:	1d23      	adds	r3, r4, #4
 8005d2e:	4390      	bics	r0, r2
 8005d30:	1ac2      	subs	r2, r0, r3
 8005d32:	4298      	cmp	r0, r3
 8005d34:	d0df      	beq.n	8005cf6 <_malloc_r+0x86>
 8005d36:	1a1b      	subs	r3, r3, r0
 8005d38:	50a3      	str	r3, [r4, r2]
 8005d3a:	e7dc      	b.n	8005cf6 <_malloc_r+0x86>
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	e7ef      	b.n	8005d20 <_malloc_r+0xb0>
 8005d40:	0023      	movs	r3, r4
 8005d42:	6864      	ldr	r4, [r4, #4]
 8005d44:	e7a6      	b.n	8005c94 <_malloc_r+0x24>
 8005d46:	9c00      	ldr	r4, [sp, #0]
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	e7ad      	b.n	8005caa <_malloc_r+0x3a>
 8005d4e:	001a      	movs	r2, r3
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	d1fb      	bne.n	8005d4e <_malloc_r+0xde>
 8005d56:	2300      	movs	r3, #0
 8005d58:	e7da      	b.n	8005d10 <_malloc_r+0xa0>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	0028      	movs	r0, r5
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f000 f80e 	bl	8005d80 <__malloc_unlock>
 8005d64:	e7c6      	b.n	8005cf4 <_malloc_r+0x84>
 8005d66:	6007      	str	r7, [r0, #0]
 8005d68:	e7da      	b.n	8005d20 <_malloc_r+0xb0>
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	20000388 	.word	0x20000388

08005d70 <__malloc_lock>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4802      	ldr	r0, [pc, #8]	@ (8005d7c <__malloc_lock+0xc>)
 8005d74:	f7ff ff0e 	bl	8005b94 <__retarget_lock_acquire_recursive>
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	20000380 	.word	0x20000380

08005d80 <__malloc_unlock>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4802      	ldr	r0, [pc, #8]	@ (8005d8c <__malloc_unlock+0xc>)
 8005d84:	f7ff ff07 	bl	8005b96 <__retarget_lock_release_recursive>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	20000380 	.word	0x20000380

08005d90 <__ssputs_r>:
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d92:	688e      	ldr	r6, [r1, #8]
 8005d94:	b085      	sub	sp, #20
 8005d96:	001f      	movs	r7, r3
 8005d98:	000c      	movs	r4, r1
 8005d9a:	680b      	ldr	r3, [r1, #0]
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9203      	str	r2, [sp, #12]
 8005da0:	42be      	cmp	r6, r7
 8005da2:	d830      	bhi.n	8005e06 <__ssputs_r+0x76>
 8005da4:	210c      	movs	r1, #12
 8005da6:	5e62      	ldrsh	r2, [r4, r1]
 8005da8:	2190      	movs	r1, #144	@ 0x90
 8005daa:	00c9      	lsls	r1, r1, #3
 8005dac:	420a      	tst	r2, r1
 8005dae:	d028      	beq.n	8005e02 <__ssputs_r+0x72>
 8005db0:	2003      	movs	r0, #3
 8005db2:	6921      	ldr	r1, [r4, #16]
 8005db4:	1a5b      	subs	r3, r3, r1
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	6963      	ldr	r3, [r4, #20]
 8005dba:	4343      	muls	r3, r0
 8005dbc:	9801      	ldr	r0, [sp, #4]
 8005dbe:	0fdd      	lsrs	r5, r3, #31
 8005dc0:	18ed      	adds	r5, r5, r3
 8005dc2:	1c7b      	adds	r3, r7, #1
 8005dc4:	181b      	adds	r3, r3, r0
 8005dc6:	106d      	asrs	r5, r5, #1
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	d900      	bls.n	8005dce <__ssputs_r+0x3e>
 8005dcc:	001d      	movs	r5, r3
 8005dce:	0552      	lsls	r2, r2, #21
 8005dd0:	d528      	bpl.n	8005e24 <__ssputs_r+0x94>
 8005dd2:	0029      	movs	r1, r5
 8005dd4:	9802      	ldr	r0, [sp, #8]
 8005dd6:	f7ff ff4b 	bl	8005c70 <_malloc_r>
 8005dda:	1e06      	subs	r6, r0, #0
 8005ddc:	d02c      	beq.n	8005e38 <__ssputs_r+0xa8>
 8005dde:	9a01      	ldr	r2, [sp, #4]
 8005de0:	6921      	ldr	r1, [r4, #16]
 8005de2:	f000 fae2 	bl	80063aa <memcpy>
 8005de6:	89a2      	ldrh	r2, [r4, #12]
 8005de8:	4b18      	ldr	r3, [pc, #96]	@ (8005e4c <__ssputs_r+0xbc>)
 8005dea:	401a      	ands	r2, r3
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	4313      	orrs	r3, r2
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	6126      	str	r6, [r4, #16]
 8005df6:	18f6      	adds	r6, r6, r3
 8005df8:	6026      	str	r6, [r4, #0]
 8005dfa:	003e      	movs	r6, r7
 8005dfc:	6165      	str	r5, [r4, #20]
 8005dfe:	1aed      	subs	r5, r5, r3
 8005e00:	60a5      	str	r5, [r4, #8]
 8005e02:	42be      	cmp	r6, r7
 8005e04:	d900      	bls.n	8005e08 <__ssputs_r+0x78>
 8005e06:	003e      	movs	r6, r7
 8005e08:	0032      	movs	r2, r6
 8005e0a:	9903      	ldr	r1, [sp, #12]
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	f000 fa9b 	bl	8006348 <memmove>
 8005e12:	2000      	movs	r0, #0
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	1b9b      	subs	r3, r3, r6
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	199b      	adds	r3, r3, r6
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	b005      	add	sp, #20
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e24:	002a      	movs	r2, r5
 8005e26:	9802      	ldr	r0, [sp, #8]
 8005e28:	f000 fac8 	bl	80063bc <_realloc_r>
 8005e2c:	1e06      	subs	r6, r0, #0
 8005e2e:	d1e0      	bne.n	8005df2 <__ssputs_r+0x62>
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	9802      	ldr	r0, [sp, #8]
 8005e34:	f7ff feb0 	bl	8005b98 <_free_r>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	9a02      	ldr	r2, [sp, #8]
 8005e3e:	4240      	negs	r0, r0
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	89a2      	ldrh	r2, [r4, #12]
 8005e44:	3334      	adds	r3, #52	@ 0x34
 8005e46:	4313      	orrs	r3, r2
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	e7e9      	b.n	8005e20 <__ssputs_r+0x90>
 8005e4c:	fffffb7f 	.word	0xfffffb7f

08005e50 <_svfiprintf_r>:
 8005e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e52:	b0a1      	sub	sp, #132	@ 0x84
 8005e54:	9003      	str	r0, [sp, #12]
 8005e56:	001d      	movs	r5, r3
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	000f      	movs	r7, r1
 8005e5c:	0016      	movs	r6, r2
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	d511      	bpl.n	8005e86 <_svfiprintf_r+0x36>
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10e      	bne.n	8005e86 <_svfiprintf_r+0x36>
 8005e68:	2140      	movs	r1, #64	@ 0x40
 8005e6a:	f7ff ff01 	bl	8005c70 <_malloc_r>
 8005e6e:	6038      	str	r0, [r7, #0]
 8005e70:	6138      	str	r0, [r7, #16]
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d105      	bne.n	8005e82 <_svfiprintf_r+0x32>
 8005e76:	230c      	movs	r3, #12
 8005e78:	9a03      	ldr	r2, [sp, #12]
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	4240      	negs	r0, r0
 8005e80:	e0cf      	b.n	8006022 <_svfiprintf_r+0x1d2>
 8005e82:	2340      	movs	r3, #64	@ 0x40
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	2300      	movs	r3, #0
 8005e88:	ac08      	add	r4, sp, #32
 8005e8a:	6163      	str	r3, [r4, #20]
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	7663      	strb	r3, [r4, #25]
 8005e90:	3310      	adds	r3, #16
 8005e92:	76a3      	strb	r3, [r4, #26]
 8005e94:	9507      	str	r5, [sp, #28]
 8005e96:	0035      	movs	r5, r6
 8005e98:	782b      	ldrb	r3, [r5, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <_svfiprintf_r+0x52>
 8005e9e:	2b25      	cmp	r3, #37	@ 0x25
 8005ea0:	d148      	bne.n	8005f34 <_svfiprintf_r+0xe4>
 8005ea2:	1bab      	subs	r3, r5, r6
 8005ea4:	9305      	str	r3, [sp, #20]
 8005ea6:	42b5      	cmp	r5, r6
 8005ea8:	d00b      	beq.n	8005ec2 <_svfiprintf_r+0x72>
 8005eaa:	0032      	movs	r2, r6
 8005eac:	0039      	movs	r1, r7
 8005eae:	9803      	ldr	r0, [sp, #12]
 8005eb0:	f7ff ff6e 	bl	8005d90 <__ssputs_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d100      	bne.n	8005eba <_svfiprintf_r+0x6a>
 8005eb8:	e0ae      	b.n	8006018 <_svfiprintf_r+0x1c8>
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	9a05      	ldr	r2, [sp, #20]
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	6163      	str	r3, [r4, #20]
 8005ec2:	782b      	ldrb	r3, [r5, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d100      	bne.n	8005eca <_svfiprintf_r+0x7a>
 8005ec8:	e0a6      	b.n	8006018 <_svfiprintf_r+0x1c8>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4252      	negs	r2, r2
 8005ed0:	6062      	str	r2, [r4, #4]
 8005ed2:	a904      	add	r1, sp, #16
 8005ed4:	3254      	adds	r2, #84	@ 0x54
 8005ed6:	1852      	adds	r2, r2, r1
 8005ed8:	1c6e      	adds	r6, r5, #1
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	60e3      	str	r3, [r4, #12]
 8005ede:	60a3      	str	r3, [r4, #8]
 8005ee0:	7013      	strb	r3, [r2, #0]
 8005ee2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ee4:	4b54      	ldr	r3, [pc, #336]	@ (8006038 <_svfiprintf_r+0x1e8>)
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	0018      	movs	r0, r3
 8005eea:	7831      	ldrb	r1, [r6, #0]
 8005eec:	9305      	str	r3, [sp, #20]
 8005eee:	f000 fa51 	bl	8006394 <memchr>
 8005ef2:	1c75      	adds	r5, r6, #1
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d11f      	bne.n	8005f38 <_svfiprintf_r+0xe8>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	06d3      	lsls	r3, r2, #27
 8005efc:	d504      	bpl.n	8005f08 <_svfiprintf_r+0xb8>
 8005efe:	2353      	movs	r3, #83	@ 0x53
 8005f00:	a904      	add	r1, sp, #16
 8005f02:	185b      	adds	r3, r3, r1
 8005f04:	2120      	movs	r1, #32
 8005f06:	7019      	strb	r1, [r3, #0]
 8005f08:	0713      	lsls	r3, r2, #28
 8005f0a:	d504      	bpl.n	8005f16 <_svfiprintf_r+0xc6>
 8005f0c:	2353      	movs	r3, #83	@ 0x53
 8005f0e:	a904      	add	r1, sp, #16
 8005f10:	185b      	adds	r3, r3, r1
 8005f12:	212b      	movs	r1, #43	@ 0x2b
 8005f14:	7019      	strb	r1, [r3, #0]
 8005f16:	7833      	ldrb	r3, [r6, #0]
 8005f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f1a:	d016      	beq.n	8005f4a <_svfiprintf_r+0xfa>
 8005f1c:	0035      	movs	r5, r6
 8005f1e:	2100      	movs	r1, #0
 8005f20:	200a      	movs	r0, #10
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	782a      	ldrb	r2, [r5, #0]
 8005f26:	1c6e      	adds	r6, r5, #1
 8005f28:	3a30      	subs	r2, #48	@ 0x30
 8005f2a:	2a09      	cmp	r2, #9
 8005f2c:	d950      	bls.n	8005fd0 <_svfiprintf_r+0x180>
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d111      	bne.n	8005f56 <_svfiprintf_r+0x106>
 8005f32:	e017      	b.n	8005f64 <_svfiprintf_r+0x114>
 8005f34:	3501      	adds	r5, #1
 8005f36:	e7af      	b.n	8005e98 <_svfiprintf_r+0x48>
 8005f38:	9b05      	ldr	r3, [sp, #20]
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	1ac0      	subs	r0, r0, r3
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4083      	lsls	r3, r0
 8005f42:	4313      	orrs	r3, r2
 8005f44:	002e      	movs	r6, r5
 8005f46:	6023      	str	r3, [r4, #0]
 8005f48:	e7cc      	b.n	8005ee4 <_svfiprintf_r+0x94>
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	1d19      	adds	r1, r3, #4
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	9107      	str	r1, [sp, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db01      	blt.n	8005f5a <_svfiprintf_r+0x10a>
 8005f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f58:	e004      	b.n	8005f64 <_svfiprintf_r+0x114>
 8005f5a:	425b      	negs	r3, r3
 8005f5c:	60e3      	str	r3, [r4, #12]
 8005f5e:	2302      	movs	r3, #2
 8005f60:	4313      	orrs	r3, r2
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	782b      	ldrb	r3, [r5, #0]
 8005f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f68:	d10c      	bne.n	8005f84 <_svfiprintf_r+0x134>
 8005f6a:	786b      	ldrb	r3, [r5, #1]
 8005f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f6e:	d134      	bne.n	8005fda <_svfiprintf_r+0x18a>
 8005f70:	9b07      	ldr	r3, [sp, #28]
 8005f72:	3502      	adds	r5, #2
 8005f74:	1d1a      	adds	r2, r3, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	9207      	str	r2, [sp, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da01      	bge.n	8005f82 <_svfiprintf_r+0x132>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	425b      	negs	r3, r3
 8005f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f84:	4e2d      	ldr	r6, [pc, #180]	@ (800603c <_svfiprintf_r+0x1ec>)
 8005f86:	2203      	movs	r2, #3
 8005f88:	0030      	movs	r0, r6
 8005f8a:	7829      	ldrb	r1, [r5, #0]
 8005f8c:	f000 fa02 	bl	8006394 <memchr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d006      	beq.n	8005fa2 <_svfiprintf_r+0x152>
 8005f94:	2340      	movs	r3, #64	@ 0x40
 8005f96:	1b80      	subs	r0, r0, r6
 8005f98:	4083      	lsls	r3, r0
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	7829      	ldrb	r1, [r5, #0]
 8005fa4:	2206      	movs	r2, #6
 8005fa6:	4826      	ldr	r0, [pc, #152]	@ (8006040 <_svfiprintf_r+0x1f0>)
 8005fa8:	1c6e      	adds	r6, r5, #1
 8005faa:	7621      	strb	r1, [r4, #24]
 8005fac:	f000 f9f2 	bl	8006394 <memchr>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d038      	beq.n	8006026 <_svfiprintf_r+0x1d6>
 8005fb4:	4b23      	ldr	r3, [pc, #140]	@ (8006044 <_svfiprintf_r+0x1f4>)
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d122      	bne.n	8006000 <_svfiprintf_r+0x1b0>
 8005fba:	2207      	movs	r2, #7
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	3307      	adds	r3, #7
 8005fc0:	4393      	bics	r3, r2
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	6963      	ldr	r3, [r4, #20]
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	189b      	adds	r3, r3, r2
 8005fcc:	6163      	str	r3, [r4, #20]
 8005fce:	e762      	b.n	8005e96 <_svfiprintf_r+0x46>
 8005fd0:	4343      	muls	r3, r0
 8005fd2:	0035      	movs	r5, r6
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	e7a4      	b.n	8005f24 <_svfiprintf_r+0xd4>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	200a      	movs	r0, #10
 8005fde:	0019      	movs	r1, r3
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	782a      	ldrb	r2, [r5, #0]
 8005fe6:	1c6e      	adds	r6, r5, #1
 8005fe8:	3a30      	subs	r2, #48	@ 0x30
 8005fea:	2a09      	cmp	r2, #9
 8005fec:	d903      	bls.n	8005ff6 <_svfiprintf_r+0x1a6>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0c8      	beq.n	8005f84 <_svfiprintf_r+0x134>
 8005ff2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ff4:	e7c6      	b.n	8005f84 <_svfiprintf_r+0x134>
 8005ff6:	4341      	muls	r1, r0
 8005ff8:	0035      	movs	r5, r6
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	1889      	adds	r1, r1, r2
 8005ffe:	e7f1      	b.n	8005fe4 <_svfiprintf_r+0x194>
 8006000:	aa07      	add	r2, sp, #28
 8006002:	9200      	str	r2, [sp, #0]
 8006004:	0021      	movs	r1, r4
 8006006:	003a      	movs	r2, r7
 8006008:	4b0f      	ldr	r3, [pc, #60]	@ (8006048 <_svfiprintf_r+0x1f8>)
 800600a:	9803      	ldr	r0, [sp, #12]
 800600c:	e000      	b.n	8006010 <_svfiprintf_r+0x1c0>
 800600e:	bf00      	nop
 8006010:	9004      	str	r0, [sp, #16]
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	3301      	adds	r3, #1
 8006016:	d1d6      	bne.n	8005fc6 <_svfiprintf_r+0x176>
 8006018:	89bb      	ldrh	r3, [r7, #12]
 800601a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800601c:	065b      	lsls	r3, r3, #25
 800601e:	d500      	bpl.n	8006022 <_svfiprintf_r+0x1d2>
 8006020:	e72c      	b.n	8005e7c <_svfiprintf_r+0x2c>
 8006022:	b021      	add	sp, #132	@ 0x84
 8006024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006026:	aa07      	add	r2, sp, #28
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	0021      	movs	r1, r4
 800602c:	003a      	movs	r2, r7
 800602e:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <_svfiprintf_r+0x1f8>)
 8006030:	9803      	ldr	r0, [sp, #12]
 8006032:	f000 f87b 	bl	800612c <_printf_i>
 8006036:	e7eb      	b.n	8006010 <_svfiprintf_r+0x1c0>
 8006038:	08006558 	.word	0x08006558
 800603c:	0800655e 	.word	0x0800655e
 8006040:	08006562 	.word	0x08006562
 8006044:	00000000 	.word	0x00000000
 8006048:	08005d91 	.word	0x08005d91

0800604c <_printf_common>:
 800604c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604e:	0016      	movs	r6, r2
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	688a      	ldr	r2, [r1, #8]
 8006054:	690b      	ldr	r3, [r1, #16]
 8006056:	000c      	movs	r4, r1
 8006058:	9000      	str	r0, [sp, #0]
 800605a:	4293      	cmp	r3, r2
 800605c:	da00      	bge.n	8006060 <_printf_common+0x14>
 800605e:	0013      	movs	r3, r2
 8006060:	0022      	movs	r2, r4
 8006062:	6033      	str	r3, [r6, #0]
 8006064:	3243      	adds	r2, #67	@ 0x43
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	2a00      	cmp	r2, #0
 800606a:	d001      	beq.n	8006070 <_printf_common+0x24>
 800606c:	3301      	adds	r3, #1
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	069b      	lsls	r3, r3, #26
 8006074:	d502      	bpl.n	800607c <_printf_common+0x30>
 8006076:	6833      	ldr	r3, [r6, #0]
 8006078:	3302      	adds	r3, #2
 800607a:	6033      	str	r3, [r6, #0]
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	2306      	movs	r3, #6
 8006080:	0015      	movs	r5, r2
 8006082:	401d      	ands	r5, r3
 8006084:	421a      	tst	r2, r3
 8006086:	d027      	beq.n	80060d8 <_printf_common+0x8c>
 8006088:	0023      	movs	r3, r4
 800608a:	3343      	adds	r3, #67	@ 0x43
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	4193      	sbcs	r3, r2
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	0692      	lsls	r2, r2, #26
 8006096:	d430      	bmi.n	80060fa <_printf_common+0xae>
 8006098:	0022      	movs	r2, r4
 800609a:	9901      	ldr	r1, [sp, #4]
 800609c:	9800      	ldr	r0, [sp, #0]
 800609e:	9d08      	ldr	r5, [sp, #32]
 80060a0:	3243      	adds	r2, #67	@ 0x43
 80060a2:	47a8      	blx	r5
 80060a4:	3001      	adds	r0, #1
 80060a6:	d025      	beq.n	80060f4 <_printf_common+0xa8>
 80060a8:	2206      	movs	r2, #6
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	2500      	movs	r5, #0
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d105      	bne.n	80060c0 <_printf_common+0x74>
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	68e5      	ldr	r5, [r4, #12]
 80060b8:	1aed      	subs	r5, r5, r3
 80060ba:	43eb      	mvns	r3, r5
 80060bc:	17db      	asrs	r3, r3, #31
 80060be:	401d      	ands	r5, r3
 80060c0:	68a3      	ldr	r3, [r4, #8]
 80060c2:	6922      	ldr	r2, [r4, #16]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	dd01      	ble.n	80060cc <_printf_common+0x80>
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	18ed      	adds	r5, r5, r3
 80060cc:	2600      	movs	r6, #0
 80060ce:	42b5      	cmp	r5, r6
 80060d0:	d120      	bne.n	8006114 <_printf_common+0xc8>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e010      	b.n	80060f8 <_printf_common+0xac>
 80060d6:	3501      	adds	r5, #1
 80060d8:	68e3      	ldr	r3, [r4, #12]
 80060da:	6832      	ldr	r2, [r6, #0]
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	42ab      	cmp	r3, r5
 80060e0:	ddd2      	ble.n	8006088 <_printf_common+0x3c>
 80060e2:	0022      	movs	r2, r4
 80060e4:	2301      	movs	r3, #1
 80060e6:	9901      	ldr	r1, [sp, #4]
 80060e8:	9800      	ldr	r0, [sp, #0]
 80060ea:	9f08      	ldr	r7, [sp, #32]
 80060ec:	3219      	adds	r2, #25
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	d1f0      	bne.n	80060d6 <_printf_common+0x8a>
 80060f4:	2001      	movs	r0, #1
 80060f6:	4240      	negs	r0, r0
 80060f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060fa:	2030      	movs	r0, #48	@ 0x30
 80060fc:	18e1      	adds	r1, r4, r3
 80060fe:	3143      	adds	r1, #67	@ 0x43
 8006100:	7008      	strb	r0, [r1, #0]
 8006102:	0021      	movs	r1, r4
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	3145      	adds	r1, #69	@ 0x45
 8006108:	7809      	ldrb	r1, [r1, #0]
 800610a:	18a2      	adds	r2, r4, r2
 800610c:	3243      	adds	r2, #67	@ 0x43
 800610e:	3302      	adds	r3, #2
 8006110:	7011      	strb	r1, [r2, #0]
 8006112:	e7c1      	b.n	8006098 <_printf_common+0x4c>
 8006114:	0022      	movs	r2, r4
 8006116:	2301      	movs	r3, #1
 8006118:	9901      	ldr	r1, [sp, #4]
 800611a:	9800      	ldr	r0, [sp, #0]
 800611c:	9f08      	ldr	r7, [sp, #32]
 800611e:	321a      	adds	r2, #26
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa8>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d1      	b.n	80060ce <_printf_common+0x82>
	...

0800612c <_printf_i>:
 800612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612e:	b08b      	sub	sp, #44	@ 0x2c
 8006130:	9206      	str	r2, [sp, #24]
 8006132:	000a      	movs	r2, r1
 8006134:	3243      	adds	r2, #67	@ 0x43
 8006136:	9307      	str	r3, [sp, #28]
 8006138:	9005      	str	r0, [sp, #20]
 800613a:	9203      	str	r2, [sp, #12]
 800613c:	7e0a      	ldrb	r2, [r1, #24]
 800613e:	000c      	movs	r4, r1
 8006140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006142:	2a78      	cmp	r2, #120	@ 0x78
 8006144:	d809      	bhi.n	800615a <_printf_i+0x2e>
 8006146:	2a62      	cmp	r2, #98	@ 0x62
 8006148:	d80b      	bhi.n	8006162 <_printf_i+0x36>
 800614a:	2a00      	cmp	r2, #0
 800614c:	d100      	bne.n	8006150 <_printf_i+0x24>
 800614e:	e0bc      	b.n	80062ca <_printf_i+0x19e>
 8006150:	497b      	ldr	r1, [pc, #492]	@ (8006340 <_printf_i+0x214>)
 8006152:	9104      	str	r1, [sp, #16]
 8006154:	2a58      	cmp	r2, #88	@ 0x58
 8006156:	d100      	bne.n	800615a <_printf_i+0x2e>
 8006158:	e090      	b.n	800627c <_printf_i+0x150>
 800615a:	0025      	movs	r5, r4
 800615c:	3542      	adds	r5, #66	@ 0x42
 800615e:	702a      	strb	r2, [r5, #0]
 8006160:	e022      	b.n	80061a8 <_printf_i+0x7c>
 8006162:	0010      	movs	r0, r2
 8006164:	3863      	subs	r0, #99	@ 0x63
 8006166:	2815      	cmp	r0, #21
 8006168:	d8f7      	bhi.n	800615a <_printf_i+0x2e>
 800616a:	f7f9 ffd3 	bl	8000114 <__gnu_thumb1_case_shi>
 800616e:	0016      	.short	0x0016
 8006170:	fff6001f 	.word	0xfff6001f
 8006174:	fff6fff6 	.word	0xfff6fff6
 8006178:	001ffff6 	.word	0x001ffff6
 800617c:	fff6fff6 	.word	0xfff6fff6
 8006180:	fff6fff6 	.word	0xfff6fff6
 8006184:	003600a1 	.word	0x003600a1
 8006188:	fff60080 	.word	0xfff60080
 800618c:	00b2fff6 	.word	0x00b2fff6
 8006190:	0036fff6 	.word	0x0036fff6
 8006194:	fff6fff6 	.word	0xfff6fff6
 8006198:	0084      	.short	0x0084
 800619a:	0025      	movs	r5, r4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	3542      	adds	r5, #66	@ 0x42
 80061a0:	1d11      	adds	r1, r2, #4
 80061a2:	6019      	str	r1, [r3, #0]
 80061a4:	6813      	ldr	r3, [r2, #0]
 80061a6:	702b      	strb	r3, [r5, #0]
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a0      	b.n	80062ee <_printf_i+0x1c2>
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	6809      	ldr	r1, [r1, #0]
 80061b0:	1d02      	adds	r2, r0, #4
 80061b2:	060d      	lsls	r5, r1, #24
 80061b4:	d50b      	bpl.n	80061ce <_printf_i+0xa2>
 80061b6:	6806      	ldr	r6, [r0, #0]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	da03      	bge.n	80061c6 <_printf_i+0x9a>
 80061be:	232d      	movs	r3, #45	@ 0x2d
 80061c0:	9a03      	ldr	r2, [sp, #12]
 80061c2:	4276      	negs	r6, r6
 80061c4:	7013      	strb	r3, [r2, #0]
 80061c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006340 <_printf_i+0x214>)
 80061c8:	270a      	movs	r7, #10
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	e018      	b.n	8006200 <_printf_i+0xd4>
 80061ce:	6806      	ldr	r6, [r0, #0]
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	0649      	lsls	r1, r1, #25
 80061d4:	d5f1      	bpl.n	80061ba <_printf_i+0x8e>
 80061d6:	b236      	sxth	r6, r6
 80061d8:	e7ef      	b.n	80061ba <_printf_i+0x8e>
 80061da:	6808      	ldr	r0, [r1, #0]
 80061dc:	6819      	ldr	r1, [r3, #0]
 80061de:	c940      	ldmia	r1!, {r6}
 80061e0:	0605      	lsls	r5, r0, #24
 80061e2:	d402      	bmi.n	80061ea <_printf_i+0xbe>
 80061e4:	0640      	lsls	r0, r0, #25
 80061e6:	d500      	bpl.n	80061ea <_printf_i+0xbe>
 80061e8:	b2b6      	uxth	r6, r6
 80061ea:	6019      	str	r1, [r3, #0]
 80061ec:	4b54      	ldr	r3, [pc, #336]	@ (8006340 <_printf_i+0x214>)
 80061ee:	270a      	movs	r7, #10
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80061f4:	d100      	bne.n	80061f8 <_printf_i+0xcc>
 80061f6:	3f02      	subs	r7, #2
 80061f8:	0023      	movs	r3, r4
 80061fa:	2200      	movs	r2, #0
 80061fc:	3343      	adds	r3, #67	@ 0x43
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	60a3      	str	r3, [r4, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	db03      	blt.n	8006210 <_printf_i+0xe4>
 8006208:	2104      	movs	r1, #4
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	438a      	bics	r2, r1
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	2e00      	cmp	r6, #0
 8006212:	d102      	bne.n	800621a <_printf_i+0xee>
 8006214:	9d03      	ldr	r5, [sp, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <_printf_i+0x108>
 800621a:	9d03      	ldr	r5, [sp, #12]
 800621c:	0030      	movs	r0, r6
 800621e:	0039      	movs	r1, r7
 8006220:	f7fa f808 	bl	8000234 <__aeabi_uidivmod>
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	3d01      	subs	r5, #1
 8006228:	5c5b      	ldrb	r3, [r3, r1]
 800622a:	702b      	strb	r3, [r5, #0]
 800622c:	0033      	movs	r3, r6
 800622e:	0006      	movs	r6, r0
 8006230:	429f      	cmp	r7, r3
 8006232:	d9f3      	bls.n	800621c <_printf_i+0xf0>
 8006234:	2f08      	cmp	r7, #8
 8006236:	d109      	bne.n	800624c <_printf_i+0x120>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07db      	lsls	r3, r3, #31
 800623c:	d506      	bpl.n	800624c <_printf_i+0x120>
 800623e:	6862      	ldr	r2, [r4, #4]
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	dc02      	bgt.n	800624c <_printf_i+0x120>
 8006246:	2330      	movs	r3, #48	@ 0x30
 8006248:	3d01      	subs	r5, #1
 800624a:	702b      	strb	r3, [r5, #0]
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	1b5b      	subs	r3, r3, r5
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	0021      	movs	r1, r4
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	9805      	ldr	r0, [sp, #20]
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	aa09      	add	r2, sp, #36	@ 0x24
 800625e:	f7ff fef5 	bl	800604c <_printf_common>
 8006262:	3001      	adds	r0, #1
 8006264:	d148      	bne.n	80062f8 <_printf_i+0x1cc>
 8006266:	2001      	movs	r0, #1
 8006268:	4240      	negs	r0, r0
 800626a:	b00b      	add	sp, #44	@ 0x2c
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	2220      	movs	r2, #32
 8006270:	6809      	ldr	r1, [r1, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	6022      	str	r2, [r4, #0]
 8006276:	2278      	movs	r2, #120	@ 0x78
 8006278:	4932      	ldr	r1, [pc, #200]	@ (8006344 <_printf_i+0x218>)
 800627a:	9104      	str	r1, [sp, #16]
 800627c:	0021      	movs	r1, r4
 800627e:	3145      	adds	r1, #69	@ 0x45
 8006280:	700a      	strb	r2, [r1, #0]
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	c940      	ldmia	r1!, {r6}
 8006288:	0610      	lsls	r0, r2, #24
 800628a:	d402      	bmi.n	8006292 <_printf_i+0x166>
 800628c:	0650      	lsls	r0, r2, #25
 800628e:	d500      	bpl.n	8006292 <_printf_i+0x166>
 8006290:	b2b6      	uxth	r6, r6
 8006292:	6019      	str	r1, [r3, #0]
 8006294:	07d3      	lsls	r3, r2, #31
 8006296:	d502      	bpl.n	800629e <_printf_i+0x172>
 8006298:	2320      	movs	r3, #32
 800629a:	4313      	orrs	r3, r2
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	2e00      	cmp	r6, #0
 80062a0:	d001      	beq.n	80062a6 <_printf_i+0x17a>
 80062a2:	2710      	movs	r7, #16
 80062a4:	e7a8      	b.n	80061f8 <_printf_i+0xcc>
 80062a6:	2220      	movs	r2, #32
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	4393      	bics	r3, r2
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	e7f8      	b.n	80062a2 <_printf_i+0x176>
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	680d      	ldr	r5, [r1, #0]
 80062b4:	1d10      	adds	r0, r2, #4
 80062b6:	6949      	ldr	r1, [r1, #20]
 80062b8:	6018      	str	r0, [r3, #0]
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	062e      	lsls	r6, r5, #24
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x198>
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x19e>
 80062c4:	066d      	lsls	r5, r5, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x194>
 80062c8:	8019      	strh	r1, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9d03      	ldr	r5, [sp, #12]
 80062ce:	6123      	str	r3, [r4, #16]
 80062d0:	e7bf      	b.n	8006252 <_printf_i+0x126>
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	1d11      	adds	r1, r2, #4
 80062d6:	6019      	str	r1, [r3, #0]
 80062d8:	6815      	ldr	r5, [r2, #0]
 80062da:	2100      	movs	r1, #0
 80062dc:	0028      	movs	r0, r5
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	f000 f858 	bl	8006394 <memchr>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d001      	beq.n	80062ec <_printf_i+0x1c0>
 80062e8:	1b40      	subs	r0, r0, r5
 80062ea:	6060      	str	r0, [r4, #4]
 80062ec:	6863      	ldr	r3, [r4, #4]
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9a03      	ldr	r2, [sp, #12]
 80062f4:	7013      	strb	r3, [r2, #0]
 80062f6:	e7ac      	b.n	8006252 <_printf_i+0x126>
 80062f8:	002a      	movs	r2, r5
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	9906      	ldr	r1, [sp, #24]
 80062fe:	9805      	ldr	r0, [sp, #20]
 8006300:	9d07      	ldr	r5, [sp, #28]
 8006302:	47a8      	blx	r5
 8006304:	3001      	adds	r0, #1
 8006306:	d0ae      	beq.n	8006266 <_printf_i+0x13a>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	d415      	bmi.n	800633a <_printf_i+0x20e>
 800630e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	4298      	cmp	r0, r3
 8006314:	daa9      	bge.n	800626a <_printf_i+0x13e>
 8006316:	0018      	movs	r0, r3
 8006318:	e7a7      	b.n	800626a <_printf_i+0x13e>
 800631a:	0022      	movs	r2, r4
 800631c:	2301      	movs	r3, #1
 800631e:	9906      	ldr	r1, [sp, #24]
 8006320:	9805      	ldr	r0, [sp, #20]
 8006322:	9e07      	ldr	r6, [sp, #28]
 8006324:	3219      	adds	r2, #25
 8006326:	47b0      	blx	r6
 8006328:	3001      	adds	r0, #1
 800632a:	d09c      	beq.n	8006266 <_printf_i+0x13a>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf0      	bgt.n	800631a <_printf_i+0x1ee>
 8006338:	e7e9      	b.n	800630e <_printf_i+0x1e2>
 800633a:	2500      	movs	r5, #0
 800633c:	e7f7      	b.n	800632e <_printf_i+0x202>
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	08006569 	.word	0x08006569
 8006344:	0800657a 	.word	0x0800657a

08006348 <memmove>:
 8006348:	b510      	push	{r4, lr}
 800634a:	4288      	cmp	r0, r1
 800634c:	d806      	bhi.n	800635c <memmove+0x14>
 800634e:	2300      	movs	r3, #0
 8006350:	429a      	cmp	r2, r3
 8006352:	d008      	beq.n	8006366 <memmove+0x1e>
 8006354:	5ccc      	ldrb	r4, [r1, r3]
 8006356:	54c4      	strb	r4, [r0, r3]
 8006358:	3301      	adds	r3, #1
 800635a:	e7f9      	b.n	8006350 <memmove+0x8>
 800635c:	188b      	adds	r3, r1, r2
 800635e:	4298      	cmp	r0, r3
 8006360:	d2f5      	bcs.n	800634e <memmove+0x6>
 8006362:	3a01      	subs	r2, #1
 8006364:	d200      	bcs.n	8006368 <memmove+0x20>
 8006366:	bd10      	pop	{r4, pc}
 8006368:	5c8b      	ldrb	r3, [r1, r2]
 800636a:	5483      	strb	r3, [r0, r2]
 800636c:	e7f9      	b.n	8006362 <memmove+0x1a>
	...

08006370 <_sbrk_r>:
 8006370:	2300      	movs	r3, #0
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	4d06      	ldr	r5, [pc, #24]	@ (8006390 <_sbrk_r+0x20>)
 8006376:	0004      	movs	r4, r0
 8006378:	0008      	movs	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fa fed0 	bl	8001120 <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d103      	bne.n	800638c <_sbrk_r+0x1c>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d000      	beq.n	800638c <_sbrk_r+0x1c>
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	bd70      	pop	{r4, r5, r6, pc}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	2000037c 	.word	0x2000037c

08006394 <memchr>:
 8006394:	b2c9      	uxtb	r1, r1
 8006396:	1882      	adds	r2, r0, r2
 8006398:	4290      	cmp	r0, r2
 800639a:	d101      	bne.n	80063a0 <memchr+0xc>
 800639c:	2000      	movs	r0, #0
 800639e:	4770      	bx	lr
 80063a0:	7803      	ldrb	r3, [r0, #0]
 80063a2:	428b      	cmp	r3, r1
 80063a4:	d0fb      	beq.n	800639e <memchr+0xa>
 80063a6:	3001      	adds	r0, #1
 80063a8:	e7f6      	b.n	8006398 <memchr+0x4>

080063aa <memcpy>:
 80063aa:	2300      	movs	r3, #0
 80063ac:	b510      	push	{r4, lr}
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d100      	bne.n	80063b4 <memcpy+0xa>
 80063b2:	bd10      	pop	{r4, pc}
 80063b4:	5ccc      	ldrb	r4, [r1, r3]
 80063b6:	54c4      	strb	r4, [r0, r3]
 80063b8:	3301      	adds	r3, #1
 80063ba:	e7f8      	b.n	80063ae <memcpy+0x4>

080063bc <_realloc_r>:
 80063bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063be:	0006      	movs	r6, r0
 80063c0:	000c      	movs	r4, r1
 80063c2:	0015      	movs	r5, r2
 80063c4:	2900      	cmp	r1, #0
 80063c6:	d105      	bne.n	80063d4 <_realloc_r+0x18>
 80063c8:	0011      	movs	r1, r2
 80063ca:	f7ff fc51 	bl	8005c70 <_malloc_r>
 80063ce:	0004      	movs	r4, r0
 80063d0:	0020      	movs	r0, r4
 80063d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	d103      	bne.n	80063e0 <_realloc_r+0x24>
 80063d8:	f7ff fbde 	bl	8005b98 <_free_r>
 80063dc:	2400      	movs	r4, #0
 80063de:	e7f7      	b.n	80063d0 <_realloc_r+0x14>
 80063e0:	f000 f81b 	bl	800641a <_malloc_usable_size_r>
 80063e4:	0007      	movs	r7, r0
 80063e6:	4285      	cmp	r5, r0
 80063e8:	d802      	bhi.n	80063f0 <_realloc_r+0x34>
 80063ea:	0843      	lsrs	r3, r0, #1
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	d3ef      	bcc.n	80063d0 <_realloc_r+0x14>
 80063f0:	0029      	movs	r1, r5
 80063f2:	0030      	movs	r0, r6
 80063f4:	f7ff fc3c 	bl	8005c70 <_malloc_r>
 80063f8:	9001      	str	r0, [sp, #4]
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d0ee      	beq.n	80063dc <_realloc_r+0x20>
 80063fe:	002a      	movs	r2, r5
 8006400:	42bd      	cmp	r5, r7
 8006402:	d900      	bls.n	8006406 <_realloc_r+0x4a>
 8006404:	003a      	movs	r2, r7
 8006406:	0021      	movs	r1, r4
 8006408:	9801      	ldr	r0, [sp, #4]
 800640a:	f7ff ffce 	bl	80063aa <memcpy>
 800640e:	0021      	movs	r1, r4
 8006410:	0030      	movs	r0, r6
 8006412:	f7ff fbc1 	bl	8005b98 <_free_r>
 8006416:	9c01      	ldr	r4, [sp, #4]
 8006418:	e7da      	b.n	80063d0 <_realloc_r+0x14>

0800641a <_malloc_usable_size_r>:
 800641a:	1f0b      	subs	r3, r1, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1f18      	subs	r0, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	da01      	bge.n	8006428 <_malloc_usable_size_r+0xe>
 8006424:	580b      	ldr	r3, [r1, r0]
 8006426:	18c0      	adds	r0, r0, r3
 8006428:	4770      	bx	lr
	...

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
