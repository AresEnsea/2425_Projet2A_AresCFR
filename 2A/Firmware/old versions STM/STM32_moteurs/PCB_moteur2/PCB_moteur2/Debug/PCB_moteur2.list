
PCB_moteur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800685c  0800685c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  0800685c  0800685c  0000785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006864  08006864  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006864  08006864  00007864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006868  08006868  00007868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800686c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000000c  08006878  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006878  00008364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a8  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034dc  00000000  00000000  000231e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  000266c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001272  00000000  00000000  00027e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fe8  00000000  00000000  000290d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cef9  00000000  00000000  000520ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111cf4  00000000  00000000  0006efb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180ca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  00180cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018726c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006804 	.word	0x08006804

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006804 	.word	0x08006804

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f006 f943 	bl	80067ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 fb1b 	bl	8001bcc <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fac1 	bl	8000b22 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f002 f930 	bl	8002810 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fab4 	bl	8000b22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fcb4 	bl	8001f44 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 fa9e 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	14f00020 	.word	0x14f00020

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a0      	sub	sp, #128	@ 0x80
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	2254      	movs	r2, #84	@ 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f006 f8c7 	bl	80067ac <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d14d      	bne.n	80006c4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fb99 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 fa6d 	bl	8000b22 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067c:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000690:	2302      	movs	r3, #2
 8000692:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	2303      	movs	r3, #3
 8000696:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 fa9f 	bl	8002be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_V_Pin|BUS_Imes_Pin;
 80006aa:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80006ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b0:	2303      	movs	r3, #3
 80006b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <HAL_ADC_MspInit+0xd8>)
 80006c0:	f002 fa92 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c4:	bf00      	nop
 80006c6:	3780      	adds	r7, #128	@ 0x80
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b50      	ldr	r3, [pc, #320]	@ (800082c <MX_GPIO_Init+0x158>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a4f      	ldr	r2, [pc, #316]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_GPIO_Init+0x158>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a49      	ldr	r2, [pc, #292]	@ (800082c <MX_GPIO_Init+0x158>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <MX_GPIO_Init+0x158>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <MX_GPIO_Init+0x158>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a43      	ldr	r2, [pc, #268]	@ (800082c <MX_GPIO_Init+0x158>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b41      	ldr	r3, [pc, #260]	@ (800082c <MX_GPIO_Init+0x158>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <MX_GPIO_Init+0x158>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a3d      	ldr	r2, [pc, #244]	@ (800082c <MX_GPIO_Init+0x158>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <MX_GPIO_Init+0x158>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_GPIO_Init+0x158>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a37      	ldr	r2, [pc, #220]	@ (800082c <MX_GPIO_Init+0x158>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_GPIO_Init+0x158>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8000768:	4831      	ldr	r0, [pc, #196]	@ (8000830 <MX_GPIO_Init+0x15c>)
 800076a:	f002 fbbf 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f002 fbb8 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin;
 800077c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	@ (8000830 <MX_GPIO_Init+0x15c>)
 8000796:	f002 fa27 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_Z_Pin;
 800079a:	2304      	movs	r3, #4
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <MX_GPIO_Init+0x15c>)
 80007ae:	f002 fa1b 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f002 fa0d 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80007ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f002 f9fd 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80007ee:	2304      	movs	r3, #4
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0x160>)
 8000804:	f002 f9f0 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x164>)
 800081e:	f002 f9e3 	bl	8002be8 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800
 8000834:	48000c00 	.word	0x48000c00
 8000838:	48000400 	.word	0x48000400

0800083c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30D29DE4;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f002 fb6a 	bl	8002f50 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 f94e 	bl	8000b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f002 fbfc 	bl	8003086 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f945 	bl	8000b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f002 fc3e 	bl	800311c <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f93c 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000094 	.word	0x20000094
 80008b4:	40005800 	.word	0x40005800
 80008b8:	30d29de4 	.word	0x30d29de4

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09e      	sub	sp, #120	@ 0x78
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2254      	movs	r2, #84	@ 0x54
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 ff65 	bl	80067ac <memset>
  if(i2cHandle->Instance==I2C2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <HAL_I2C_MspInit+0xa8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d137      	bne.n	800095c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 fa39 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f000 f90d 	bl	8000b22 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000932:	2304      	movs	r3, #4
 8000934:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f002 f952 	bl	8002be8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800094a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800094e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3778      	adds	r7, #120	@ 0x78
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005800 	.word	0x40005800
 8000968:	40021000 	.word	0x40021000

0800096c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af04      	add	r7, sp, #16

	/* USER CODE BEGIN 1 */
	float speed = 0;
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	float inc = 1;
 8000978:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800097c:	607b      	str	r3, [r7, #4]
	float acc = 1;
 800097e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000982:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000984:	f000 feb9 	bl	80016fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000988:	f000 f882 	bl	8000a90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800098c:	f7ff fea2 	bl	80006d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000990:	f000 fa90 	bl	8000eb4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000994:	f000 fb04 	bl	8000fa0 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000998:	f7ff fdb6 	bl	8000508 <MX_ADC1_Init>
	MX_I2C2_Init();
 800099c:	f7ff ff4e 	bl	800083c <MX_I2C2_Init>
	MX_TIM1_Init();
 80009a0:	f000 fa2e 	bl	8000e00 <MX_TIM1_Init>
	MX_TIM16_Init();
 80009a4:	f000 fb8a 	bl	80010bc <MX_TIM16_Init>
	MX_USART1_UART_Init();
 80009a8:	f000 fd4c 	bl	8001444 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80009ac:	f000 fd96 	bl	80014dc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b6:	4830      	ldr	r0, [pc, #192]	@ (8000a78 <main+0x10c>)
 80009b8:	f002 fa98 	bl	8002eec <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009bc:	2108      	movs	r1, #8
 80009be:	482f      	ldr	r0, [pc, #188]	@ (8000a7c <main+0x110>)
 80009c0:	f003 fd3e 	bl	8004440 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009c4:	2100      	movs	r1, #0
 80009c6:	482e      	ldr	r0, [pc, #184]	@ (8000a80 <main+0x114>)
 80009c8:	f003 fd3a 	bl	8004440 <HAL_TIM_PWM_Start>


	Motor_Init(&hmotor, &htim2, TIM_CHANNEL_3, &htim3, TIM_CHANNEL_1, MOTOR_EN_GPIO_Port, MOTOR_EN_Pin);
 80009cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <main+0x10c>)
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <main+0x114>)
 80009dc:	2208      	movs	r2, #8
 80009de:	4927      	ldr	r1, [pc, #156]	@ (8000a7c <main+0x110>)
 80009e0:	4828      	ldr	r0, [pc, #160]	@ (8000a84 <main+0x118>)
 80009e2:	f000 f8a4 	bl	8000b2e <Motor_Init>
	Motor_Start(&hmotor);
 80009e6:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <main+0x118>)
 80009e8:	f000 f8c1 	bl	8000b6e <Motor_Start>
	Motor_Set_Speed(&hmotor, 0.0);
 80009ec:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000a88 <main+0x11c>
 80009f0:	4824      	ldr	r0, [pc, #144]	@ (8000a84 <main+0x118>)
 80009f2:	f000 f8cd 	bl	8000b90 <Motor_Set_Speed>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(speed > 23) acc = -1;
 80009f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80009fa:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80009fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a06:	dd01      	ble.n	8000a0c <main+0xa0>
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <main+0x120>)
 8000a0a:	60bb      	str	r3, [r7, #8]
		if(speed < -23) acc = 1;
 8000a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a10:	eebb 7a07 	vmov.f32	s14, #183	@ 0xc1b80000 -23.0
 8000a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1c:	d502      	bpl.n	8000a24 <main+0xb8>
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a22:	60bb      	str	r3, [r7, #8]
		speed += acc*inc;
 8000a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a38:	edc7 7a03 	vstr	s15, [r7, #12]

		Motor_Set_Speed(&hmotor, speed);
 8000a3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a40:	4810      	ldr	r0, [pc, #64]	@ (8000a84 <main+0x118>)
 8000a42:	f000 f8a5 	bl	8000b90 <Motor_Set_Speed>
		//	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		//	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
		//	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		//	  HAL_Delay(1000);

		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8000a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <main+0x10c>)
 8000a4c:	f002 fa66 	bl	8002f1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 8000a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <main+0x10c>)
 8000a56:	f002 fa61 	bl	8002f1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 8000a5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <main+0x10c>)
 8000a60:	f002 fa5c 	bl	8002f1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin);
 8000a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f002 fa56 	bl	8002f1c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a70:	2064      	movs	r0, #100	@ 0x64
 8000a72:	f000 feb3 	bl	80017dc <HAL_Delay>
		if(speed > 23) acc = -1;
 8000a76:	e7be      	b.n	80009f6 <main+0x8a>
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	200001a0 	.word	0x200001a0
 8000a84:	200000e8 	.word	0x200000e8
 8000a88:	00000000 	.word	0x00000000
 8000a8c:	bf800000 	.word	0xbf800000

08000a90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	@ 0x50
 8000a94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0318 	add.w	r3, r7, #24
 8000a9a:	2238      	movs	r2, #56	@ 0x38
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fe84 	bl	80067ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f002 fb7e 	bl	80031b4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000ace:	2314      	movs	r3, #20
 8000ad0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fc1a 	bl	800331c <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000aee:	f000 f818 	bl	8000b22 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2303      	movs	r3, #3
 8000af8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 ff18 	bl	8003940 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000b16:	f000 f804 	bl	8000b22 <Error_Handler>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b26:	b672      	cpsid	i
}
 8000b28:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <Error_Handler+0x8>

08000b2e <Motor_Init>:
#include "motor.h"


Motor_HandleTypeDef hmotor;

HAL_StatusTypeDef Motor_Init(Motor_HandleTypeDef *hmotor, TIM_HandleTypeDef *htim_high, uint32_t channel_high, TIM_HandleTypeDef *htim_low, uint32_t channel_low, GPIO_TypeDef *motor_enable_port, uint16_t motor_enable_pin){
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	603b      	str	r3, [r7, #0]
	hmotor->htim_high = htim_high;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	601a      	str	r2, [r3, #0]
	hmotor->htim_low = htim_low;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	609a      	str	r2, [r3, #8]
	hmotor->channel_high = channel_high;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	605a      	str	r2, [r3, #4]
	hmotor->channel_low = channel_low;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	60da      	str	r2, [r3, #12]
	hmotor->motor_enable_port = motor_enable_port;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	611a      	str	r2, [r3, #16]
	hmotor->motor_enable_pin = motor_enable_pin;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	8c3a      	ldrh	r2, [r7, #32]
 8000b5e:	829a      	strh	r2, [r3, #20]
	;
}
 8000b60:	bf00      	nop
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <Motor_Start>:
HAL_StatusTypeDef Motor_Start(Motor_HandleTypeDef *hmotor){
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hmotor->motor_enable_port, hmotor->motor_enable_pin, SET);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6918      	ldr	r0, [r3, #16]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	8a9b      	ldrh	r3, [r3, #20]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4619      	mov	r1, r3
 8000b82:	f002 f9b3 	bl	8002eec <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <Motor_Set_Speed>:

HAL_StatusTypeDef Motor_Stop(Motor_HandleTypeDef *hmotor){
	HAL_GPIO_WritePin(hmotor->motor_enable_port, hmotor->motor_enable_pin, RESET);
}

HAL_StatusTypeDef Motor_Set_Speed(Motor_HandleTypeDef *hmotor, float motor_speed){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	ed87 0a00 	vstr	s0, [r7]
	if(motor_speed > 24) motor_speed = 24;
 8000b9c:	edd7 7a00 	vldr	s15, [r7]
 8000ba0:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8000ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	dd01      	ble.n	8000bb2 <Motor_Set_Speed+0x22>
 8000bae:	4b5e      	ldr	r3, [pc, #376]	@ (8000d28 <Motor_Set_Speed+0x198>)
 8000bb0:	603b      	str	r3, [r7, #0]
	if(motor_speed < -24) motor_speed = -24;
 8000bb2:	edd7 7a00 	vldr	s15, [r7]
 8000bb6:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d501      	bpl.n	8000bc8 <Motor_Set_Speed+0x38>
 8000bc4:	4b59      	ldr	r3, [pc, #356]	@ (8000d2c <Motor_Set_Speed+0x19c>)
 8000bc6:	603b      	str	r3, [r7, #0]
	hmotor->motor_speed = motor_speed;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	619a      	str	r2, [r3, #24]
	hmotor->motor_duty_cycle = 1000/2*(motor_speed/24+1);
 8000bce:	ed97 7a00 	vldr	s14, [r7]
 8000bd2:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000be2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000d30 <Motor_Set_Speed+0x1a0>
 8000be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 3a90 	vmov	r3, s15
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	839a      	strh	r2, [r3, #28]

	__HAL_TIM_SET_COMPARE(hmotor->htim_high, hmotor->channel_high, hmotor->motor_duty_cycle);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <Motor_Set_Speed+0x7e>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	8b9a      	ldrh	r2, [r3, #28]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0c:	e036      	b.n	8000c7c <Motor_Set_Speed+0xec>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d107      	bne.n	8000c26 <Motor_Set_Speed+0x96>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	8b99      	ldrh	r1, [r3, #28]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	460b      	mov	r3, r1
 8000c22:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c24:	e02a      	b.n	8000c7c <Motor_Set_Speed+0xec>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d107      	bne.n	8000c3e <Motor_Set_Speed+0xae>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	8b99      	ldrh	r1, [r3, #28]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c3c:	e01e      	b.n	8000c7c <Motor_Set_Speed+0xec>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b0c      	cmp	r3, #12
 8000c44:	d107      	bne.n	8000c56 <Motor_Set_Speed+0xc6>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	8b99      	ldrh	r1, [r3, #28]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	460b      	mov	r3, r1
 8000c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c54:	e012      	b.n	8000c7c <Motor_Set_Speed+0xec>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b10      	cmp	r3, #16
 8000c5c:	d107      	bne.n	8000c6e <Motor_Set_Speed+0xde>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8b99      	ldrh	r1, [r3, #28]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c6c:	e006      	b.n	8000c7c <Motor_Set_Speed+0xec>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	8b99      	ldrh	r1, [r3, #28]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(hmotor->htim_low, hmotor->channel_low, 1000-hmotor->motor_duty_cycle);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d108      	bne.n	8000c96 <Motor_Set_Speed+0x106>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8b9b      	ldrh	r3, [r3, #28]
 8000c88:	f5c3 727a 	rsb	r2, r3, #1000	@ 0x3e8
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c94:	e040      	b.n	8000d18 <Motor_Set_Speed+0x188>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d109      	bne.n	8000cb2 <Motor_Set_Speed+0x122>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	8b9b      	ldrh	r3, [r3, #28]
 8000ca2:	f5c3 717a 	rsb	r1, r3, #1000	@ 0x3e8
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	460b      	mov	r3, r1
 8000cae:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cb0:	e032      	b.n	8000d18 <Motor_Set_Speed+0x188>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d109      	bne.n	8000cce <Motor_Set_Speed+0x13e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	8b9b      	ldrh	r3, [r3, #28]
 8000cbe:	f5c3 717a 	rsb	r1, r3, #1000	@ 0x3e8
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ccc:	e024      	b.n	8000d18 <Motor_Set_Speed+0x188>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d109      	bne.n	8000cea <Motor_Set_Speed+0x15a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	8b9b      	ldrh	r3, [r3, #28]
 8000cda:	f5c3 717a 	rsb	r1, r3, #1000	@ 0x3e8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce8:	e016      	b.n	8000d18 <Motor_Set_Speed+0x188>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b10      	cmp	r3, #16
 8000cf0:	d109      	bne.n	8000d06 <Motor_Set_Speed+0x176>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	8b9b      	ldrh	r3, [r3, #28]
 8000cf6:	f5c3 717a 	rsb	r1, r3, #1000	@ 0x3e8
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	460b      	mov	r3, r1
 8000d02:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d04:	e008      	b.n	8000d18 <Motor_Set_Speed+0x188>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	8b9b      	ldrh	r3, [r3, #28]
 8000d0a:	f5c3 717a 	rsb	r1, r3, #1000	@ 0x3e8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	460b      	mov	r3, r1
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c

}
 8000d18:	bf00      	nop
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	41c00000 	.word	0x41c00000
 8000d2c:	c1c00000 	.word	0xc1c00000
 8000d30:	43fa0000 	.word	0x43fa0000

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d6a:	f002 fac7 	bl	80032fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 fce5 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2224      	movs	r2, #36	@ 0x24
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fccc 	bl	80067ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e20:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <MX_TIM1_Init+0xb0>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e76:	f003 fbf5 	bl	8004664 <HAL_TIM_Encoder_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e80:	f7ff fe4f 	bl	8000b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_TIM1_Init+0xac>)
 8000e96:	f004 fcf1 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f7ff fe3f 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3730      	adds	r7, #48	@ 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000108 	.word	0x20000108
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000ee8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000efc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f0a:	2280      	movs	r2, #128	@ 0x80
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0e:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f10:	f003 f97c 	bl	800420c <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f1a:	f7ff fe02 	bl	8000b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481c      	ldr	r0, [pc, #112]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f2c:	f003 fdce 	bl	8004acc <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f36:	f7ff fdf4 	bl	8000b22 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f3c:	f003 fa1e 	bl	800437c <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f46:	f7ff fdec 	bl	8000b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4810      	ldr	r0, [pc, #64]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f5a:	f004 fc8f 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f64:	f7ff fddd 	bl	8000b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f80:	f003 fc90 	bl	80048a4 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f8a:	f7ff fdca 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM2_Init+0xe8>)
 8000f90:	f000 f9d8 	bl	8001344 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3738      	adds	r7, #56	@ 0x38
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000154 	.word	0x20000154

08000fa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe2:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8000fe4:	4a34      	ldr	r2, [pc, #208]	@ (80010b8 <MX_TIM3_Init+0x118>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8000ff6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001004:	2280      	movs	r2, #128	@ 0x80
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001008:	482a      	ldr	r0, [pc, #168]	@ (80010b4 <MX_TIM3_Init+0x114>)
 800100a:	f003 f8ff 	bl	800420c <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001014:	f7ff fd85 	bl	8000b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001022:	4619      	mov	r1, r3
 8001024:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001026:	f003 fd51 	bl	8004acc <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001030:	f7ff fd77 	bl	8000b22 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001034:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001036:	f003 f9a1 	bl	800437c <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001040:	f7ff fd6f 	bl	8000b22 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001044:	2306      	movs	r3, #6
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800104c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001050:	4619      	mov	r1, r3
 8001052:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001054:	f003 fe50 	bl	8004cf8 <HAL_TIM_SlaveConfigSynchro>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800105e:	f7ff fd60 	bl	8000b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4619      	mov	r1, r3
 8001070:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001072:	f004 fc03 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800107c:	f7ff fd51 	bl	8000b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001080:	2360      	movs	r3, #96	@ 0x60
 8001082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM3_Init+0x114>)
 8001098:	f003 fc04 	bl	80048a4 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80010a2:	f7ff fd3e 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM3_Init+0x114>)
 80010a8:	f000 f94c 	bl	8001344 <HAL_TIM_MspPostInit>

}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	@ 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001a0 	.word	0x200001a0
 80010b8:	40000400 	.word	0x40000400

080010bc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2234      	movs	r2, #52	@ 0x34
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 fb65 	bl	80067ac <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010e2:	4b31      	ldr	r3, [pc, #196]	@ (80011a8 <MX_TIM16_Init+0xec>)
 80010e4:	4a31      	ldr	r2, [pc, #196]	@ (80011ac <MX_TIM16_Init+0xf0>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <MX_TIM16_Init+0xec>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_TIM16_Init+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_TIM16_Init+0xec>)
 80010f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_TIM16_Init+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <MX_TIM16_Init+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_TIM16_Init+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800110e:	4826      	ldr	r0, [pc, #152]	@ (80011a8 <MX_TIM16_Init+0xec>)
 8001110:	f003 f87c 	bl	800420c <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800111a:	f7ff fd02 	bl	8000b22 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800111e:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <MX_TIM16_Init+0xec>)
 8001120:	f003 f8cb 	bl	80042ba <HAL_TIM_OC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800112a:	f7ff fcfa 	bl	8000b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <MX_TIM16_Init+0xec>)
 8001154:	f003 fb2c 	bl	80047b0 <HAL_TIM_OC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800115e:	f7ff fce0 	bl	8000b22 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <MX_TIM16_Init+0xec>)
 800118a:	f004 fc0d 	bl	80059a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001194:	f7ff fcc5 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_TIM16_Init+0xec>)
 800119a:	f000 f8d3 	bl	8001344 <HAL_TIM_MspPostInit>

}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	@ 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001ec 	.word	0x200001ec
 80011ac:	40014400 	.word	0x40014400

080011b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <HAL_TIM_Encoder_MspInit+0x7c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d127      	bne.n	8001222 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_TIM_Encoder_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001202:	2303      	movs	r3, #3
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001212:	2302      	movs	r3, #2
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_TIM_Encoder_MspInit+0x84>)
 800121e:	f001 fce3 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40012c00 	.word	0x40012c00
 8001230:	40021000 	.word	0x40021000
 8001234:	48000800 	.word	0x48000800

08001238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001258:	d129      	bne.n	80012ae <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	4a35      	ldr	r2, [pc, #212]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6593      	str	r3, [r2, #88]	@ 0x58
 8001266:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128a:	2308      	movs	r3, #8
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a8:	f001 fc9e 	bl	8002be8 <HAL_GPIO_Init>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80012ac:	e03e      	b.n	800132c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <HAL_TIM_Base_MspInit+0x100>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d128      	bne.n	800130a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_TIM_Base_MspInit+0x104>)
 8001304:	f001 fc70 	bl	8002be8 <HAL_GPIO_Init>
}
 8001308:	e010      	b.n	800132c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM16)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0c      	ldr	r2, [pc, #48]	@ (8001340 <HAL_TIM_Base_MspInit+0x108>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d10b      	bne.n	800132c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001318:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 800131a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <HAL_TIM_Base_MspInit+0xfc>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
}
 800132c:	bf00      	nop
 800132e:	3730      	adds	r7, #48	@ 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000
 8001338:	40000400 	.word	0x40000400
 800133c:	48000800 	.word	0x48000800
 8001340:	40014400 	.word	0x40014400

08001344 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001364:	d11d      	bne.n	80013a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b32      	ldr	r3, [pc, #200]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a31      	ldr	r2, [pc, #196]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800137e:	2304      	movs	r3, #4
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138e:	2301      	movs	r3, #1
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f001 fc24 	bl	8002be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80013a0:	e042      	b.n	8001428 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a23      	ldr	r2, [pc, #140]	@ (8001434 <HAL_TIM_MspPostInit+0xf0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d11c      	bne.n	80013e6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d4:	2302      	movs	r3, #2
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4816      	ldr	r0, [pc, #88]	@ (8001438 <HAL_TIM_MspPostInit+0xf4>)
 80013e0:	f001 fc02 	bl	8002be8 <HAL_GPIO_Init>
}
 80013e4:	e020      	b.n	8001428 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM16)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a14      	ldr	r2, [pc, #80]	@ (800143c <HAL_TIM_MspPostInit+0xf8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d11b      	bne.n	8001428 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_TIM_MspPostInit+0xec>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001408:	2310      	movs	r3, #16
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <HAL_TIM_MspPostInit+0xfc>)
 8001424:	f001 fbe0 	bl	8002be8 <HAL_GPIO_Init>
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40000400 	.word	0x40000400
 8001438:	48000800 	.word	0x48000800
 800143c:	40014400 	.word	0x40014400
 8001440:	48000400 	.word	0x48000400

08001444 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <MX_USART1_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 800148e:	f004 fb1f 	bl	8005ad0 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f7ff fb43 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 80014a0:	f005 f8ba 	bl	8006618 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f7ff fb3a 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 80014b2:	f005 f8ef 	bl	8006694 <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f7ff fb31 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <MX_USART1_UART_Init+0x90>)
 80014c2:	f005 f870 	bl	80065a6 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f7ff fb29 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000238 	.word	0x20000238
 80014d8:	40013800 	.word	0x40013800

080014dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <MX_USART3_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <MX_USART3_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <MX_USART3_UART_Init+0x90>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_USART3_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_USART3_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_USART3_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USART3_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001526:	f004 fad3 	bl	8005ad0 <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f7ff faf7 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_USART3_UART_Init+0x90>)
 8001538:	f005 f86e 	bl	8006618 <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f7ff faee 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <MX_USART3_UART_Init+0x90>)
 800154a:	f005 f8a3 	bl	8006694 <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f7ff fae5 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_USART3_UART_Init+0x90>)
 800155a:	f005 f824 	bl	80065a6 <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f7ff fadd 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002cc 	.word	0x200002cc
 8001570:	40004800 	.word	0x40004800

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a0      	sub	sp, #128	@ 0x80
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	2254      	movs	r2, #84	@ 0x54
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 f909 	bl	80067ac <memset>
  if(uartHandle->Instance==USART1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <HAL_UART_MspInit+0x120>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d136      	bne.n	8001612 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fbdd 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015bc:	f7ff fab1 	bl	8000b22 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	4a34      	ldr	r2, [pc, #208]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_UART_MspInit+0x124>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CMD_TX_Pin|CMD_RX_Pin;
 80015f0:	2330      	movs	r3, #48	@ 0x30
 80015f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001600:	2307      	movs	r3, #7
 8001602:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001608:	4619      	mov	r1, r3
 800160a:	4824      	ldr	r0, [pc, #144]	@ (800169c <HAL_UART_MspInit+0x128>)
 800160c:	f001 faec 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001610:	e03b      	b.n	800168a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <HAL_UART_MspInit+0x12c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d136      	bne.n	800168a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800161c:	2304      	movs	r3, #4
 800161e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fba1 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001634:	f7ff fa75 	bl	8000b22 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_UART_MspInit+0x124>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_UART_MspInit+0x124>)
 800163e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_UART_MspInit+0x124>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_UART_MspInit+0x124>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001654:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_UART_MspInit+0x124>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_UART_MspInit+0x124>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001668:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800166c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800167a:	2307      	movs	r3, #7
 800167c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <HAL_UART_MspInit+0x130>)
 8001686:	f001 faaf 	bl	8002be8 <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3780      	adds	r7, #128	@ 0x80
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800
 8001698:	40021000 	.word	0x40021000
 800169c:	48000800 	.word	0x48000800
 80016a0:	40004800 	.word	0x40004800
 80016a4:	48000400 	.word	0x48000400

080016a8 <Reset_Handler>:
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <LoopForever+0x2>)
 80016aa:	4685      	mov	sp, r0
 80016ac:	f7ff fb96 	bl	8000ddc <SystemInit>
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopForever+0x6>)
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopForever+0xa>)
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopForever+0xe>)
 80016b6:	2300      	movs	r3, #0
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:
 80016ba:	58d4      	ldr	r4, [r2, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:
 80016c0:	18c4      	adds	r4, r0, r3
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopForever+0x12>)
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopForever+0x16>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:
 80016d2:	42a2      	cmp	r2, r4
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
 80016d6:	f005 f871 	bl	80067bc <__libc_init_array>
 80016da:	f7ff f947 	bl	800096c <main>

080016de <LoopForever>:
 80016de:	e7fe      	b.n	80016de <LoopForever>
 80016e0:	20020000 	.word	0x20020000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	0800686c 	.word	0x0800686c
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20000364 	.word	0x20000364

080016f8 <ADC1_2_IRQHandler>:
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 fa3d 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	200f      	movs	r0, #15
 800170c:	f000 f80e 	bl	800172c <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171c:	f7ff fb0a 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001720:	79fb      	ldrb	r3, [r7, #7]

}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_InitTick+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d022      	beq.n	8001786 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_InitTick+0x6c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_InitTick+0x68>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800174c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fa3a 	bl	8002bce <HAL_SYSTICK_Config>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10f      	bne.n	8001780 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	d809      	bhi.n	800177a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001766:	2200      	movs	r2, #0
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800176e:	f001 fa14 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_InitTick+0x70>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e007      	b.n	800178a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e004      	b.n	800178a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000008 	.word	0x20000008
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x1c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_IncTick+0x20>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_IncTick+0x1c>)
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000360 	.word	0x20000360
 80017c0:	20000008 	.word	0x20000008

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000360 	.word	0x20000360

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017f4:	d004      	beq.n	8001800 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_Delay+0x40>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001800:	bf00      	nop
 8001802:	f7ff ffdf 	bl	80017c4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	429a      	cmp	r2, r3
 8001810:	d8f7      	bhi.n	8001802 <HAL_Delay+0x26>
  {
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000008 	.word	0x20000008

08001820 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3360      	adds	r3, #96	@ 0x60
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <LL_ADC_SetOffset+0x44>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	4313      	orrs	r3, r2
 80018b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	03fff000 	.word	0x03fff000

080018d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3360      	adds	r3, #96	@ 0x60
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3360      	adds	r3, #96	@ 0x60
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3360      	adds	r3, #96	@ 0x60
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3360      	adds	r3, #96	@ 0x60
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	615a      	str	r2, [r3, #20]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3330      	adds	r3, #48	@ 0x30
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	211f      	movs	r1, #31
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0e9b      	lsrs	r3, r3, #26
 80019fc:	f003 011f 	and.w	r1, r3, #31
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3314      	adds	r3, #20
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	0e5b      	lsrs	r3, r3, #25
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0d1b      	lsrs	r3, r3, #20
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2107      	movs	r1, #7
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0d1b      	lsrs	r3, r3, #20
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0318 	and.w	r3, r3, #24
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a98:	40d9      	lsrs	r1, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	0007ffff 	.word	0x0007ffff

08001abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001acc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6093      	str	r3, [r2, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001af4:	d101      	bne.n	8001afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_IsEnabled+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_IsEnabled+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d101      	bne.n	8001bbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1a9      	b.n	8001f3a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7fe fcff 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff67 	bl	8001ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff4d 	bl	8001abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff82 	bl	8001b30 <LL_ADC_IsInternalRegulatorEnabled>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d115      	bne.n	8001c5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff66 	bl	8001b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb0 <HAL_ADC_Init+0x2e4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	4a9c      	ldr	r2, [pc, #624]	@ (8001eb4 <HAL_ADC_Init+0x2e8>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff64 	bl	8001b30 <LL_ADC_IsInternalRegulatorEnabled>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff75 	bl	8001b7e <LL_ADC_REG_IsConversionOngoing>
 8001c94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8142 	bne.w	8001f28 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 813e 	bne.w	8001f28 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cb4:	f043 0202 	orr.w	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff49 	bl	8001b58 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d141      	bne.n	8001d50 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd4:	d004      	beq.n	8001ce0 <HAL_ADC_Init+0x114>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a77      	ldr	r2, [pc, #476]	@ (8001eb8 <HAL_ADC_Init+0x2ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10f      	bne.n	8001d00 <HAL_ADC_Init+0x134>
 8001ce0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ce4:	f7ff ff38 	bl	8001b58 <LL_ADC_IsEnabled>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	4873      	ldr	r0, [pc, #460]	@ (8001eb8 <HAL_ADC_Init+0x2ec>)
 8001cec:	f7ff ff34 	bl	8001b58 <LL_ADC_IsEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e012      	b.n	8001d26 <HAL_ADC_Init+0x15a>
 8001d00:	486e      	ldr	r0, [pc, #440]	@ (8001ebc <HAL_ADC_Init+0x2f0>)
 8001d02:	f7ff ff29 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d06:	4604      	mov	r4, r0
 8001d08:	486d      	ldr	r0, [pc, #436]	@ (8001ec0 <HAL_ADC_Init+0x2f4>)
 8001d0a:	f7ff ff25 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	431c      	orrs	r4, r3
 8001d12:	486c      	ldr	r0, [pc, #432]	@ (8001ec4 <HAL_ADC_Init+0x2f8>)
 8001d14:	f7ff ff20 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d012      	beq.n	8001d50 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_Init+0x172>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb8 <HAL_ADC_Init+0x2ec>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x176>
 8001d3e:	4a62      	ldr	r2, [pc, #392]	@ (8001ec8 <HAL_ADC_Init+0x2fc>)
 8001d40:	e000      	b.n	8001d44 <HAL_ADC_Init+0x178>
 8001d42:	4a62      	ldr	r2, [pc, #392]	@ (8001ecc <HAL_ADC_Init+0x300>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fd68 	bl	8001820 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f5b      	ldrb	r3, [r3, #29]
 8001d54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d106      	bne.n	8001d8c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	3b01      	subs	r3, #1
 8001d84:	045b      	lsls	r3, r3, #17
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d009      	beq.n	8001da8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4b48      	ldr	r3, [pc, #288]	@ (8001ed0 <HAL_ADC_Init+0x304>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fee4 	bl	8001ba4 <LL_ADC_INJ_IsConversionOngoing>
 8001ddc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d17f      	bne.n	8001ee4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d17c      	bne.n	8001ee4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001df6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e06:	f023 0302 	bic.w	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d017      	beq.n	8001e4c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6911      	ldr	r1, [r2, #16]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001e4a:	e013      	b.n	8001e74 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e70:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d12a      	bne.n	8001ed4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	e019      	b.n	8001ee4 <HAL_ADC_Init+0x318>
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	053e2d63 	.word	0x053e2d63
 8001eb8:	50000100 	.word	0x50000100
 8001ebc:	50000400 	.word	0x50000400
 8001ec0:	50000500 	.word	0x50000500
 8001ec4:	50000600 	.word	0x50000600
 8001ec8:	50000300 	.word	0x50000300
 8001ecc:	50000700 	.word	0x50000700
 8001ed0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10c      	bne.n	8001f06 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f023 010f 	bic.w	r1, r3, #15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f04:	e007      	b.n	8001f16 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 020f 	bic.w	r2, r2, #15
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f26:	e007      	b.n	8001f38 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop

08001f44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0b6      	sub	sp, #216	@ 0xd8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x24>
 8001f62:	2302      	movs	r3, #2
 8001f64:	f000 bc13 	b.w	800278e <HAL_ADC_ConfigChannel+0x84a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fe02 	bl	8001b7e <LL_ADC_REG_IsConversionOngoing>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 83f3 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f7ff fd18 	bl	80019c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fdf0 	bl	8001b7e <LL_ADC_REG_IsConversionOngoing>
 8001f9e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fdfc 	bl	8001ba4 <LL_ADC_INJ_IsConversionOngoing>
 8001fac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 81d9 	bne.w	800236c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 81d4 	bne.w	800236c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fcc:	d10f      	bne.n	8001fee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7ff fd1f 	bl	8001a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fcd9 	bl	800199e <LL_ADC_SetSamplingTimeCommonConfig>
 8001fec:	e00e      	b.n	800200c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f7ff fd0e 	bl	8001a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fcc9 	bl	800199e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d022      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800203e:	f7ff fc23 	bl	8001888 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	461a      	mov	r2, r3
 8002050:	f7ff fc6f 	bl	8001932 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_ADC_ConfigChannel+0x126>
 8002064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002068:	e000      	b.n	800206c <HAL_ADC_ConfigChannel+0x128>
 800206a:	2300      	movs	r3, #0
 800206c:	461a      	mov	r2, r3
 800206e:	f7ff fc7b 	bl	8001968 <LL_ADC_SetOffsetSaturation>
 8002072:	e17b      	b.n	800236c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fc28 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10a      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x15c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fc1d 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	f003 021f 	and.w	r2, r3, #31
 800209e:	e01e      	b.n	80020de <HAL_ADC_ConfigChannel+0x19a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc12 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80020ce:	2320      	movs	r3, #32
 80020d0:	e004      	b.n	80020dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80020d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x1b2>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	e018      	b.n	8002128 <HAL_ADC_ConfigChannel+0x1e4>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800210a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800210e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800211e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002128:	429a      	cmp	r2, r3
 800212a:	d106      	bne.n	800213a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fbe1 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fbc5 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x222>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fbba 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	e01e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x260>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fbaf 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800218c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x278>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	e018      	b.n	80021ee <HAL_ADC_ConfigChannel+0x2aa>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80021d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80021d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e004      	b.n	80021ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80021e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fb7e 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2102      	movs	r1, #2
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb62 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2e8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2102      	movs	r1, #2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb57 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	e01e      	b.n	800226a <HAL_ADC_ConfigChannel+0x326>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2102      	movs	r1, #2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb4c 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800224a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002252:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800225e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x33e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e016      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x36c>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002294:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800229a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fb1d 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2103      	movs	r1, #3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb01 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x3aa>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2103      	movs	r1, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff faf6 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	e017      	b.n	800231e <HAL_ADC_ConfigChannel+0x3da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2103      	movs	r1, #3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff faeb 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002308:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800230a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x3f2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	e011      	b.n	800235a <HAL_ADC_ConfigChannel+0x416>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002346:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800235a:	429a      	cmp	r2, r3
 800235c:	d106      	bne.n	800236c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	2103      	movs	r1, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fac8 	bl	80018fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fbf1 	bl	8001b58 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 813d 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	f7ff fb72 	bl	8001a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4aa2      	ldr	r2, [pc, #648]	@ (8002620 <HAL_ADC_ConfigChannel+0x6dc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f040 812e 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x480>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	bf94      	ite	ls
 80023bc:	2301      	movls	r3, #1
 80023be:	2300      	movhi	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e019      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x4b4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80023d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80023d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80023e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2b09      	cmp	r3, #9
 80023f0:	bf94      	ite	ls
 80023f2:	2301      	movls	r3, #1
 80023f4:	2300      	movhi	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d079      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x4d4>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002416:	e015      	b.n	8002444 <HAL_ADC_ConfigChannel+0x500>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002428:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x520>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	e017      	b.n	8002494 <HAL_ADC_ConfigChannel+0x550>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002474:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e003      	b.n	8002488 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x576>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	051b      	lsls	r3, r3, #20
 80024b8:	e018      	b.n	80024ec <HAL_ADC_ConfigChannel+0x5a8>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80024c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80024cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80024d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ec:	430b      	orrs	r3, r1
 80024ee:	e07e      	b.n	80025ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x5c8>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800250a:	e015      	b.n	8002538 <HAL_ADC_ConfigChannel+0x5f4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	069b      	lsls	r3, r3, #26
 8002534:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x614>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	e017      	b.n	8002588 <HAL_ADC_ConfigChannel+0x644>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	61fb      	str	r3, [r7, #28]
  return result;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	ea42 0103 	orr.w	r1, r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x670>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	3b1e      	subs	r3, #30
 80025ac:	051b      	lsls	r3, r3, #20
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	e01b      	b.n	80025ec <HAL_ADC_ConfigChannel+0x6a8>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	613b      	str	r3, [r7, #16]
  return result;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 021f 	and.w	r2, r3, #31
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	3b1e      	subs	r3, #30
 80025e6:	051b      	lsls	r3, r3, #20
 80025e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7ff fa12 	bl	8001a1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_ADC_ConfigChannel+0x6e0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80be 	beq.w	8002782 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800260e:	d004      	beq.n	800261a <HAL_ADC_ConfigChannel+0x6d6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_ADC_ConfigChannel+0x6e4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10a      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x6ec>
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <HAL_ADC_ConfigChannel+0x6e8>)
 800261c:	e009      	b.n	8002632 <HAL_ADC_ConfigChannel+0x6ee>
 800261e:	bf00      	nop
 8002620:	407f0000 	.word	0x407f0000
 8002624:	80080000 	.word	0x80080000
 8002628:	50000100 	.word	0x50000100
 800262c:	50000300 	.word	0x50000300
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_ADC_ConfigChannel+0x854>)
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f91a 	bl	800186c <LL_ADC_GetCommonPathInternalCh>
 8002638:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a56      	ldr	r2, [pc, #344]	@ (800279c <HAL_ADC_ConfigChannel+0x858>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x70c>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a55      	ldr	r2, [pc, #340]	@ (80027a0 <HAL_ADC_ConfigChannel+0x85c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d13a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d134      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002664:	d005      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x72e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4e      	ldr	r2, [pc, #312]	@ (80027a4 <HAL_ADC_ConfigChannel+0x860>)
 800266c:	4293      	cmp	r3, r2
 800266e:	f040 8085 	bne.w	800277c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800267a:	d004      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x742>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a49      	ldr	r2, [pc, #292]	@ (80027a8 <HAL_ADC_ConfigChannel+0x864>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x746>
 8002686:	4a49      	ldr	r2, [pc, #292]	@ (80027ac <HAL_ADC_ConfigChannel+0x868>)
 8002688:	e000      	b.n	800268c <HAL_ADC_ConfigChannel+0x748>
 800268a:	4a43      	ldr	r2, [pc, #268]	@ (8002798 <HAL_ADC_ConfigChannel+0x854>)
 800268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002690:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f7ff f8d5 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269c:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <HAL_ADC_ConfigChannel+0x86c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	4a44      	ldr	r2, [pc, #272]	@ (80027b4 <HAL_ADC_ConfigChannel+0x870>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026b6:	e002      	b.n	80026be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f9      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c4:	e05a      	b.n	800277c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a3b      	ldr	r2, [pc, #236]	@ (80027b8 <HAL_ADC_ConfigChannel+0x874>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d125      	bne.n	800271c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11f      	bne.n	800271c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <HAL_ADC_ConfigChannel+0x864>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d104      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7ac>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_ADC_ConfigChannel+0x878>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d047      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x7c0>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2a      	ldr	r2, [pc, #168]	@ (80027a8 <HAL_ADC_ConfigChannel+0x864>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x7c4>
 8002704:	4a29      	ldr	r2, [pc, #164]	@ (80027ac <HAL_ADC_ConfigChannel+0x868>)
 8002706:	e000      	b.n	800270a <HAL_ADC_ConfigChannel+0x7c6>
 8002708:	4a23      	ldr	r2, [pc, #140]	@ (8002798 <HAL_ADC_ConfigChannel+0x854>)
 800270a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7ff f896 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800271a:	e031      	b.n	8002780 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <HAL_ADC_ConfigChannel+0x87c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d12d      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d127      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <HAL_ADC_ConfigChannel+0x864>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002744:	d004      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x80c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <HAL_ADC_ConfigChannel+0x864>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x810>
 8002750:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_ADC_ConfigChannel+0x868>)
 8002752:	e000      	b.n	8002756 <HAL_ADC_ConfigChannel+0x812>
 8002754:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <HAL_ADC_ConfigChannel+0x854>)
 8002756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800275a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800275e:	4619      	mov	r1, r3
 8002760:	4610      	mov	r0, r2
 8002762:	f7ff f870 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
 8002766:	e00c      	b.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800277a:	e002      	b.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800277c:	bf00      	nop
 800277e:	e000      	b.n	8002782 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002780:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800278a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800278e:	4618      	mov	r0, r3
 8002790:	37d8      	adds	r7, #216	@ 0xd8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	50000700 	.word	0x50000700
 800279c:	c3210000 	.word	0xc3210000
 80027a0:	90c00010 	.word	0x90c00010
 80027a4:	50000600 	.word	0x50000600
 80027a8:	50000100 	.word	0x50000100
 80027ac:	50000300 	.word	0x50000300
 80027b0:	20000000 	.word	0x20000000
 80027b4:	053e2d63 	.word	0x053e2d63
 80027b8:	c7520000 	.word	0xc7520000
 80027bc:	50000500 	.word	0x50000500
 80027c0:	cb840000 	.word	0xcb840000

080027c4 <LL_ADC_IsEnabled>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <LL_ADC_IsEnabled+0x18>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <LL_ADC_IsEnabled+0x1a>
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_REG_IsConversionOngoing>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d101      	bne.n	8002802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b0a1      	sub	sp, #132	@ 0x84
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0e7      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002836:	2300      	movs	r3, #0
 8002838:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800283a:	2300      	movs	r3, #0
 800283c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002846:	d102      	bne.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e009      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e001      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0be      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ffb1 	bl	80027ea <LL_ADC_REG_IsConversionOngoing>
 8002888:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ffab 	bl	80027ea <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80a0 	bne.w	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800289c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 809c 	bne.w	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ac:	d004      	beq.n	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a55      	ldr	r2, [pc, #340]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028b8:	4b56      	ldr	r3, [pc, #344]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028ba:	e000      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028bc:	4b56      	ldr	r3, [pc, #344]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04b      	beq.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028da:	035b      	lsls	r3, r3, #13
 80028dc:	430b      	orrs	r3, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ec:	d004      	beq.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a45      	ldr	r2, [pc, #276]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10f      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80028f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028fc:	f7ff ff62 	bl	80027c4 <LL_ADC_IsEnabled>
 8002900:	4604      	mov	r4, r0
 8002902:	4841      	ldr	r0, [pc, #260]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002904:	f7ff ff5e 	bl	80027c4 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002918:	483c      	ldr	r0, [pc, #240]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800291a:	f7ff ff53 	bl	80027c4 <LL_ADC_IsEnabled>
 800291e:	4604      	mov	r4, r0
 8002920:	483b      	ldr	r0, [pc, #236]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002922:	f7ff ff4f 	bl	80027c4 <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	431c      	orrs	r4, r3
 800292a:	483c      	ldr	r0, [pc, #240]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800292c:	f7ff ff4a 	bl	80027c4 <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d056      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800294a:	f023 030f 	bic.w	r3, r3, #15
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6811      	ldr	r1, [r2, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800295e:	e047      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002974:	d004      	beq.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a23      	ldr	r2, [pc, #140]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002980:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002984:	f7ff ff1e 	bl	80027c4 <LL_ADC_IsEnabled>
 8002988:	4604      	mov	r4, r0
 800298a:	481f      	ldr	r0, [pc, #124]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800298c:	f7ff ff1a 	bl	80027c4 <LL_ADC_IsEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	4323      	orrs	r3, r4
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029a0:	481a      	ldr	r0, [pc, #104]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029a2:	f7ff ff0f 	bl	80027c4 <LL_ADC_IsEnabled>
 80029a6:	4604      	mov	r4, r0
 80029a8:	4819      	ldr	r0, [pc, #100]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029aa:	f7ff ff0b 	bl	80027c4 <LL_ADC_IsEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	431c      	orrs	r4, r3
 80029b2:	481a      	ldr	r0, [pc, #104]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029b4:	f7ff ff06 	bl	80027c4 <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4323      	orrs	r3, r4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029d2:	f023 030f 	bic.w	r3, r3, #15
 80029d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029da:	e009      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029ee:	e000      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3784      	adds	r7, #132	@ 0x84
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	50000100 	.word	0x50000100
 8002a0c:	50000400 	.word	0x50000400
 8002a10:	50000500 	.word	0x50000500
 8002a14:	50000300 	.word	0x50000300
 8002a18:	50000700 	.word	0x50000700
 8002a1c:	50000600 	.word	0x50000600

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff47 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff5e 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff90 	bl	8002ad8 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5f 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffb2 	bl	8002b40 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf6:	e15a      	b.n	8002eae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 814c 	beq.w	8002ea8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d005      	beq.n	8002c28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d130      	bne.n	8002c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c5e:	2201      	movs	r2, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 0201 	and.w	r2, r3, #1
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d017      	beq.n	8002cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d123      	bne.n	8002d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	08da      	lsrs	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	6939      	ldr	r1, [r7, #16]
 8002d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0203 	and.w	r2, r3, #3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80a6 	beq.w	8002ea8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_GPIO_Init+0x2e4>)
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d60:	4a5a      	ldr	r2, [pc, #360]	@ (8002ecc <HAL_GPIO_Init+0x2e4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d68:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_GPIO_Init+0x2e4>)
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d74:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_GPIO_Init+0x2e8>)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d9e:	d01f      	beq.n	8002de0 <HAL_GPIO_Init+0x1f8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed4 <HAL_GPIO_Init+0x2ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d019      	beq.n	8002ddc <HAL_GPIO_Init+0x1f4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <HAL_GPIO_Init+0x2f0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_GPIO_Init+0x1f0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	@ (8002edc <HAL_GPIO_Init+0x2f4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00d      	beq.n	8002dd4 <HAL_GPIO_Init+0x1ec>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a49      	ldr	r2, [pc, #292]	@ (8002ee0 <HAL_GPIO_Init+0x2f8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <HAL_GPIO_Init+0x1e8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a48      	ldr	r2, [pc, #288]	@ (8002ee4 <HAL_GPIO_Init+0x2fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_GPIO_Init+0x1e4>
 8002dc8:	2305      	movs	r3, #5
 8002dca:	e00a      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002dcc:	2306      	movs	r3, #6
 8002dce:	e008      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	e006      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e004      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e002      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002de0:	2300      	movs	r3, #0
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	f002 0203 	and.w	r2, r2, #3
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	4093      	lsls	r3, r2
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df2:	4937      	ldr	r1, [pc, #220]	@ (8002ed0 <HAL_GPIO_Init+0x2e8>)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	3302      	adds	r3, #2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e24:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e4e:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e54:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ea2:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f47f ae9d 	bne.w	8002bf8 <HAL_GPIO_Init+0x10>
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	48000800 	.word	0x48000800
 8002edc:	48000c00 	.word	0x48000c00
 8002ee0:	48001000 	.word	0x48001000
 8002ee4:	48001400 	.word	0x48001400
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002efc:	787b      	ldrb	r3, [r7, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	041a      	lsls	r2, r3, #16
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43d9      	mvns	r1, r3
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08d      	b.n	800307e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fca0 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	@ 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e006      	b.n	8002fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d108      	bne.n	8002ff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	e007      	b.n	8003002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d138      	bne.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e032      	b.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	@ 0x24
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	d139      	bne.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800313c:	2302      	movs	r3, #2
 800313e:	e033      	b.n	80031a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800316e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b4b      	ldr	r3, [pc, #300]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d6:	4a46      	ldr	r2, [pc, #280]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b43      	ldr	r3, [pc, #268]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031e8:	4a41      	ldr	r2, [pc, #260]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f0:	4b40      	ldr	r3, [pc, #256]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	@ 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a3f      	ldr	r2, [pc, #252]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d158      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e057      	b.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4a2d      	ldr	r2, [pc, #180]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003244:	e04d      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324c:	d141      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800324e:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d131      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800325c:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003262:	4a23      	ldr	r2, [pc, #140]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326c:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003274:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2232      	movs	r2, #50	@ 0x32
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	e002      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3b01      	subs	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329a:	4b15      	ldr	r3, [pc, #84]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d102      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f2      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d112      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e011      	b.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032d0:	e007      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d2:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032da:	4a05      	ldr	r2, [pc, #20]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40007000 	.word	0x40007000
 80032f4:	20000000 	.word	0x20000000
 80032f8:	431bde83 	.word	0x431bde83

080032fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800330a:	6093      	str	r3, [r2, #8]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40007000 	.word	0x40007000

0800331c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e2fe      	b.n	800392c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d075      	beq.n	8003426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333a:	4b97      	ldr	r3, [pc, #604]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003344:	4b94      	ldr	r3, [pc, #592]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0x3e>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d002      	beq.n	8003360 <HAL_RCC_OscConfig+0x44>
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d10b      	bne.n	8003378 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	4b8d      	ldr	r3, [pc, #564]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d05b      	beq.n	8003424 <HAL_RCC_OscConfig+0x108>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d157      	bne.n	8003424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e2d9      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x74>
 8003382:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a84      	ldr	r2, [pc, #528]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e01d      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x98>
 800339a:	4b7f      	ldr	r3, [pc, #508]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7e      	ldr	r2, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7b      	ldr	r2, [pc, #492]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00b      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 80033b4:	4b78      	ldr	r3, [pc, #480]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a77      	ldr	r2, [pc, #476]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b75      	ldr	r3, [pc, #468]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a74      	ldr	r2, [pc, #464]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe f9f6 	bl	80017c4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe f9f2 	bl	80017c4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e29e      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0xc0>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe f9e2 	bl	80017c4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe f9de 	bl	80017c4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e28a      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003416:	4b60      	ldr	r3, [pc, #384]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0xe8>
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d075      	beq.n	800351e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003432:	4b59      	ldr	r3, [pc, #356]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343c:	4b56      	ldr	r3, [pc, #344]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d102      	bne.n	8003452 <HAL_RCC_OscConfig+0x136>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d002      	beq.n	8003458 <HAL_RCC_OscConfig+0x13c>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d11f      	bne.n	8003498 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003458:	4b4f      	ldr	r3, [pc, #316]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_OscConfig+0x154>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e25d      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b49      	ldr	r3, [pc, #292]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	4946      	ldr	r1, [pc, #280]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003484:	4b45      	ldr	r3, [pc, #276]	@ (800359c <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe f94f 	bl	800172c <HAL_InitTick>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d043      	beq.n	800351c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e249      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe f98a 	bl	80017c4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe f986 	bl	80017c4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e232      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c6:	4b34      	ldr	r3, [pc, #208]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	492d      	ldr	r1, [pc, #180]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	e01a      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f966 	bl	80017c4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fe f962 	bl	80017c4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e20e      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1e0>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d041      	beq.n	80035ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01c      	beq.n	800356c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe f93f 	bl	80017c4 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe f93b 	bl	80017c4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1e7      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355c:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ef      	beq.n	800354a <HAL_RCC_OscConfig+0x22e>
 800356a:	e020      	b.n	80035ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <HAL_RCC_OscConfig+0x27c>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe f922 	bl	80017c4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003582:	e00d      	b.n	80035a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003584:	f7fe f91e 	bl	80017c4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d906      	bls.n	80035a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1ca      	b.n	800392c <HAL_RCC_OscConfig+0x610>
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a0:	4b8c      	ldr	r3, [pc, #560]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ea      	bne.n	8003584 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a6 	beq.w	8003708 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c0:	4b84      	ldr	r3, [pc, #528]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2b4>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x2b6>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b7f      	ldr	r3, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	4a7e      	ldr	r2, [pc, #504]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e2:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f2:	4b79      	ldr	r3, [pc, #484]	@ (80037d8 <HAL_RCC_OscConfig+0x4bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fe:	4b76      	ldr	r3, [pc, #472]	@ (80037d8 <HAL_RCC_OscConfig+0x4bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	@ (80037d8 <HAL_RCC_OscConfig+0x4bc>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7fe f8db 	bl	80017c4 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fe f8d7 	bl	80017c4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e183      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003624:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <HAL_RCC_OscConfig+0x4bc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d108      	bne.n	800364a <HAL_RCC_OscConfig+0x32e>
 8003638:	4b66      	ldr	r3, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003648:	e024      	b.n	8003694 <HAL_RCC_OscConfig+0x378>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b05      	cmp	r3, #5
 8003650:	d110      	bne.n	8003674 <HAL_RCC_OscConfig+0x358>
 8003652:	4b60      	ldr	r3, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003658:	4a5e      	ldr	r2, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003662:	4b5c      	ldr	r3, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003668:	4a5a      	ldr	r2, [pc, #360]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003672:	e00f      	b.n	8003694 <HAL_RCC_OscConfig+0x378>
 8003674:	4b57      	ldr	r3, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	4a56      	ldr	r2, [pc, #344]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003684:	4b53      	ldr	r3, [pc, #332]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	4a52      	ldr	r2, [pc, #328]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe f892 	bl	80017c4 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe f88e 	bl	80017c4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e138      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b46      	ldr	r3, [pc, #280]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ed      	beq.n	80036a4 <HAL_RCC_OscConfig+0x388>
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fe f87b 	bl	80017c4 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe f877 	bl	80017c4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e121      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e8:	4b3a      	ldr	r3, [pc, #232]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ed      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f6:	7ffb      	ldrb	r3, [r7, #31]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b35      	ldr	r3, [pc, #212]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03c      	beq.n	800378e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003722:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe f84a 	bl	80017c4 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003734:	f7fe f846 	bl	80017c4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0f2      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ef      	beq.n	8003734 <HAL_RCC_OscConfig+0x418>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375c:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe f82d 	bl	80017c4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376e:	f7fe f829 	bl	80017c4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0d5      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80c9 	beq.w	800392a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003798:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	f000 8083 	beq.w	80038ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d15e      	bne.n	800386c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fe f803 	bl	80017c4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	e00c      	b.n	80037dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fd ffff 	bl	80017c4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d905      	bls.n	80037dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0ab      	b.n	800392c <HAL_RCC_OscConfig+0x610>
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	4b55      	ldr	r3, [pc, #340]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ec      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e8:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b52      	ldr	r3, [pc, #328]	@ (8003938 <HAL_RCC_OscConfig+0x61c>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6a11      	ldr	r1, [r2, #32]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003802:	0212      	lsls	r2, r2, #8
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800380a:	0852      	lsrs	r2, r2, #1
 800380c:	3a01      	subs	r2, #1
 800380e:	0552      	lsls	r2, r2, #21
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0652      	lsls	r2, r2, #25
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003822:	06d2      	lsls	r2, r2, #27
 8003824:	430a      	orrs	r2, r1
 8003826:	4943      	ldr	r1, [pc, #268]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a40      	ldr	r2, [pc, #256]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003838:	4b3e      	ldr	r3, [pc, #248]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a3d      	ldr	r2, [pc, #244]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003842:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd ffbe 	bl	80017c4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd ffba 	bl	80017c4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e066      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	4b35      	ldr	r3, [pc, #212]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x530>
 800386a:	e05e      	b.n	800392a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a30      	ldr	r2, [pc, #192]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd ffa4 	bl	80017c4 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd ffa0 	bl	80017c4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04c      	b.n	800392c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003892:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800389e:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	4924      	ldr	r1, [pc, #144]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <HAL_RCC_OscConfig+0x620>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
 80038aa:	e03e      	b.n	800392a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e039      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_OscConfig+0x618>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0203 	and.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d12c      	bne.n	8003926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d123      	bne.n	8003926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11b      	bne.n	8003926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d113      	bne.n	8003926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d109      	bne.n	8003926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	019f800c 	.word	0x019f800c
 800393c:	feeefffc 	.word	0xfeeefffc

08003940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e11e      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b91      	ldr	r3, [pc, #580]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	498c      	ldr	r1, [pc, #560]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b8a      	ldr	r3, [pc, #552]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e106      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d073      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d129      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399c:	4b81      	ldr	r3, [pc, #516]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0f4      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039ac:	f000 f99c 	bl	8003ce8 <RCC_GetSysClockFreqFromPLLSource>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ba8 <HAL_RCC_ClockConfig+0x268>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d93f      	bls.n	8003a3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d033      	beq.n	8003a3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d12f      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039da:	4b72      	ldr	r3, [pc, #456]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e2:	4a70      	ldr	r2, [pc, #448]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 80039e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e024      	b.n	8003a3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f8:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0c6      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a08:	4b66      	ldr	r3, [pc, #408]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0be      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a18:	f000 f8ce 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4a61      	ldr	r2, [pc, #388]	@ (8003ba8 <HAL_RCC_ClockConfig+0x268>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d909      	bls.n	8003a3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4957      	ldr	r1, [pc, #348]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd feba 	bl	80017c4 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd feb6 	bl	80017c4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e095      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d023      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b43      	ldr	r3, [pc, #268]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a42      	ldr	r2, [pc, #264]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003aac:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4936      	ldr	r1, [pc, #216]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b80      	cmp	r3, #128	@ 0x80
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ad6:	4b33      	ldr	r3, [pc, #204]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a32      	ldr	r2, [pc, #200]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ae0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d21d      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 020f 	bic.w	r2, r3, #15
 8003af8:	4929      	ldr	r1, [pc, #164]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b00:	f7fd fe60 	bl	80017c4 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7fd fe5c 	bl	80017c4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03b      	b.n	8003b96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1ed      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4917      	ldr	r1, [pc, #92]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490f      	ldr	r1, [pc, #60]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6a:	f000 f825 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490c      	ldr	r1, [pc, #48]	@ (8003bac <HAL_RCC_ClockConfig+0x26c>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <HAL_RCC_ClockConfig+0x270>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_RCC_ClockConfig+0x274>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fdcc 	bl	800172c <HAL_InitTick>
 8003b94:	4603      	mov	r3, r0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	04c4b400 	.word	0x04c4b400
 8003bac:	0800681c 	.word	0x0800681c
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bca:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e047      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bd0:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d102      	bne.n	8003be2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e03e      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003be2:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d136      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	3301      	adds	r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c0c:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c16:	68d2      	ldr	r2, [r2, #12]
 8003c18:	0a12      	lsrs	r2, r2, #8
 8003c1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	617b      	str	r3, [r7, #20]
      break;
 8003c24:	e00c      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c26:	4a13      	ldr	r2, [pc, #76]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	4a10      	ldr	r2, [pc, #64]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	0a12      	lsrs	r2, r2, #8
 8003c34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
      break;
 8003c3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	0e5b      	lsrs	r3, r3, #25
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e001      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c60:	693b      	ldr	r3, [r7, #16]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	00f42400 	.word	0x00f42400

08003c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4904      	ldr	r1, [pc, #16]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	0800682c 	.word	0x0800682c

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cc0:	f7ff ffda 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0adb      	lsrs	r3, r3, #11
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4904      	ldr	r1, [pc, #16]	@ (8003ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	0800682c 	.word	0x0800682c

08003ce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cee:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d10c      	bne.n	8003d26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d0c:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	0a12      	lsrs	r2, r2, #8
 8003d1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
    break;
 8003d24:	e00c      	b.n	8003d40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d26:	4a11      	ldr	r2, [pc, #68]	@ (8003d6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d30:	68d2      	ldr	r2, [r2, #12]
 8003d32:	0a12      	lsrs	r2, r2, #8
 8003d34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    break;
 8003d3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0e5b      	lsrs	r3, r3, #25
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d5a:	687b      	ldr	r3, [r7, #4]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	00f42400 	.word	0x00f42400

08003d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8098 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10d      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003daa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a39      	ldr	r2, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fcfd 	bl	80017c4 <HAL_GetTick>
 8003dca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fd fcf9 	bl	80017c4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d902      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	74fb      	strb	r3, [r7, #19]
        break;
 8003de0:	e005      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ef      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d159      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df4:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fcb9 	bl	80017c4 <HAL_GetTick>
 8003e52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e54:	e00b      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fcb5 	bl	80017c4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d902      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ec      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e82:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e90:	4903      	ldr	r1, [pc, #12]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e98:	e008      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	74bb      	strb	r3, [r7, #18]
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eac:	7c7b      	ldrb	r3, [r7, #17]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	4aa6      	ldr	r2, [pc, #664]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eca:	4ba1      	ldr	r3, [pc, #644]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	499d      	ldr	r1, [pc, #628]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eec:	4b98      	ldr	r3, [pc, #608]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 020c 	bic.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4995      	ldr	r1, [pc, #596]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0e:	4b90      	ldr	r3, [pc, #576]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	498c      	ldr	r1, [pc, #560]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f30:	4b87      	ldr	r3, [pc, #540]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4984      	ldr	r1, [pc, #528]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f52:	4b7f      	ldr	r3, [pc, #508]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	497b      	ldr	r1, [pc, #492]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f74:	4b76      	ldr	r3, [pc, #472]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	4973      	ldr	r1, [pc, #460]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f96:	4b6e      	ldr	r3, [pc, #440]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	496a      	ldr	r1, [pc, #424]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb8:	4b65      	ldr	r3, [pc, #404]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4962      	ldr	r1, [pc, #392]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fda:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	4959      	ldr	r1, [pc, #356]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ffc:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	4951      	ldr	r1, [pc, #324]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401e:	4b4c      	ldr	r3, [pc, #304]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	4948      	ldr	r1, [pc, #288]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d015      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004040:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	4940      	ldr	r1, [pc, #256]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b3b      	ldr	r3, [pc, #236]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a3a      	ldr	r2, [pc, #232]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800406a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004078:	4b35      	ldr	r3, [pc, #212]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	4932      	ldr	r1, [pc, #200]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040be:	4924      	ldr	r1, [pc, #144]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f6:	4916      	ldr	r1, [pc, #88]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a10      	ldr	r2, [pc, #64]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d019      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	4908      	ldr	r1, [pc, #32]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413e:	d109      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a02      	ldr	r2, [pc, #8]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004160:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	4926      	ldr	r1, [pc, #152]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800417e:	d105      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a6:	4918      	ldr	r1, [pc, #96]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d105      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b8:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	490a      	ldr	r1, [pc, #40]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e049      	b.n	80042b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f800 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 fd96 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e049      	b.n	8004360 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f841 	bl	8004368 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 fd3f 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f841 	bl	800442a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fcde 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_TIM_PWM_Start+0x24>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e03c      	b.n	80044de <HAL_TIM_PWM_Start+0x9e>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d109      	bne.n	800447e <HAL_TIM_PWM_Start+0x3e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e02f      	b.n	80044de <HAL_TIM_PWM_Start+0x9e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d109      	bne.n	8004498 <HAL_TIM_PWM_Start+0x58>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e022      	b.n	80044de <HAL_TIM_PWM_Start+0x9e>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d109      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x72>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e015      	b.n	80044de <HAL_TIM_PWM_Start+0x9e>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d109      	bne.n	80044cc <HAL_TIM_PWM_Start+0x8c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e008      	b.n	80044de <HAL_TIM_PWM_Start+0x9e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0a6      	b.n	8004634 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0xb6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f4:	e023      	b.n	800453e <HAL_TIM_PWM_Start+0xfe>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xc6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004504:	e01b      	b.n	800453e <HAL_TIM_PWM_Start+0xfe>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xd6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	e013      	b.n	800453e <HAL_TIM_PWM_Start+0xfe>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xe6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004524:	e00b      	b.n	800453e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b10      	cmp	r3, #16
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xf6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004534:	e003      	b.n	800453e <HAL_TIM_PWM_Start+0xfe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f001 f972 	bl	8005830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3a      	ldr	r2, [pc, #232]	@ (800463c <HAL_TIM_PWM_Start+0x1fc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_PWM_Start+0x148>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a39      	ldr	r2, [pc, #228]	@ (8004640 <HAL_TIM_PWM_Start+0x200>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIM_PWM_Start+0x148>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a37      	ldr	r2, [pc, #220]	@ (8004644 <HAL_TIM_PWM_Start+0x204>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_PWM_Start+0x148>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a36      	ldr	r2, [pc, #216]	@ (8004648 <HAL_TIM_PWM_Start+0x208>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Start+0x148>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a34      	ldr	r2, [pc, #208]	@ (800464c <HAL_TIM_PWM_Start+0x20c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Start+0x148>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a33      	ldr	r2, [pc, #204]	@ (8004650 <HAL_TIM_PWM_Start+0x210>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_TIM_PWM_Start+0x14c>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_TIM_PWM_Start+0x14e>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a25      	ldr	r2, [pc, #148]	@ (800463c <HAL_TIM_PWM_Start+0x1fc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d01d      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <HAL_TIM_PWM_Start+0x214>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a24      	ldr	r2, [pc, #144]	@ (8004658 <HAL_TIM_PWM_Start+0x218>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a23      	ldr	r2, [pc, #140]	@ (800465c <HAL_TIM_PWM_Start+0x21c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a19      	ldr	r2, [pc, #100]	@ (8004640 <HAL_TIM_PWM_Start+0x200>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <HAL_TIM_PWM_Start+0x204>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x1b2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a18      	ldr	r2, [pc, #96]	@ (8004650 <HAL_TIM_PWM_Start+0x210>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d115      	bne.n	800461e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_TIM_PWM_Start+0x220>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d015      	beq.n	8004630 <HAL_TIM_PWM_Start+0x1f0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460a:	d011      	beq.n	8004630 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	e008      	b.n	8004630 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e000      	b.n	8004632 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40013400 	.word	0x40013400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	40015000 	.word	0x40015000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	00010007 	.word	0x00010007

08004664 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e097      	b.n	80047a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc fd8f 	bl	80011b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80046a8:	f023 0307 	bic.w	r3, r3, #7
 80046ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f000 fb5f 	bl	8004d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	4313      	orrs	r3, r2
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004704:	f023 030c 	bic.w	r3, r3, #12
 8004708:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	4313      	orrs	r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	011a      	lsls	r2, r3, #4
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	4313      	orrs	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	4313      	orrs	r3, r2
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e066      	b.n	800489c <HAL_TIM_OC_ConfigChannel+0xec>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b14      	cmp	r3, #20
 80047da:	d857      	bhi.n	800488c <HAL_TIM_OC_ConfigChannel+0xdc>
 80047dc:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004839 	.word	0x08004839
 80047e8:	0800488d 	.word	0x0800488d
 80047ec:	0800488d 	.word	0x0800488d
 80047f0:	0800488d 	.word	0x0800488d
 80047f4:	08004847 	.word	0x08004847
 80047f8:	0800488d 	.word	0x0800488d
 80047fc:	0800488d 	.word	0x0800488d
 8004800:	0800488d 	.word	0x0800488d
 8004804:	08004855 	.word	0x08004855
 8004808:	0800488d 	.word	0x0800488d
 800480c:	0800488d 	.word	0x0800488d
 8004810:	0800488d 	.word	0x0800488d
 8004814:	08004863 	.word	0x08004863
 8004818:	0800488d 	.word	0x0800488d
 800481c:	0800488d 	.word	0x0800488d
 8004820:	0800488d 	.word	0x0800488d
 8004824:	08004871 	.word	0x08004871
 8004828:	0800488d 	.word	0x0800488d
 800482c:	0800488d 	.word	0x0800488d
 8004830:	0800488d 	.word	0x0800488d
 8004834:	0800487f 	.word	0x0800487f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb50 	bl	8004ee4 <TIM_OC1_SetConfig>
      break;
 8004844:	e025      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fbe3 	bl	8005018 <TIM_OC2_SetConfig>
      break;
 8004852:	e01e      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fc70 	bl	8005140 <TIM_OC3_SetConfig>
      break;
 8004860:	e017      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fcfb 	bl	8005264 <TIM_OC4_SetConfig>
      break;
 800486e:	e010      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd88 	bl	800538c <TIM_OC5_SetConfig>
      break;
 800487c:	e009      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fdeb 	bl	8005460 <TIM_OC6_SetConfig>
      break;
 800488a:	e002      	b.n	8004892 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048be:	2302      	movs	r3, #2
 80048c0:	e0ff      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	f200 80f0 	bhi.w	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048d2:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	08004ab3 	.word	0x08004ab3
 80048e0:	08004ab3 	.word	0x08004ab3
 80048e4:	08004ab3 	.word	0x08004ab3
 80048e8:	0800496d 	.word	0x0800496d
 80048ec:	08004ab3 	.word	0x08004ab3
 80048f0:	08004ab3 	.word	0x08004ab3
 80048f4:	08004ab3 	.word	0x08004ab3
 80048f8:	080049af 	.word	0x080049af
 80048fc:	08004ab3 	.word	0x08004ab3
 8004900:	08004ab3 	.word	0x08004ab3
 8004904:	08004ab3 	.word	0x08004ab3
 8004908:	080049ef 	.word	0x080049ef
 800490c:	08004ab3 	.word	0x08004ab3
 8004910:	08004ab3 	.word	0x08004ab3
 8004914:	08004ab3 	.word	0x08004ab3
 8004918:	08004a31 	.word	0x08004a31
 800491c:	08004ab3 	.word	0x08004ab3
 8004920:	08004ab3 	.word	0x08004ab3
 8004924:	08004ab3 	.word	0x08004ab3
 8004928:	08004a71 	.word	0x08004a71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fad6 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0208 	orr.w	r2, r2, #8
 8004946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0204 	bic.w	r2, r2, #4
 8004956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	619a      	str	r2, [r3, #24]
      break;
 800496a:	e0a5      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fb50 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6999      	ldr	r1, [r3, #24]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]
      break;
 80049ac:	e084      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fbc3 	bl	8005140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0208 	orr.w	r2, r2, #8
 80049c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0204 	bic.w	r2, r2, #4
 80049d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69d9      	ldr	r1, [r3, #28]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	61da      	str	r2, [r3, #28]
      break;
 80049ec:	e064      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fc35 	bl	8005264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69d9      	ldr	r1, [r3, #28]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	021a      	lsls	r2, r3, #8
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	61da      	str	r2, [r3, #28]
      break;
 8004a2e:	e043      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fca8 	bl	800538c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a6e:	e023      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fcf2 	bl	8005460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ab0:	e002      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop

08004acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0f6      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x20a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6f      	ldr	r2, [pc, #444]	@ (8004ce0 <HAL_TIM_ConfigClockSource+0x214>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f000 80c1 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b28:	4a6d      	ldr	r2, [pc, #436]	@ (8004ce0 <HAL_TIM_ConfigClockSource+0x214>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	f200 80c6 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b30:	4a6c      	ldr	r2, [pc, #432]	@ (8004ce4 <HAL_TIM_ConfigClockSource+0x218>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	f000 80b9 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b38:	4a6a      	ldr	r2, [pc, #424]	@ (8004ce4 <HAL_TIM_ConfigClockSource+0x218>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f200 80be 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b40:	4a69      	ldr	r2, [pc, #420]	@ (8004ce8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	f000 80b1 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b48:	4a67      	ldr	r2, [pc, #412]	@ (8004ce8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f200 80b6 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b50:	4a66      	ldr	r2, [pc, #408]	@ (8004cec <HAL_TIM_ConfigClockSource+0x220>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f000 80a9 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b58:	4a64      	ldr	r2, [pc, #400]	@ (8004cec <HAL_TIM_ConfigClockSource+0x220>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f200 80ae 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b60:	4a63      	ldr	r2, [pc, #396]	@ (8004cf0 <HAL_TIM_ConfigClockSource+0x224>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 80a1 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b68:	4a61      	ldr	r2, [pc, #388]	@ (8004cf0 <HAL_TIM_ConfigClockSource+0x224>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f200 80a6 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b70:	4a60      	ldr	r2, [pc, #384]	@ (8004cf4 <HAL_TIM_ConfigClockSource+0x228>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f000 8099 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b78:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf4 <HAL_TIM_ConfigClockSource+0x228>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f200 809e 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b84:	f000 8091 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b8c:	f200 8096 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b94:	f000 8089 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9c:	f200 808e 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0x158>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	f000 8086 	beq.w	8004cc2 <HAL_TIM_ConfigClockSource+0x1f6>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bbc:	2b70      	cmp	r3, #112	@ 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x12a>
 8004bc0:	2b70      	cmp	r3, #112	@ 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc4:	2b60      	cmp	r3, #96	@ 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x19e>
 8004bc8:	2b60      	cmp	r3, #96	@ 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bcc:	2b50      	cmp	r3, #80	@ 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x17e>
 8004bd0:	2b50      	cmp	r3, #80	@ 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x1be>
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1de>
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	f000 fdf3 	bl	80057f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04f      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	f000 fddc 	bl	80057f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fd4e 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	@ 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fda7 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 fd6d 	bl	8005756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	@ 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fd97 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fd2e 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd87 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 fd7e 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8004cba:	e003      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	00100070 	.word	0x00100070
 8004ce4:	00100060 	.word	0x00100060
 8004ce8:	00100050 	.word	0x00100050
 8004cec:	00100040 	.word	0x00100040
 8004cf0:	00100030 	.word	0x00100030
 8004cf4:	00100020 	.word	0x00100020

08004cf8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e031      	b.n	8004d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fc08 	bl	8005538 <TIM_SlaveTimer_SetConfig>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e018      	b.n	8004d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec0 <TIM_Base_SetConfig+0x144>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d017      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9a:	d013      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a49      	ldr	r2, [pc, #292]	@ (8004ec4 <TIM_Base_SetConfig+0x148>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a48      	ldr	r2, [pc, #288]	@ (8004ec8 <TIM_Base_SetConfig+0x14c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a47      	ldr	r2, [pc, #284]	@ (8004ecc <TIM_Base_SetConfig+0x150>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a46      	ldr	r2, [pc, #280]	@ (8004ed0 <TIM_Base_SetConfig+0x154>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0x48>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a45      	ldr	r2, [pc, #276]	@ (8004ed4 <TIM_Base_SetConfig+0x158>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a39      	ldr	r2, [pc, #228]	@ (8004ec0 <TIM_Base_SetConfig+0x144>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d023      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a36      	ldr	r2, [pc, #216]	@ (8004ec4 <TIM_Base_SetConfig+0x148>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a35      	ldr	r2, [pc, #212]	@ (8004ec8 <TIM_Base_SetConfig+0x14c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a34      	ldr	r2, [pc, #208]	@ (8004ecc <TIM_Base_SetConfig+0x150>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a33      	ldr	r2, [pc, #204]	@ (8004ed0 <TIM_Base_SetConfig+0x154>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a33      	ldr	r2, [pc, #204]	@ (8004ed8 <TIM_Base_SetConfig+0x15c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a32      	ldr	r2, [pc, #200]	@ (8004edc <TIM_Base_SetConfig+0x160>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <TIM_Base_SetConfig+0x164>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0xaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <TIM_Base_SetConfig+0x158>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <TIM_Base_SetConfig+0x144>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <TIM_Base_SetConfig+0x110>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <TIM_Base_SetConfig+0x154>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0x110>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <TIM_Base_SetConfig+0x15c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x110>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <TIM_Base_SetConfig+0x160>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x110>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ee0 <TIM_Base_SetConfig+0x164>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x110>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a13      	ldr	r2, [pc, #76]	@ (8004ed4 <TIM_Base_SetConfig+0x158>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40015000 	.word	0x40015000
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a30      	ldr	r2, [pc, #192]	@ (8005000 <TIM_OC1_SetConfig+0x11c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <TIM_OC1_SetConfig+0x88>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	@ (8005004 <TIM_OC1_SetConfig+0x120>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_OC1_SetConfig+0x88>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005008 <TIM_OC1_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_OC1_SetConfig+0x88>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a2d      	ldr	r2, [pc, #180]	@ (800500c <TIM_OC1_SetConfig+0x128>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_OC1_SetConfig+0x88>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005010 <TIM_OC1_SetConfig+0x12c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC1_SetConfig+0x88>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a2b      	ldr	r2, [pc, #172]	@ (8005014 <TIM_OC1_SetConfig+0x130>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10c      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0308 	bic.w	r3, r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <TIM_OC1_SetConfig+0x11c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <TIM_OC1_SetConfig+0xd2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <TIM_OC1_SetConfig+0x120>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <TIM_OC1_SetConfig+0xd2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <TIM_OC1_SetConfig+0x124>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_OC1_SetConfig+0xd2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <TIM_OC1_SetConfig+0x128>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_OC1_SetConfig+0xd2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <TIM_OC1_SetConfig+0x12c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC1_SetConfig+0xd2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	@ (8005014 <TIM_OC1_SetConfig+0x130>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40013400 	.word	0x40013400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	40015000 	.word	0x40015000

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0210 	bic.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2c      	ldr	r2, [pc, #176]	@ (8005128 <TIM_OC2_SetConfig+0x110>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_OC2_SetConfig+0x74>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <TIM_OC2_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0x74>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2a      	ldr	r2, [pc, #168]	@ (8005130 <TIM_OC2_SetConfig+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10d      	bne.n	80050a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005128 <TIM_OC2_SetConfig+0x110>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <TIM_OC2_SetConfig+0xc0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <TIM_OC2_SetConfig+0x114>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00f      	beq.n	80050d8 <TIM_OC2_SetConfig+0xc0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005134 <TIM_OC2_SetConfig+0x11c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_OC2_SetConfig+0xc0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <TIM_OC2_SetConfig+0x120>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_OC2_SetConfig+0xc0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <TIM_OC2_SetConfig+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC2_SetConfig+0xc0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <TIM_OC2_SetConfig+0x118>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d113      	bne.n	8005100 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40015000 	.word	0x40015000
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800

08005140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800518c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <TIM_OC3_SetConfig+0x10c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC3_SetConfig+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005250 <TIM_OC3_SetConfig+0x110>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC3_SetConfig+0x72>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <TIM_OC3_SetConfig+0x114>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10d      	bne.n	80051ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <TIM_OC3_SetConfig+0x10c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_OC3_SetConfig+0xbe>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <TIM_OC3_SetConfig+0x110>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_OC3_SetConfig+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <TIM_OC3_SetConfig+0x118>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_OC3_SetConfig+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <TIM_OC3_SetConfig+0x11c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_OC3_SetConfig+0xbe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005260 <TIM_OC3_SetConfig+0x120>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0xbe>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a16      	ldr	r2, [pc, #88]	@ (8005254 <TIM_OC3_SetConfig+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d113      	bne.n	8005226 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40013400 	.word	0x40013400
 8005254:	40015000 	.word	0x40015000
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005374 <TIM_OC4_SetConfig+0x110>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_OC4_SetConfig+0x74>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <TIM_OC4_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC4_SetConfig+0x74>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a2a      	ldr	r2, [pc, #168]	@ (800537c <TIM_OC4_SetConfig+0x118>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d10d      	bne.n	80052f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005374 <TIM_OC4_SetConfig+0x110>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <TIM_OC4_SetConfig+0xc0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <TIM_OC4_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_OC4_SetConfig+0xc0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1e      	ldr	r2, [pc, #120]	@ (8005380 <TIM_OC4_SetConfig+0x11c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_OC4_SetConfig+0xc0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1d      	ldr	r2, [pc, #116]	@ (8005384 <TIM_OC4_SetConfig+0x120>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC4_SetConfig+0xc0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <TIM_OC4_SetConfig+0x124>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC4_SetConfig+0xc0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <TIM_OC4_SetConfig+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800532a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005332:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40015000 	.word	0x40015000
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <TIM_OC5_SetConfig+0xbc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <TIM_OC5_SetConfig+0x82>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <TIM_OC5_SetConfig+0xc0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00f      	beq.n	800540e <TIM_OC5_SetConfig+0x82>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <TIM_OC5_SetConfig+0xc4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_OC5_SetConfig+0x82>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a16      	ldr	r2, [pc, #88]	@ (8005454 <TIM_OC5_SetConfig+0xc8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_OC5_SetConfig+0x82>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <TIM_OC5_SetConfig+0xcc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC5_SetConfig+0x82>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a14      	ldr	r2, [pc, #80]	@ (800545c <TIM_OC5_SetConfig+0xd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d109      	bne.n	8005422 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40013400 	.word	0x40013400
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800
 800545c:	40015000 	.word	0x40015000

08005460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	051b      	lsls	r3, r3, #20
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005520 <TIM_OC6_SetConfig+0xc0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_OC6_SetConfig+0x84>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a19      	ldr	r2, [pc, #100]	@ (8005524 <TIM_OC6_SetConfig+0xc4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00f      	beq.n	80054e4 <TIM_OC6_SetConfig+0x84>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <TIM_OC6_SetConfig+0xc8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_OC6_SetConfig+0x84>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a17      	ldr	r2, [pc, #92]	@ (800552c <TIM_OC6_SetConfig+0xcc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC6_SetConfig+0x84>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <TIM_OC6_SetConfig+0xd0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC6_SetConfig+0x84>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <TIM_OC6_SetConfig+0xd4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	40015000 	.word	0x40015000

08005538 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005558:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4a56      	ldr	r2, [pc, #344]	@ (80056e0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	f000 80a2 	beq.w	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 800558e:	4a54      	ldr	r2, [pc, #336]	@ (80056e0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	f200 809b 	bhi.w	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005596:	4a53      	ldr	r2, [pc, #332]	@ (80056e4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005598:	4293      	cmp	r3, r2
 800559a:	f000 809a 	beq.w	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 800559e:	4a51      	ldr	r2, [pc, #324]	@ (80056e4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	f200 8093 	bhi.w	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055a6:	4a50      	ldr	r2, [pc, #320]	@ (80056e8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	f000 8092 	beq.w	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055ae:	4a4e      	ldr	r2, [pc, #312]	@ (80056e8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	f200 808b 	bhi.w	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055b6:	4a4d      	ldr	r2, [pc, #308]	@ (80056ec <TIM_SlaveTimer_SetConfig+0x1b4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	f000 808a 	beq.w	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055be:	4a4b      	ldr	r2, [pc, #300]	@ (80056ec <TIM_SlaveTimer_SetConfig+0x1b4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f200 8083 	bhi.w	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055c6:	4a4a      	ldr	r2, [pc, #296]	@ (80056f0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f000 8082 	beq.w	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055ce:	4a48      	ldr	r2, [pc, #288]	@ (80056f0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d87b      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055d4:	4a47      	ldr	r2, [pc, #284]	@ (80056f4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d07b      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055da:	4a46      	ldr	r2, [pc, #280]	@ (80056f4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d875      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055e4:	d075      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055e6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055ea:	d86f      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f0:	d06f      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d869      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 80055f8:	2b70      	cmp	r3, #112	@ 0x70
 80055fa:	d01a      	beq.n	8005632 <TIM_SlaveTimer_SetConfig+0xfa>
 80055fc:	2b70      	cmp	r3, #112	@ 0x70
 80055fe:	d865      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005600:	2b60      	cmp	r3, #96	@ 0x60
 8005602:	d059      	beq.n	80056b8 <TIM_SlaveTimer_SetConfig+0x180>
 8005604:	2b60      	cmp	r3, #96	@ 0x60
 8005606:	d861      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005608:	2b50      	cmp	r3, #80	@ 0x50
 800560a:	d04b      	beq.n	80056a4 <TIM_SlaveTimer_SetConfig+0x16c>
 800560c:	2b50      	cmp	r3, #80	@ 0x50
 800560e:	d85d      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d019      	beq.n	8005648 <TIM_SlaveTimer_SetConfig+0x110>
 8005614:	2b40      	cmp	r3, #64	@ 0x40
 8005616:	d859      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005618:	2b30      	cmp	r3, #48	@ 0x30
 800561a:	d05a      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 800561c:	2b30      	cmp	r3, #48	@ 0x30
 800561e:	d855      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d056      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d851      	bhi.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d052      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 800562c:	2b10      	cmp	r3, #16
 800562e:	d050      	beq.n	80056d2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005630:	e04c      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	f000 f8d5 	bl	80057f0 <TIM_ETR_SetConfig>
      break;
 8005646:	e045      	b.n	80056d4 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d004      	beq.n	800565a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005654:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005658:	d101      	bne.n	800565e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e03b      	b.n	80056d6 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6a1a      	ldr	r2, [r3, #32]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005684:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
      break;
 80056a2:	e017      	b.n	80056d4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b0:	461a      	mov	r2, r3
 80056b2:	f000 f821 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      break;
 80056b6:	e00d      	b.n	80056d4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c4:	461a      	mov	r2, r3
 80056c6:	f000 f846 	bl	8005756 <TIM_TI2_ConfigInputStage>
      break;
 80056ca:	e003      	b.n	80056d4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	e000      	b.n	80056d4 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80056d2:	bf00      	nop
  }

  return status;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	00100070 	.word	0x00100070
 80056e4:	00100060 	.word	0x00100060
 80056e8:	00100050 	.word	0x00100050
 80056ec:	00100040 	.word	0x00100040
 80056f0:	00100030 	.word	0x00100030
 80056f4:	00100020 	.word	0x00100020

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0210 	bic.w	r2, r3, #16
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005792:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f043 0307 	orr.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	431a      	orrs	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e074      	b.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a34      	ldr	r2, [pc, #208]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a33      	ldr	r2, [pc, #204]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a31      	ldr	r2, [pc, #196]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005914:	d01d      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1f      	ldr	r2, [pc, #124]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1d      	ldr	r2, [pc, #116]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1c      	ldr	r2, [pc, #112]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a15      	ldr	r2, [pc, #84]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a11      	ldr	r2, [pc, #68]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10c      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40015000 	.word	0x40015000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40014000 	.word	0x40014000

080059a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e078      	b.n	8005ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d11c      	bne.n	8005aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	051b      	lsls	r3, r3, #20
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40015000 	.word	0x40015000

08005ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e042      	b.n	8005b68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fb fd3d 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2224      	movs	r2, #36	@ 0x24
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fb24 	bl	8006168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f825 	bl	8005b70 <UART_SetConfig>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e01b      	b.n	8005b68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fba3 	bl	80062ac <UART_CheckIdleState>
 8005b66:	4603      	mov	r3, r0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b74:	b08c      	sub	sp, #48	@ 0x30
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4baa      	ldr	r3, [pc, #680]	@ (8005e48 <UART_SetConfig+0x2d8>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a9f      	ldr	r2, [pc, #636]	@ (8005e4c <UART_SetConfig+0x2dc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005be6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	f023 010f 	bic.w	r1, r3, #15
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a90      	ldr	r2, [pc, #576]	@ (8005e50 <UART_SetConfig+0x2e0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d125      	bne.n	8005c60 <UART_SetConfig+0xf0>
 8005c14:	4b8f      	ldr	r3, [pc, #572]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d81a      	bhi.n	8005c58 <UART_SetConfig+0xe8>
 8005c22:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <UART_SetConfig+0xb8>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e116      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e112      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4e:	e10e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c56:	e10a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5e:	e106      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7c      	ldr	r2, [pc, #496]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d138      	bne.n	8005cdc <UART_SetConfig+0x16c>
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d82d      	bhi.n	8005cd4 <UART_SetConfig+0x164>
 8005c78:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0x110>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	e0d8      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e0d4      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cca:	e0d0      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e0cc      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e0c8      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e5c <UART_SetConfig+0x2ec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <UART_SetConfig+0x1c2>
 8005ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cf0:	2b30      	cmp	r3, #48	@ 0x30
 8005cf2:	d016      	beq.n	8005d22 <UART_SetConfig+0x1b2>
 8005cf4:	2b30      	cmp	r3, #48	@ 0x30
 8005cf6:	d818      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x1a2>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d814      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <UART_SetConfig+0x19a>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d008      	beq.n	8005d1a <UART_SetConfig+0x1aa>
 8005d08:	e00f      	b.n	8005d2a <UART_SetConfig+0x1ba>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d10:	e0ad      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d12:	2302      	movs	r3, #2
 8005d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d18:	e0a9      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d20:	e0a5      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d22:	2308      	movs	r3, #8
 8005d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d28:	e0a1      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d30:	e09d      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4a      	ldr	r2, [pc, #296]	@ (8005e60 <UART_SetConfig+0x2f0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d125      	bne.n	8005d88 <UART_SetConfig+0x218>
 8005d3c:	4b45      	ldr	r3, [pc, #276]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d48:	d016      	beq.n	8005d78 <UART_SetConfig+0x208>
 8005d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d4c:	d818      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d4e:	2b80      	cmp	r3, #128	@ 0x80
 8005d50:	d00a      	beq.n	8005d68 <UART_SetConfig+0x1f8>
 8005d52:	2b80      	cmp	r3, #128	@ 0x80
 8005d54:	d814      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <UART_SetConfig+0x1f0>
 8005d5a:	2b40      	cmp	r3, #64	@ 0x40
 8005d5c:	d008      	beq.n	8005d70 <UART_SetConfig+0x200>
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x210>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d66:	e082      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6e:	e07e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d76:	e07a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7e:	e076      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d86:	e072      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a35      	ldr	r2, [pc, #212]	@ (8005e64 <UART_SetConfig+0x2f4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d12a      	bne.n	8005de8 <UART_SetConfig+0x278>
 8005d92:	4b30      	ldr	r3, [pc, #192]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da0:	d01a      	beq.n	8005dd8 <UART_SetConfig+0x268>
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da6:	d81b      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dac:	d00c      	beq.n	8005dc8 <UART_SetConfig+0x258>
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db2:	d815      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <UART_SetConfig+0x250>
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbc:	d008      	beq.n	8005dd0 <UART_SetConfig+0x260>
 8005dbe:	e00f      	b.n	8005de0 <UART_SetConfig+0x270>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc6:	e052      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dce:	e04e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e04a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dde:	e046      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de6:	e042      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a17      	ldr	r2, [pc, #92]	@ (8005e4c <UART_SetConfig+0x2dc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d13a      	bne.n	8005e68 <UART_SetConfig+0x2f8>
 8005df2:	4b18      	ldr	r3, [pc, #96]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e00:	d01a      	beq.n	8005e38 <UART_SetConfig+0x2c8>
 8005e02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e06:	d81b      	bhi.n	8005e40 <UART_SetConfig+0x2d0>
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e0c:	d00c      	beq.n	8005e28 <UART_SetConfig+0x2b8>
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e12:	d815      	bhi.n	8005e40 <UART_SetConfig+0x2d0>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <UART_SetConfig+0x2b0>
 8005e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1c:	d008      	beq.n	8005e30 <UART_SetConfig+0x2c0>
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x2d0>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e022      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2e:	e01e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e36:	e01a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e3e:	e016      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e46:	e012      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e48:	cfff69f3 	.word	0xcfff69f3
 8005e4c:	40008000 	.word	0x40008000
 8005e50:	40013800 	.word	0x40013800
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	40004800 	.word	0x40004800
 8005e60:	40004c00 	.word	0x40004c00
 8005e64:	40005000 	.word	0x40005000
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4aae      	ldr	r2, [pc, #696]	@ (800612c <UART_SetConfig+0x5bc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	f040 8097 	bne.w	8005fa8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d823      	bhi.n	8005eca <UART_SetConfig+0x35a>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x318>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005ecb 	.word	0x08005ecb
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ecb 	.word	0x08005ecb
 8005e98:	08005ebb 	.word	0x08005ebb
 8005e9c:	08005ecb 	.word	0x08005ecb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005ecb 	.word	0x08005ecb
 8005ea8:	08005ec3 	.word	0x08005ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fd fef0 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eb2:	e010      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb4:	4b9e      	ldr	r3, [pc, #632]	@ (8006130 <UART_SetConfig+0x5c0>)
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005eb8:	e00d      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eba:	f7fd fe7d 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8005ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec0:	e009      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ec8:	e005      	b.n	8005ed6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8130 	beq.w	800613e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	4a94      	ldr	r2, [pc, #592]	@ (8006134 <UART_SetConfig+0x5c4>)
 8005ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d305      	bcc.n	8005f0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d903      	bls.n	8005f16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f14:	e113      	b.n	800613e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	2200      	movs	r2, #0
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	60fa      	str	r2, [r7, #12]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	4a84      	ldr	r2, [pc, #528]	@ (8006134 <UART_SetConfig+0x5c4>)
 8005f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f38:	f7fa f96e 	bl	8000218 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	020b      	lsls	r3, r1, #8
 8005f4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f52:	0202      	lsls	r2, r0, #8
 8005f54:	6979      	ldr	r1, [r7, #20]
 8005f56:	6849      	ldr	r1, [r1, #4]
 8005f58:	0849      	lsrs	r1, r1, #1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4605      	mov	r5, r0
 8005f60:	eb12 0804 	adds.w	r8, r2, r4
 8005f64:	eb43 0905 	adc.w	r9, r3, r5
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	469a      	mov	sl, r3
 8005f70:	4693      	mov	fp, r2
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	4640      	mov	r0, r8
 8005f78:	4649      	mov	r1, r9
 8005f7a:	f7fa f94d 	bl	8000218 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4613      	mov	r3, r2
 8005f84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f8c:	d308      	bcc.n	8005fa0 <UART_SetConfig+0x430>
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f94:	d204      	bcs.n	8005fa0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e0ce      	b.n	800613e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005fa6:	e0ca      	b.n	800613e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb0:	d166      	bne.n	8006080 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d827      	bhi.n	800600a <UART_SetConfig+0x49a>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <UART_SetConfig+0x450>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	0800600b 	.word	0x0800600b
 8005fd0:	08005ffb 	.word	0x08005ffb
 8005fd4:	0800600b 	.word	0x0800600b
 8005fd8:	0800600b 	.word	0x0800600b
 8005fdc:	0800600b 	.word	0x0800600b
 8005fe0:	08006003 	.word	0x08006003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fd fe54 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fea:	e014      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fd fe66 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8005ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ff2:	e010      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8006130 <UART_SetConfig+0x5c0>)
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ff8:	e00d      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffa:	f7fd fddd 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8005ffe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006000:	e009      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006008:	e005      	b.n	8006016 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8090 	beq.w	800613e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	4a44      	ldr	r2, [pc, #272]	@ (8006134 <UART_SetConfig+0x5c4>)
 8006024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006028:	461a      	mov	r2, r3
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006030:	005a      	lsls	r2, r3, #1
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	441a      	add	r2, r3
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d916      	bls.n	8006078 <UART_SetConfig+0x508>
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006050:	d212      	bcs.n	8006078 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f023 030f 	bic.w	r3, r3, #15
 800605a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	b29a      	uxth	r2, r3
 8006068:	8bfb      	ldrh	r3, [r7, #30]
 800606a:	4313      	orrs	r3, r2
 800606c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	8bfa      	ldrh	r2, [r7, #30]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e062      	b.n	800613e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800607e:	e05e      	b.n	800613e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006080:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006084:	2b08      	cmp	r3, #8
 8006086:	d828      	bhi.n	80060da <UART_SetConfig+0x56a>
 8006088:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x520>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fd fdec 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80060b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fd fdfe 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 80060c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006130 <UART_SetConfig+0x5c0>)
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fd fd75 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 80060ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060e4:	bf00      	nop
    }

    if (pclk != 0U)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d028      	beq.n	800613e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	4a10      	ldr	r2, [pc, #64]	@ (8006134 <UART_SetConfig+0x5c4>)
 80060f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	441a      	add	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d910      	bls.n	8006138 <UART_SetConfig+0x5c8>
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800611c:	d20c      	bcs.n	8006138 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	b29a      	uxth	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	e009      	b.n	800613e <UART_SetConfig+0x5ce>
 800612a:	bf00      	nop
 800612c:	40008000 	.word	0x40008000
 8006130:	00f42400 	.word	0x00f42400
 8006134:	08006834 	.word	0x08006834
      }
      else
      {
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2201      	movs	r2, #1
 8006142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2201      	movs	r2, #1
 800614a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800615a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800615e:	4618      	mov	r0, r3
 8006160:	3730      	adds	r7, #48	@ 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01a      	beq.n	800627e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006266:	d10a      	bne.n	800627e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b098      	sub	sp, #96	@ 0x60
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062bc:	f7fb fa82 	bl	80017c4 <HAL_GetTick>
 80062c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d12f      	bne.n	8006330 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d8:	2200      	movs	r2, #0
 80062da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f88e 	bl	8006400 <UART_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006308:	647b      	str	r3, [r7, #68]	@ 0x44
 800630a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800630e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e063      	b.n	80063f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d149      	bne.n	80063d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800633e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006346:	2200      	movs	r2, #0
 8006348:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f857 	bl	8006400 <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d03c      	beq.n	80063d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	623b      	str	r3, [r7, #32]
   return(result);
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800636c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30
 8006378:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	60fb      	str	r3, [r7, #12]
   return(result);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	617b      	str	r3, [r7, #20]
   return(result);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e012      	b.n	80063f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3758      	adds	r7, #88	@ 0x58
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006410:	e04f      	b.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006418:	d04b      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641a:	f7fb f9d3 	bl	80017c4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <UART_WaitOnFlagUntilTimeout+0x30>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e04e      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d037      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b80      	cmp	r3, #128	@ 0x80
 8006446:	d034      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b40      	cmp	r3, #64	@ 0x40
 800644c:	d031      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b08      	cmp	r3, #8
 800645a:	d110      	bne.n	800647e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2208      	movs	r2, #8
 8006462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f838 	bl	80064da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2208      	movs	r2, #8
 800646e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e029      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648c:	d111      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f81e 	bl	80064da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e00f      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d0a0      	beq.n	8006412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064da:	b480      	push	{r7}
 80064dc:	b095      	sub	sp, #84	@ 0x54
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006500:	643b      	str	r3, [r7, #64]	@ 0x40
 8006502:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	61fb      	str	r3, [r7, #28]
   return(result);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800653e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e3      	bne.n	8006514 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d118      	bne.n	8006586 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	60bb      	str	r3, [r7, #8]
   return(result);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0310 	bic.w	r3, r3, #16
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6979      	ldr	r1, [r7, #20]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	613b      	str	r3, [r7, #16]
   return(result);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e6      	bne.n	8006554 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800659a:	bf00      	nop
 800659c:	3754      	adds	r7, #84	@ 0x54
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_UARTEx_DisableFifoMode+0x16>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e027      	b.n	800660c <HAL_UARTEx_DisableFifoMode+0x66>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	@ 0x24
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e02d      	b.n	800668c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	@ 0x24
 800663c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f84f 	bl	8006710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e02d      	b.n	8006708 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	@ 0x24
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f811 	bl	8006710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671c:	2b00      	cmp	r3, #0
 800671e:	d108      	bne.n	8006732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006730:	e031      	b.n	8006796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006732:	2308      	movs	r3, #8
 8006734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006736:	2308      	movs	r3, #8
 8006738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	0e5b      	lsrs	r3, r3, #25
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	0f5b      	lsrs	r3, r3, #29
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	7b3a      	ldrb	r2, [r7, #12]
 800675e:	4911      	ldr	r1, [pc, #68]	@ (80067a4 <UARTEx_SetNbDataToProcess+0x94>)
 8006760:	5c8a      	ldrb	r2, [r1, r2]
 8006762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006766:	7b3a      	ldrb	r2, [r7, #12]
 8006768:	490f      	ldr	r1, [pc, #60]	@ (80067a8 <UARTEx_SetNbDataToProcess+0x98>)
 800676a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800676c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006770:	b29a      	uxth	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	7b7a      	ldrb	r2, [r7, #13]
 800677c:	4909      	ldr	r1, [pc, #36]	@ (80067a4 <UARTEx_SetNbDataToProcess+0x94>)
 800677e:	5c8a      	ldrb	r2, [r1, r2]
 8006780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006784:	7b7a      	ldrb	r2, [r7, #13]
 8006786:	4908      	ldr	r1, [pc, #32]	@ (80067a8 <UARTEx_SetNbDataToProcess+0x98>)
 8006788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800678a:	fb93 f3f2 	sdiv	r3, r3, r2
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	0800684c 	.word	0x0800684c
 80067a8:	08006854 	.word	0x08006854

080067ac <memset>:
 80067ac:	4402      	add	r2, r0
 80067ae:	4603      	mov	r3, r0
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memset+0xa>
 80067b4:	4770      	bx	lr
 80067b6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ba:	e7f9      	b.n	80067b0 <memset+0x4>

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4d0d      	ldr	r5, [pc, #52]	@ (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	@ (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2600      	movs	r6, #0
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4d0b      	ldr	r5, [pc, #44]	@ (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 f818 	bl	8006804 <_init>
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2600      	movs	r6, #0
 80067da:	42a6      	cmp	r6, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e4:	4798      	blx	r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ee:	4798      	blx	r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	08006864 	.word	0x08006864
 80067f8:	08006864 	.word	0x08006864
 80067fc:	08006864 	.word	0x08006864
 8006800:	08006868 	.word	0x08006868

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
