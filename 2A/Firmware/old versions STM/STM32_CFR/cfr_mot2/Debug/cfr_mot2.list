
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b1c  08005b1c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b24  08005b24  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000005c  08005b88  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005b88  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011827  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002553  00000000  00000000  000188b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2d  00000000  00000000  0001bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027152  00000000  00000000  0001c9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013432  00000000  00000000  00043b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f25a2  00000000  00000000  00056f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001494f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  00149538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059b8 	.word	0x080059b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080059b8 	.word	0x080059b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08f      	sub	sp, #60	@ 0x3c
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fde9 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f885 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 faa7 	bl	8000a18 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ca:	f000 fa23 	bl	8000914 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004ce:	f000 f8d1 	bl	8000674 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80004d2:	f000 f95b 	bl	800078c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8f9 	bl	80006cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004da:	f000 f927 	bl	800072c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004de:	2108      	movs	r1, #8
 80004e0:	4833      	ldr	r0, [pc, #204]	@ (80005b0 <main+0xf8>)
 80004e2:	f002 fd7d 	bl	8002fe0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004e6:	210c      	movs	r1, #12
 80004e8:	4831      	ldr	r0, [pc, #196]	@ (80005b0 <main+0xf8>)
 80004ea:	f002 fd79 	bl	8002fe0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA8
 80004ee:	2100      	movs	r1, #0
 80004f0:	4830      	ldr	r0, [pc, #192]	@ (80005b4 <main+0xfc>)
 80004f2:	f002 fd75 	bl	8002fe0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //PA9
 80004f6:	2104      	movs	r1, #4
 80004f8:	482e      	ldr	r0, [pc, #184]	@ (80005b4 <main+0xfc>)
 80004fa:	f002 fd71 	bl	8002fe0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PA10
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	@ (80005b4 <main+0xfc>)
 8000502:	f002 fd6d 	bl	8002fe0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000506:	220d      	movs	r2, #13
 8000508:	492b      	ldr	r1, [pc, #172]	@ (80005b8 <main+0x100>)
 800050a:	482c      	ldr	r0, [pc, #176]	@ (80005bc <main+0x104>)
 800050c:	f003 fe66 	bl	80041dc <HAL_UART_Receive_IT>
  {

	  // Pour le moteur Maxon droit
	  //char direction_d = rx_data[0]; // Premier caractère pour la direction
	  char mot_maxon_dataD[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataD, (char *)&rx_data[1], 4);
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	2204      	movs	r2, #4
 8000516:	492a      	ldr	r1, [pc, #168]	@ (80005c0 <main+0x108>)
 8000518:	4618      	mov	r0, r3
 800051a:	f005 fa01 	bl	8005920 <strncpy>
	  mot_maxon_dataD[4] = '\0';    // Null terminate
 800051e:	2300      	movs	r3, #0
 8000520:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  int mot_maxon_valueD = atoi(mot_maxon_dataD);
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	4618      	mov	r0, r3
 800052a:	f005 f969 	bl	8005800 <atoi>
 800052e:	6378      	str	r0, [r7, #52]	@ 0x34
	  int inv_d = rx_data[0] - '0';
 8000530:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <main+0x100>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b30      	subs	r3, #48	@ 0x30
 8000536:	633b      	str	r3, [r7, #48]	@ 0x30
	  mot_maxonD(mot_maxon_valueD, inv_d);
 8000538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800053a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800053c:	f000 fb06 	bl	8000b4c <mot_maxonD>

	  // Pour le moteur Maxon gauche
	  //char direction_g = rx_data[5]; // Premier caractère pour la direction
	  char mot_maxon_dataG[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataG, (char *)&rx_data[6], 4);
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	2204      	movs	r2, #4
 8000546:	491f      	ldr	r1, [pc, #124]	@ (80005c4 <main+0x10c>)
 8000548:	4618      	mov	r0, r3
 800054a:	f005 f9e9 	bl	8005920 <strncpy>
	  mot_maxon_dataG[4] = '\0';    // Null terminate
 800054e:	2300      	movs	r3, #0
 8000550:	773b      	strb	r3, [r7, #28]
	  int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	4618      	mov	r0, r3
 8000558:	f005 f952 	bl	8005800 <atoi>
 800055c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  int inv_g = rx_data[5] - '0';
 800055e:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <main+0x100>)
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	3b30      	subs	r3, #48	@ 0x30
 8000564:	62bb      	str	r3, [r7, #40]	@ 0x28
	  mot_maxonG(mot_maxon_valueG, inv_g);
 8000566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800056a:	f000 fb1f 	bl	8000bac <mot_maxonG>

	  // Pour le servo moteur
	  char servo_goal_data[4];
	  memcpy(servo_goal_data, (char *)&rx_data[10], 3);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2203      	movs	r2, #3
 8000574:	4914      	ldr	r1, [pc, #80]	@ (80005c8 <main+0x110>)
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fa10 	bl	800599c <memcpy>
	  servo_goal_data[3] = '\0';
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
	  reach_goal_servo(servo_goal_data);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fb41 	bl	8000c0c <reach_goal_servo>
	  //servo_goal_data[5] = '\n';
	  //HAL_UART_Transmit(&huart3, (uint8_t *)servo_goal_data, 5, HAL_MAX_DELAY);

	  // Transmission pour debug
	  char message[15]; // 13 caractères de rx_data + 2 pour "\r\n"
	  memcpy(message, rx_data, 13); // Copier rx_data dans message
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <main+0x100>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000590:	c407      	stmia	r4!, {r0, r1, r2}
 8000592:	7023      	strb	r3, [r4, #0]
	  message[14] = '\r'; // Ajouter retour chariot
 8000594:	230d      	movs	r3, #13
 8000596:	74bb      	strb	r3, [r7, #18]
	  message[15] = '\n'; // Ajouter nouvelle ligne
 8000598:	230a      	movs	r3, #10
 800059a:	74fb      	strb	r3, [r7, #19]
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	220f      	movs	r2, #15
 80005a4:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x114>)
 80005a6:	f003 fd8f 	bl	80040c8 <HAL_UART_Transmit>
  {
 80005aa:	bf00      	nop
 80005ac:	e7b0      	b.n	8000510 <main+0x58>
 80005ae:	bf00      	nop
 80005b0:	2000025c 	.word	0x2000025c
 80005b4:	20000210 	.word	0x20000210
 80005b8:	200002a8 	.word	0x200002a8
 80005bc:	20000078 	.word	0x20000078
 80005c0:	200002a9 	.word	0x200002a9
 80005c4:	200002ae 	.word	0x200002ae
 80005c8:	200002b2 	.word	0x200002b2
 80005cc:	20000100 	.word	0x20000100

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f996 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f001 f929 	bl	800184c <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 fa9e 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f960 	bl	80018f8 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 fa7f 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2104      	movs	r1, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd27 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000668:	f000 fa6a 	bl	8000b40 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	@ 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_LPUART1_UART_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006b2:	f003 fcbb 	bl	800402c <HAL_UART_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fa40 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000078 	.word	0x20000078
 80006c8:	40008000 	.word	0x40008000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <MX_USART2_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 8000710:	f003 fc8c 	bl	800402c <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 fa11 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000100 	.word	0x20000100
 8000728:	40004400 	.word	0x40004400

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART3_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000770:	f003 fc5c 	bl	800402c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f9e1 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000188 	.word	0x20000188
 8000788:	40004800 	.word	0x40004800

0800078c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09a      	sub	sp, #104	@ 0x68
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	222c      	movs	r2, #44	@ 0x2c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 f8a2 	bl	8005910 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007cc:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <MX_TIM1_Init+0x180>)
 80007ce:	4a50      	ldr	r2, [pc, #320]	@ (8000910 <MX_TIM1_Init+0x184>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80007d2:	4b4e      	ldr	r3, [pc, #312]	@ (800090c <MX_TIM1_Init+0x180>)
 80007d4:	224f      	movs	r2, #79	@ 0x4f
 80007d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <MX_TIM1_Init+0x180>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80007de:	4b4b      	ldr	r3, [pc, #300]	@ (800090c <MX_TIM1_Init+0x180>)
 80007e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <MX_TIM1_Init+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ec:	4b47      	ldr	r3, [pc, #284]	@ (800090c <MX_TIM1_Init+0x180>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <MX_TIM1_Init+0x180>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f8:	4844      	ldr	r0, [pc, #272]	@ (800090c <MX_TIM1_Init+0x180>)
 80007fa:	f002 fb39 	bl	8002e70 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 f99c 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000812:	4619      	mov	r1, r3
 8000814:	483d      	ldr	r0, [pc, #244]	@ (800090c <MX_TIM1_Init+0x180>)
 8000816:	f002 fdfd 	bl	8003414 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000820:	f000 f98e 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000824:	4839      	ldr	r0, [pc, #228]	@ (800090c <MX_TIM1_Init+0x180>)
 8000826:	f002 fb7a 	bl	8002f1e <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000830:	f000 f986 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000844:	4619      	mov	r1, r3
 8000846:	4831      	ldr	r0, [pc, #196]	@ (800090c <MX_TIM1_Init+0x180>)
 8000848:	f003 faea 	bl	8003e20 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000852:	f000 f975 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	@ 0x60
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4824      	ldr	r0, [pc, #144]	@ (800090c <MX_TIM1_Init+0x180>)
 800087c:	f002 fcb6 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000886:	f000 f95b 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <MX_TIM1_Init+0x180>)
 8000894:	f002 fcaa 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800089e:	f000 f94f 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a6:	2208      	movs	r2, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <MX_TIM1_Init+0x180>)
 80008ac:	f002 fc9e 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008b6:	f000 f943 	bl	8000b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4807      	ldr	r0, [pc, #28]	@ (800090c <MX_TIM1_Init+0x180>)
 80008f0:	f003 fb1e 	bl	8003f30 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008fa:	f000 f921 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM1_Init+0x180>)
 8000900:	f000 faf6 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 8000904:	bf00      	nop
 8000906:	3768      	adds	r7, #104	@ 0x68
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000210 	.word	0x20000210
 8000910:	40012c00 	.word	0x40012c00

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	@ 0x38
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000950:	224f      	movs	r2, #79	@ 0x4f
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b2f      	ldr	r3, [pc, #188]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800095c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096e:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000970:	f002 fa7e 	bl	8002e70 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800097a:	f000 f8e1 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000988:	4619      	mov	r1, r3
 800098a:	4822      	ldr	r0, [pc, #136]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800098c:	f002 fd42 	bl	8003414 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000996:	f000 f8d3 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800099a:	481e      	ldr	r0, [pc, #120]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800099c:	f002 fabf 	bl	8002f1e <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009a6:	f000 f8cb 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009ba:	f003 fa31 	bl	8003e20 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009c4:	f000 f8bc 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	@ 0x60
 80009ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2208      	movs	r2, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009e0:	f002 fc04 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009ea:	f000 f8a9 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	220c      	movs	r2, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009f6:	f002 fbf9 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a00:	f000 f89e 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000a06:	f000 fa73 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000025c 	.word	0x2000025c

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b36      	ldr	r3, [pc, #216]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a35      	ldr	r2, [pc, #212]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a29      	ldr	r2, [pc, #164]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_GPIO_Init+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 feb3 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000aa0:	481a      	ldr	r0, [pc, #104]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000aa2:	f000 fead 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4814      	ldr	r0, [pc, #80]	@ (8000b10 <MX_GPIO_Init+0xf8>)
 8000abe:	f000 fcf5 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 fce6 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000ae0:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000afa:	f000 fcd7 	bl	80014ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800

08000b14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <HAL_UART_RxCpltCallback+0x24>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d104      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x1a>
		// Réactiver la réception immédiatement
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000b24:	220d      	movs	r2, #13
 8000b26:	4905      	ldr	r1, [pc, #20]	@ (8000b3c <HAL_UART_RxCpltCallback+0x28>)
 8000b28:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <HAL_UART_RxCpltCallback+0x24>)
 8000b2a:	f003 fb57 	bl	80041dc <HAL_UART_Receive_IT>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000078 	.word	0x20000078
 8000b3c:	200002a8 	.word	0x200002a8

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <mot_maxonD>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxonD(int result, int inv) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10f      	bne.n	8000b7c <mot_maxonD+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);    // Direction avant
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <mot_maxonD+0x58>)
 8000b62:	f000 fe4d 	bl	8001800 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6c:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <mot_maxonD+0x58>)
 8000b6e:	f000 fe47 	bl	8001800 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <mot_maxonD+0x5c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
    }
}
 8000b7a:	e00e      	b.n	8000b9a <mot_maxonD+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <mot_maxonD+0x58>)
 8000b82:	f000 fe3d 	bl	8001800 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <mot_maxonD+0x58>)
 8000b8e:	f000 fe37 	bl	8001800 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000b92:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <mot_maxonD+0x5c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	2000025c 	.word	0x2000025c

08000bac <mot_maxonG>:

void mot_maxonG(int result, int inv) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10f      	bne.n	8000bdc <mot_maxonG+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);    // Direction avant
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <mot_maxonG+0x58>)
 8000bc2:	f000 fe1d 	bl	8001800 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <mot_maxonG+0x58>)
 8000bce:	f000 fe17 	bl	8001800 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <mot_maxonG+0x5c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
    }
}
 8000bda:	e00e      	b.n	8000bfa <mot_maxonG+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2120      	movs	r1, #32
 8000be0:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <mot_maxonG+0x58>)
 8000be2:	f000 fe0d 	bl	8001800 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <mot_maxonG+0x58>)
 8000bee:	f000 fe07 	bl	8001800 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <mot_maxonG+0x5c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	48000400 	.word	0x48000400
 8000c08:	2000025c 	.word	0x2000025c

08000c0c <reach_goal_servo>:
 *      Author: Antle
 */
#include "servo.h"
extern TIM_HandleTypeDef htim1;

void reach_goal_servo(char goal[3]){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    // Control first servo (CCR1) and 3
    if(goal[0] == '1') {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b31      	cmp	r3, #49	@ 0x31
 8000c1a:	d108      	bne.n	8000c2e <reach_goal_servo+0x22>
        TIM1->CCR1 = 2000; // Set to 2000 if character is '1'
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c1e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR3 = 2000;
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c2c:	e007      	b.n	8000c3e <reach_goal_servo+0x32>
    } else {
        TIM1->CCR1 = 1000; // Set to 1000 if character is '0'
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR3 = 1000;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    // Control second servo (CCR2)
    if(goal[1] == '1') {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b31      	cmp	r3, #49	@ 0x31
 8000c46:	d104      	bne.n	8000c52 <reach_goal_servo+0x46>
        TIM1->CCR2 = 2000;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {
        TIM1->CCR2 = 1000;
    }


}
 8000c50:	e003      	b.n	8000c5a <reach_goal_servo+0x4e>
        TIM1->CCR2 = 1000;
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <reach_goal_servo+0x5c>)
 8000c54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c58:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0b0      	sub	sp, #192	@ 0xc0
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2288      	movs	r2, #136	@ 0x88
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fe1b 	bl	8005910 <memset>
  if(huart->Instance==LPUART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a66      	ldr	r2, [pc, #408]	@ (8000e78 <HAL_UART_MspInit+0x1c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d143      	bne.n	8000d6c <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fc01 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cfc:	f7ff ff20 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d00:	4b5e      	ldr	r3, [pc, #376]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d04:	4a5d      	ldr	r2, [pc, #372]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
 8000d16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b58      	ldr	r3, [pc, #352]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	4a57      	ldr	r2, [pc, #348]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d24:	4b55      	ldr	r3, [pc, #340]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d30:	2303      	movs	r3, #3
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d52:	4619      	mov	r1, r3
 8000d54:	484a      	ldr	r0, [pc, #296]	@ (8000e80 <HAL_UART_MspInit+0x1cc>)
 8000d56:	f000 fba9 	bl	80014ac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2046      	movs	r0, #70	@ 0x46
 8000d60:	f000 faef 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d64:	2046      	movs	r0, #70	@ 0x46
 8000d66:	f000 fb08 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6a:	e081      	b.n	8000e70 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a44      	ldr	r2, [pc, #272]	@ (8000e84 <HAL_UART_MspInit+0x1d0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d13c      	bne.n	8000df0 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fbb8 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000d8e:	f7ff fed7 	bl	8000b40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a39      	ldr	r2, [pc, #228]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b37      	ldr	r3, [pc, #220]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b34      	ldr	r3, [pc, #208]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a33      	ldr	r2, [pc, #204]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f000 fb5f 	bl	80014ac <HAL_GPIO_Init>
}
 8000dee:	e03f      	b.n	8000e70 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a24      	ldr	r2, [pc, #144]	@ (8000e88 <HAL_UART_MspInit+0x1d4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13a      	bne.n	8000e70 <HAL_UART_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fb76 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8000e12:	f7ff fe95 	bl	8000b40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_UART_MspInit+0x1c8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e46:	2330      	movs	r3, #48	@ 0x30
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0x1cc>)
 8000e6c:	f000 fb1e 	bl	80014ac <HAL_GPIO_Init>
}
 8000e70:	bf00      	nop
 8000e72:	37c0      	adds	r7, #192	@ 0xc0
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40008000 	.word	0x40008000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000800 	.word	0x48000800
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40004800 	.word	0x40004800

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a13      	ldr	r2, [pc, #76]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x5c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000ea4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb6:	e010      	b.n	8000eda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec0:	d10b      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <HAL_TIM_Base_MspInit+0x60>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40012c00 	.word	0x40012c00
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_TIM_MspPostInit+0xac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d11e      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a22      	ldr	r2, [pc, #136]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f2a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f000 faaf 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f4e:	e021      	b.n	8000f94 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d11c      	bne.n	8000f94 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_TIM_MspPostInit+0xb4>)
 8000f90:	f000 fa8c 	bl	80014ac <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f8a5 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <LPUART1_IRQHandler+0x10>)
 800100e:	f003 f931 	bl	8004274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000078 	.word	0x20000078

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001078 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001044:	f7ff ffea 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	@ (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	@ (800108c <LoopForever+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f004 fc71 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001072:	f7ff fa21 	bl	80004b8 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001078:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001084:	08005b2c 	.word	0x08005b2c
  ldr r2, =_sbss
 8001088:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800108c:	200003f4 	.word	0x200003f4

08001090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_2_IRQHandler>
	...

08001094 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_Init+0x3c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_Init+0x3c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f93e 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f80f 	bl	80010d4 <HAL_InitTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	e001      	b.n	80010c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c2:	f7ff fdd3 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_InitTick+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d023      	beq.n	8001130 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_InitTick+0x70>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_InitTick+0x6c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f949 	bl	8001396 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10f      	bne.n	800112a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d809      	bhi.n	8001124 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f913 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_InitTick+0x74>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e007      	b.n	8001134 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e004      	b.n	8001134 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e001      	b.n	8001134 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000000 	.word	0x20000000
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	200002b8 	.word	0x200002b8

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200002b8 	.word	0x200002b8

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff3e 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff8e 	bl	8001280 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff31 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e022      	b.n	800141e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	f003 021c 	and.w	r2, r3, #28
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d005      	beq.n	800144e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2204      	movs	r2, #4
 8001446:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e029      	b.n	80014a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 020e 	bic.w	r2, r2, #14
 800145c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 021c 	and.w	r2, r3, #28
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
    }
  }
  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e17f      	b.n	80017bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8171 	beq.w	80017b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d005      	beq.n	80014ec <HAL_GPIO_Init+0x40>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 0201 	and.w	r2, r3, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d118      	bne.n	800158c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d017      	beq.n	80015c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	6939      	ldr	r1, [r7, #16]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80ac 	beq.w	80017b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	4b5f      	ldr	r3, [pc, #380]	@ (80017dc <HAL_GPIO_Init+0x330>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001662:	4a5e      	ldr	r2, [pc, #376]	@ (80017dc <HAL_GPIO_Init+0x330>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6613      	str	r3, [r2, #96]	@ 0x60
 800166a:	4b5c      	ldr	r3, [pc, #368]	@ (80017dc <HAL_GPIO_Init+0x330>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001676:	4a5a      	ldr	r2, [pc, #360]	@ (80017e0 <HAL_GPIO_Init+0x334>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x242>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	@ (80017e4 <HAL_GPIO_Init+0x338>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x23e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	@ (80017e8 <HAL_GPIO_Init+0x33c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x23a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	@ (80017ec <HAL_GPIO_Init+0x340>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x236>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	@ (80017f0 <HAL_GPIO_Init+0x344>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x232>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	@ (80017f4 <HAL_GPIO_Init+0x348>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x22e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	@ (80017f8 <HAL_GPIO_Init+0x34c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x22a>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00c      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e00a      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016da:	2305      	movs	r3, #5
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016de:	2304      	movs	r3, #4
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x244>
 80016ee:	2300      	movs	r3, #0
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001700:	4937      	ldr	r1, [pc, #220]	@ (80017e0 <HAL_GPIO_Init+0x334>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <HAL_GPIO_Init+0x350>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001732:	4a32      	ldr	r2, [pc, #200]	@ (80017fc <HAL_GPIO_Init+0x350>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001738:	4b30      	ldr	r3, [pc, #192]	@ (80017fc <HAL_GPIO_Init+0x350>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <HAL_GPIO_Init+0x350>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <HAL_GPIO_Init+0x350>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001786:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_GPIO_Init+0x350>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_GPIO_Init+0x350>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_GPIO_Init+0x350>)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f47f ae78 	bne.w	80014bc <HAL_GPIO_Init+0x10>
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010000 	.word	0x40010000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48000c00 	.word	0x48000c00
 80017f0:	48001000 	.word	0x48001000
 80017f4:	48001400 	.word	0x48001400
 80017f8:	48001800 	.word	0x48001800
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181c:	e002      	b.n	8001824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <HAL_PWREx_GetVoltageRange+0x18>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40007000 	.word	0x40007000

0800184c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800185a:	d130      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001868:	d038      	beq.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001874:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2232      	movs	r2, #50	@ 0x32
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001890:	e002      	b.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a4:	d102      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f2      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b8:	d110      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e00f      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ca:	d007      	beq.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018cc:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d4:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000
 80018f0:	20000000 	.word	0x20000000
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e3ca      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b97      	ldr	r3, [pc, #604]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001914:	4b94      	ldr	r3, [pc, #592]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80e4 	beq.w	8001af4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_RCC_OscConfig+0x4a>
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f040 808b 	bne.w	8001a50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b01      	cmp	r3, #1
 800193e:	f040 8087 	bne.w	8001a50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001942:	4b89      	ldr	r3, [pc, #548]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e3a2      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4b82      	ldr	r3, [pc, #520]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_RCC_OscConfig+0x7c>
 800196a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001972:	e005      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001974:	4b7c      	ldr	r3, [pc, #496]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001980:	4293      	cmp	r3, r2
 8001982:	d223      	bcs.n	80019cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd55 	bl	8002438 <RCC_SetFlashLatencyFromMSIRange>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e383      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001998:	4b73      	ldr	r3, [pc, #460]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a72      	ldr	r2, [pc, #456]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b70      	ldr	r3, [pc, #448]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	496d      	ldr	r1, [pc, #436]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	4968      	ldr	r1, [pc, #416]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	e025      	b.n	8001a18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019cc:	4b66      	ldr	r3, [pc, #408]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a65      	ldr	r2, [pc, #404]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b63      	ldr	r3, [pc, #396]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4960      	ldr	r1, [pc, #384]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	495b      	ldr	r1, [pc, #364]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fd15 	bl	8002438 <RCC_SetFlashLatencyFromMSIRange>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e343      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a18:	f000 fc4a 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b52      	ldr	r3, [pc, #328]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	4950      	ldr	r1, [pc, #320]	@ (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a4e      	ldr	r2, [pc, #312]	@ (8001b70 <HAL_RCC_OscConfig+0x278>)
 8001a36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a38:	4b4e      	ldr	r3, [pc, #312]	@ (8001b74 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fb49 	bl	80010d4 <HAL_InitTick>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d052      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	e327      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d032      	beq.n	8001abe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a58:	4b43      	ldr	r3, [pc, #268]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a42      	ldr	r2, [pc, #264]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fb86 	bl	8001174 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fb82 	bl	8001174 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e310      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a36      	ldr	r2, [pc, #216]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4931      	ldr	r1, [pc, #196]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	492c      	ldr	r1, [pc, #176]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e01a      	b.n	8001af4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb53 	bl	8001174 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fb4f 	bl	8001174 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e2dd      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x1da>
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d074      	beq.n	8001bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x21a>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d064      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d160      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e2ba      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x24a>
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e026      	b.n	8001b90 <HAL_RCC_OscConfig+0x298>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4a:	d115      	bne.n	8001b78 <HAL_RCC_OscConfig+0x280>
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a02      	ldr	r2, [pc, #8]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e014      	b.n	8001b90 <HAL_RCC_OscConfig+0x298>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080059d0 	.word	0x080059d0
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004
 8001b78:	4ba0      	ldr	r3, [pc, #640]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a9f      	ldr	r2, [pc, #636]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b9d      	ldr	r3, [pc, #628]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a9c      	ldr	r2, [pc, #624]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff faec 	bl	8001174 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fae8 	bl	8001174 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e276      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb2:	4b92      	ldr	r3, [pc, #584]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2a8>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fad8 	bl	8001174 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fad4 	bl	8001174 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e262      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bda:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2d0>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d060      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x310>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d116      	bne.n	8001c36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	4b7c      	ldr	r3, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x328>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e23f      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b76      	ldr	r3, [pc, #472]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4973      	ldr	r1, [pc, #460]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c34:	e040      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d023      	beq.n	8001c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa93 	bl	8001174 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fa8f 	bl	8001174 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e21d      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b62      	ldr	r3, [pc, #392]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	495f      	ldr	r1, [pc, #380]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b5d      	ldr	r3, [pc, #372]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff fa6f 	bl	8001174 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fa6b 	bl	8001174 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1f9      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cac:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fa4a 	bl	8001174 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fa46 	bl	8001174 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1d4      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ef      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3ec>
 8001d04:	e01b      	b.n	8001d3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fa2d 	bl	8001174 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fa29 	bl	8001174 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1b7      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d30:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80a6 	beq.w	8001e98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d50:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	4a26      	ldr	r2, [pc, #152]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d68:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d74:	2301      	movs	r3, #1
 8001d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_RCC_OscConfig+0x508>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d118      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_RCC_OscConfig+0x508>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	@ (8001e00 <HAL_RCC_OscConfig+0x508>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d90:	f7ff f9f0 	bl	8001174 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff f9ec 	bl	8001174 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e17a      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_RCC_OscConfig+0x508>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4d8>
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dce:	e029      	b.n	8001e24 <HAL_RCC_OscConfig+0x52c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d115      	bne.n	8001e04 <HAL_RCC_OscConfig+0x50c>
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dde:	4a07      	ldr	r2, [pc, #28]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	4a03      	ldr	r2, [pc, #12]	@ (8001dfc <HAL_RCC_OscConfig+0x504>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x52c>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	4b9c      	ldr	r3, [pc, #624]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	4a9b      	ldr	r2, [pc, #620]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e14:	4b98      	ldr	r3, [pc, #608]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	4a97      	ldr	r2, [pc, #604]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d016      	beq.n	8001e5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f9a2 	bl	8001174 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff f99e 	bl	8001174 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e12a      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ed      	beq.n	8001e34 <HAL_RCC_OscConfig+0x53c>
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f98b 	bl	8001174 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff f987 	bl	8001174 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e113      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e78:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ed      	bne.n	8001e62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	4a79      	ldr	r2, [pc, #484]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80fe 	beq.w	800209e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	f040 80d0 	bne.w	800204c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eac:	4b72      	ldr	r3, [pc, #456]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d130      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d127      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001edc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11f      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eec:	2a07      	cmp	r2, #7
 8001eee:	bf14      	ite	ne
 8001ef0:	2201      	movne	r2, #1
 8001ef2:	2200      	moveq	r2, #0
 8001ef4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d113      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d06e      	beq.n	8002000 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d069      	beq.n	8001ffc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f28:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f34:	4b50      	ldr	r3, [pc, #320]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ad      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f44:	4b4c      	ldr	r3, [pc, #304]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f50:	f7ff f910 	bl	8001174 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f90c 	bl	8001174 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e09a      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6a:	4b43      	ldr	r3, [pc, #268]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b40      	ldr	r3, [pc, #256]	@ (800207c <HAL_RCC_OscConfig+0x784>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f86:	3a01      	subs	r2, #1
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f90:	0212      	lsls	r2, r2, #8
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f98:	0852      	lsrs	r2, r2, #1
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	0552      	lsls	r2, r2, #21
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fa4:	0852      	lsrs	r2, r2, #1
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	0652      	lsls	r2, r2, #25
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fb0:	0912      	lsrs	r2, r2, #4
 8001fb2:	0452      	lsls	r2, r2, #17
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	4930      	ldr	r1, [pc, #192]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd4:	f7ff f8ce 	bl	8001174 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff f8ca 	bl	8001174 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e058      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ffa:	e050      	b.n	800209e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04f      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d148      	bne.n	800209e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a16      	ldr	r2, [pc, #88]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002022:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002024:	f7ff f8a6 	bl	8001174 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f8a2 	bl	8001174 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e030      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x734>
 800204a:	e028      	b.n	800209e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d023      	beq.n	800209a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_RCC_OscConfig+0x780>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f889 	bl	8001174 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	e00c      	b.n	8002080 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f885 	bl	8001174 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d905      	bls.n	8002080 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e013      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
 8002078:	40021000 	.word	0x40021000
 800207c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_OscConfig+0x7b0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ec      	bne.n	8002066 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4905      	ldr	r1, [pc, #20]	@ (80020a8 <HAL_RCC_OscConfig+0x7b0>)
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_OscConfig+0x7b4>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e001      	b.n	800209e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	feeefffc 	.word	0xfeeefffc

080020b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0e7      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b75      	ldr	r3, [pc, #468]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b72      	ldr	r3, [pc, #456]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 0207 	bic.w	r2, r3, #7
 80020da:	4970      	ldr	r1, [pc, #448]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b6e      	ldr	r3, [pc, #440]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cf      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b66      	ldr	r3, [pc, #408]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800210c:	429a      	cmp	r2, r3
 800210e:	d908      	bls.n	8002122 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b63      	ldr	r3, [pc, #396]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4960      	ldr	r1, [pc, #384]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d04c      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	4b5a      	ldr	r3, [pc, #360]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d121      	bne.n	8002186 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0a6      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e09a      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002166:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e08e      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002176:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e086      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b46      	ldr	r3, [pc, #280]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4943      	ldr	r1, [pc, #268]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe ffec 	bl	8001174 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe ffe8 	bl	8001174 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e06e      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d208      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	492b      	ldr	r1, [pc, #172]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f6:	4b29      	ldr	r3, [pc, #164]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d210      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0207 	bic.w	r2, r3, #7
 800220c:	4923      	ldr	r1, [pc, #140]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <HAL_RCC_ClockConfig+0x1ec>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e036      	b.n	8002294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4918      	ldr	r1, [pc, #96]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4910      	ldr	r1, [pc, #64]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002264:	f000 f824 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	490b      	ldr	r1, [pc, #44]	@ (80022a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_ClockConfig+0x1fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ff23 	bl	80010d4 <HAL_InitTick>
 800228e:	4603      	mov	r3, r0
 8002290:	72fb      	strb	r3, [r7, #11]

  return status;
 8002292:	7afb      	ldrb	r3, [r7, #11]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080059d0 	.word	0x080059d0
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022be:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c8:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d121      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d11e      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022e4:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e005      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002300:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800230c:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d102      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002328:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e004      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d101      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002334:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d134      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800233e:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0xa6>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d003      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xac>
 8002354:	e005      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002358:	617b      	str	r3, [r7, #20]
      break;
 800235a:	e005      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800235c:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800235e:	617b      	str	r3, [r7, #20]
      break;
 8002360:	e002      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002368:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	3301      	adds	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	fb03 f202 	mul.w	r2, r3, r2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	0e5b      	lsrs	r3, r3, #25
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	3301      	adds	r3, #1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023a8:	69bb      	ldr	r3, [r7, #24]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	080059e8 	.word	0x080059e8
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4904      	ldr	r1, [pc, #16]	@ (8002408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	080059e0 	.word	0x080059e0

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002410:	f7ff ffda 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4904      	ldr	r1, [pc, #16]	@ (8002434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	080059e0 	.word	0x080059e0

08002438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002444:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002450:	f7ff f9ee 	bl	8001830 <HAL_PWREx_GetVoltageRange>
 8002454:	6178      	str	r0, [r7, #20]
 8002456:	e014      	b.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b25      	ldr	r3, [pc, #148]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	@ 0x58
 8002464:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002470:	f7ff f9de 	bl	8001830 <HAL_PWREx_GetVoltageRange>
 8002474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002488:	d10b      	bne.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b80      	cmp	r3, #128	@ 0x80
 800248e:	d919      	bls.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2ba0      	cmp	r3, #160	@ 0xa0
 8002494:	d902      	bls.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002496:	2302      	movs	r3, #2
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e013      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800249c:	2301      	movs	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e010      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b80      	cmp	r3, #128	@ 0x80
 80024a6:	d902      	bls.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024a8:	2303      	movs	r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e00a      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	@ 0x80
 80024b2:	d102      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024b4:	2302      	movs	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e004      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b70      	cmp	r3, #112	@ 0x70
 80024be:	d101      	bne.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c0:	2301      	movs	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 0207 	bic.w	r2, r3, #7
 80024cc:	4909      	ldr	r1, [pc, #36]	@ (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002500:	2300      	movs	r3, #0
 8002502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002504:	2300      	movs	r3, #0
 8002506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002510:	2b00      	cmp	r3, #0
 8002512:	d041      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002518:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800251c:	d02a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800251e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002522:	d824      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800252a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800252e:	d81e      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002538:	d010      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800253a:	e018      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800253c:	4b86      	ldr	r3, [pc, #536]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a85      	ldr	r2, [pc, #532]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002548:	e015      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fabb 	bl	8002acc <RCCEx_PLLSAI1_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800255a:	e00c      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3320      	adds	r3, #32
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fba6 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800256c:	e003      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	74fb      	strb	r3, [r7, #19]
      break;
 8002572:	e000      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800257c:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258a:	4973      	ldr	r1, [pc, #460]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002592:	e001      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d041      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025ac:	d02a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025b2:	d824      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025be:	d81e      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c8:	d010      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ca:	e018      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025cc:	4b62      	ldr	r3, [pc, #392]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a61      	ldr	r2, [pc, #388]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d8:	e015      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa73 	bl	8002acc <RCCEx_PLLSAI1_Config>
 80025e6:	4603      	mov	r3, r0
 80025e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ea:	e00c      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3320      	adds	r3, #32
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fb5e 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fc:	e003      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	74fb      	strb	r3, [r7, #19]
      break;
 8002602:	e000      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800261a:	494f      	ldr	r1, [pc, #316]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002622:	e001      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a0 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	@ 0x58
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002668:	2301      	movs	r3, #1
 800266a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3a      	ldr	r2, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002678:	f7fe fd7c 	bl	8001174 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267e:	e009      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7fe fd78 	bl	8001174 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d902      	bls.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	74fb      	strb	r3, [r7, #19]
        break;
 8002692:	e005      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d15c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d019      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c4:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d0:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	4a20      	ldr	r2, [pc, #128]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f0:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fd37 	bl	8001174 <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	e00b      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fd33 	bl	8001174 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	74fb      	strb	r3, [r7, #19]
            break;
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002722:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ec      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002746:	4904      	ldr	r1, [pc, #16]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002764:	7c7b      	ldrb	r3, [r7, #17]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b9e      	ldr	r3, [pc, #632]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	4a9d      	ldr	r2, [pc, #628]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002782:	4b98      	ldr	r3, [pc, #608]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	4994      	ldr	r1, [pc, #592]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a4:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027aa:	f023 020c 	bic.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b2:	498c      	ldr	r1, [pc, #560]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c6:	4b87      	ldr	r3, [pc, #540]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	4983      	ldr	r1, [pc, #524]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e8:	4b7e      	ldr	r3, [pc, #504]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	497b      	ldr	r1, [pc, #492]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800280a:	4b76      	ldr	r3, [pc, #472]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002818:	4972      	ldr	r1, [pc, #456]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800282c:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	496a      	ldr	r1, [pc, #424]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284e:	4b65      	ldr	r3, [pc, #404]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	4961      	ldr	r1, [pc, #388]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002870:	4b5c      	ldr	r3, [pc, #368]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287e:	4959      	ldr	r1, [pc, #356]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002892:	4b54      	ldr	r3, [pc, #336]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a0:	4950      	ldr	r1, [pc, #320]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b4:	4b4b      	ldr	r3, [pc, #300]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	4948      	ldr	r1, [pc, #288]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	493f      	ldr	r1, [pc, #252]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d028      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f8:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002906:	4937      	ldr	r1, [pc, #220]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002916:	d106      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b32      	ldr	r3, [pc, #200]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a31      	ldr	r2, [pc, #196]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e011      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8c8 	bl	8002acc <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002956:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	491f      	ldr	r1, [pc, #124]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002974:	d106      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f899 	bl	8002acc <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02b      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d2:	d109      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a02      	ldr	r2, [pc, #8]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	e014      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f867 	bl	8002acc <RCCEx_PLLSAI1_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a26:	4928      	ldr	r1, [pc, #160]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a36:	d10d      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f844 	bl	8002acc <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d014      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
 8002a52:	e011      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3320      	adds	r3, #32
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f925 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab6:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ada:	4b75      	ldr	r3, [pc, #468]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ae6:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10d      	bne.n	8002b12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
       ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002afe:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d047      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e044      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d018      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x86>
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d825      	bhi.n	8002b70 <RCCEx_PLLSAI1_Config+0xa4>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <RCCEx_PLLSAI1_Config+0x62>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d009      	beq.n	8002b40 <RCCEx_PLLSAI1_Config+0x74>
 8002b2c:	e020      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b2e:	4b60      	ldr	r3, [pc, #384]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11d      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e01a      	b.n	8002b76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b40:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e013      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b52:	4b57      	ldr	r3, [pc, #348]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b5e:	4b54      	ldr	r3, [pc, #336]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b6e:	e006      	b.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e004      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b86:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	4944      	ldr	r1, [pc, #272]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d17d      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ba8:	4b41      	ldr	r3, [pc, #260]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a40      	ldr	r2, [pc, #256]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fade 	bl	8001174 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bbc:	f7fe fada 	bl	8001174 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd0:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ef      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d160      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be8:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	0912      	lsrs	r2, r2, #4
 8002c00:	0452      	lsls	r2, r2, #17
 8002c02:	430a      	orrs	r2, r1
 8002c04:	492a      	ldr	r1, [pc, #168]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	610b      	str	r3, [r1, #16]
 8002c0a:	e027      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d112      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c1a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	0211      	lsls	r1, r2, #8
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6912      	ldr	r2, [r2, #16]
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0552      	lsls	r2, r2, #21
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	491f      	ldr	r1, [pc, #124]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	610b      	str	r3, [r1, #16]
 8002c36:	e011      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6952      	ldr	r2, [r2, #20]
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4916      	ldr	r1, [pc, #88]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe fa84 	bl	8001174 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c70:	f7fe fa80 	bl	8001174 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
          break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4904      	ldr	r1, [pc, #16]	@ (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cce:	4b67      	ldr	r3, [pc, #412]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0203 	and.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d10d      	bne.n	8002cfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ce6:	4b61      	ldr	r3, [pc, #388]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d047      	beq.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e044      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d018      	beq.n	8002d3a <RCCEx_PLLSAI2_Config+0x86>
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d825      	bhi.n	8002d58 <RCCEx_PLLSAI2_Config+0xa4>
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <RCCEx_PLLSAI2_Config+0x62>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d009      	beq.n	8002d28 <RCCEx_PLLSAI2_Config+0x74>
 8002d14:	e020      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d16:	4b55      	ldr	r3, [pc, #340]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11d      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d26:	e01a      	b.n	8002d5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d28:	4b50      	ldr	r3, [pc, #320]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d116      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e013      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d46:	4b49      	ldr	r3, [pc, #292]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d56:	e006      	b.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e004      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	430b      	orrs	r3, r1
 8002d84:	4939      	ldr	r1, [pc, #228]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d167      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d90:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a35      	ldr	r2, [pc, #212]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9c:	f7fe f9ea 	bl	8001174 <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da2:	e009      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da4:	f7fe f9e6 	bl	8001174 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	73fb      	strb	r3, [r7, #15]
        break;
 8002db6:	e005      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002db8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ef      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d14a      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d111      	bne.n	8002df4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6892      	ldr	r2, [r2, #8]
 8002de0:	0211      	lsls	r1, r2, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	0912      	lsrs	r2, r2, #4
 8002de8:	0452      	lsls	r2, r2, #17
 8002dea:	430a      	orrs	r2, r1
 8002dec:	491f      	ldr	r1, [pc, #124]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	614b      	str	r3, [r1, #20]
 8002df2:	e011      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6912      	ldr	r2, [r2, #16]
 8002e0a:	0852      	lsrs	r2, r2, #1
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0652      	lsls	r2, r2, #25
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe f9a6 	bl	8001174 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e2c:	f7fe f9a2 	bl	8001174 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e049      	b.n	8002f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fff8 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f000 fb7a 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e049      	b.n	8002fc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f841 	bl	8002fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 fb23 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_TIM_PWM_Start+0x24>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e03c      	b.n	800307e <HAL_TIM_PWM_Start+0x9e>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b04      	cmp	r3, #4
 8003008:	d109      	bne.n	800301e <HAL_TIM_PWM_Start+0x3e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	e02f      	b.n	800307e <HAL_TIM_PWM_Start+0x9e>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d109      	bne.n	8003038 <HAL_TIM_PWM_Start+0x58>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e022      	b.n	800307e <HAL_TIM_PWM_Start+0x9e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d109      	bne.n	8003052 <HAL_TIM_PWM_Start+0x72>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e015      	b.n	800307e <HAL_TIM_PWM_Start+0x9e>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b10      	cmp	r3, #16
 8003056:	d109      	bne.n	800306c <HAL_TIM_PWM_Start+0x8c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e008      	b.n	800307e <HAL_TIM_PWM_Start+0x9e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e09c      	b.n	80031c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Start+0xb6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003094:	e023      	b.n	80030de <HAL_TIM_PWM_Start+0xfe>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0xc6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a4:	e01b      	b.n	80030de <HAL_TIM_PWM_Start+0xfe>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	e013      	b.n	80030de <HAL_TIM_PWM_Start+0xfe>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_PWM_Start+0xe6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030c4:	e00b      	b.n	80030de <HAL_TIM_PWM_Start+0xfe>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start+0xf6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d4:	e003      	b.n	80030de <HAL_TIM_PWM_Start+0xfe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fe74 	bl	8003dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a35      	ldr	r2, [pc, #212]	@ (80031c8 <HAL_TIM_PWM_Start+0x1e8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_TIM_PWM_Start+0x13e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <HAL_TIM_PWM_Start+0x1ec>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIM_PWM_Start+0x13e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <HAL_TIM_PWM_Start+0x1f0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_TIM_PWM_Start+0x13e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a31      	ldr	r2, [pc, #196]	@ (80031d4 <HAL_TIM_PWM_Start+0x1f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_PWM_Start+0x13e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2f      	ldr	r2, [pc, #188]	@ (80031d8 <HAL_TIM_PWM_Start+0x1f8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_Start+0x142>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_TIM_PWM_Start+0x144>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_TIM_PWM_Start+0x1e8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d018      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a22      	ldr	r2, [pc, #136]	@ (80031dc <HAL_TIM_PWM_Start+0x1fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a21      	ldr	r2, [pc, #132]	@ (80031e0 <HAL_TIM_PWM_Start+0x200>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1f      	ldr	r2, [pc, #124]	@ (80031e4 <HAL_TIM_PWM_Start+0x204>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a17      	ldr	r2, [pc, #92]	@ (80031cc <HAL_TIM_PWM_Start+0x1ec>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIM_PWM_Start+0x19e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <HAL_TIM_PWM_Start+0x1f0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d115      	bne.n	80031aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <HAL_TIM_PWM_Start+0x208>)
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d015      	beq.n	80031bc <HAL_TIM_PWM_Start+0x1dc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003196:	d011      	beq.n	80031bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	e008      	b.n	80031bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e000      	b.n	80031be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40013400 	.word	0x40013400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	00010007 	.word	0x00010007

080031ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ff      	b.n	800340a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b14      	cmp	r3, #20
 8003216:	f200 80f0 	bhi.w	80033fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003275 	.word	0x08003275
 8003224:	080033fb 	.word	0x080033fb
 8003228:	080033fb 	.word	0x080033fb
 800322c:	080033fb 	.word	0x080033fb
 8003230:	080032b5 	.word	0x080032b5
 8003234:	080033fb 	.word	0x080033fb
 8003238:	080033fb 	.word	0x080033fb
 800323c:	080033fb 	.word	0x080033fb
 8003240:	080032f7 	.word	0x080032f7
 8003244:	080033fb 	.word	0x080033fb
 8003248:	080033fb 	.word	0x080033fb
 800324c:	080033fb 	.word	0x080033fb
 8003250:	08003337 	.word	0x08003337
 8003254:	080033fb 	.word	0x080033fb
 8003258:	080033fb 	.word	0x080033fb
 800325c:	080033fb 	.word	0x080033fb
 8003260:	08003379 	.word	0x08003379
 8003264:	080033fb 	.word	0x080033fb
 8003268:	080033fb 	.word	0x080033fb
 800326c:	080033fb 	.word	0x080033fb
 8003270:	080033b9 	.word	0x080033b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fa3a 	bl	80036f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0208 	orr.w	r2, r2, #8
 800328e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]
      break;
 80032b2:	e0a5      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 faaa 	bl	8003814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]
      break;
 80032f4:	e084      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fb13 	bl	8003928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0208 	orr.w	r2, r2, #8
 8003310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0204 	bic.w	r2, r2, #4
 8003320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69d9      	ldr	r1, [r3, #28]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	61da      	str	r2, [r3, #28]
      break;
 8003334:	e064      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb7b 	bl	8003a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	021a      	lsls	r2, r3, #8
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	61da      	str	r2, [r3, #28]
      break;
 8003376:	e043      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fbc4 	bl	8003b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033b6:	e023      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fc08 	bl	8003bd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033f8:	e002      	b.n	8003400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003408:	7dfb      	ldrb	r3, [r7, #23]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop

08003414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIM_ConfigClockSource+0x1c>
 800342c:	2302      	movs	r3, #2
 800342e:	e0b6      	b.n	800359e <HAL_TIM_ConfigClockSource+0x18a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800345a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346c:	d03e      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xd8>
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003472:	f200 8087 	bhi.w	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347a:	f000 8086 	beq.w	800358a <HAL_TIM_ConfigClockSource+0x176>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d87f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003484:	2b70      	cmp	r3, #112	@ 0x70
 8003486:	d01a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xaa>
 8003488:	2b70      	cmp	r3, #112	@ 0x70
 800348a:	d87b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 800348c:	2b60      	cmp	r3, #96	@ 0x60
 800348e:	d050      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x11e>
 8003490:	2b60      	cmp	r3, #96	@ 0x60
 8003492:	d877      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003494:	2b50      	cmp	r3, #80	@ 0x50
 8003496:	d03c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xfe>
 8003498:	2b50      	cmp	r3, #80	@ 0x50
 800349a:	d873      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d058      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x13e>
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d86f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034a4:	2b30      	cmp	r3, #48	@ 0x30
 80034a6:	d064      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034a8:	2b30      	cmp	r3, #48	@ 0x30
 80034aa:	d86b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d060      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d867      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05c      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d05a      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034bc:	e062      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	f000 fc61 	bl	8003d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e04f      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	f000 fc4a 	bl	8003d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800350e:	609a      	str	r2, [r3, #8]
      break;
 8003510:	e03c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	461a      	mov	r2, r3
 8003520:	f000 fbbe 	bl	8003ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2150      	movs	r1, #80	@ 0x50
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc17 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003530:	e02c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353e:	461a      	mov	r2, r3
 8003540:	f000 fbdd 	bl	8003cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2160      	movs	r1, #96	@ 0x60
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc07 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003550:	e01c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	461a      	mov	r2, r3
 8003560:	f000 fb9e 	bl	8003ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	@ 0x40
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fbf7 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003570:	e00c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f000 fbee 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003582:	e003      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e000      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800358a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a46      	ldr	r2, [pc, #280]	@ (80036d4 <TIM_Base_SetConfig+0x12c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c6:	d00f      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a43      	ldr	r2, [pc, #268]	@ (80036d8 <TIM_Base_SetConfig+0x130>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a42      	ldr	r2, [pc, #264]	@ (80036dc <TIM_Base_SetConfig+0x134>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a41      	ldr	r2, [pc, #260]	@ (80036e0 <TIM_Base_SetConfig+0x138>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <TIM_Base_SetConfig+0x13c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <TIM_Base_SetConfig+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a32      	ldr	r2, [pc, #200]	@ (80036d8 <TIM_Base_SetConfig+0x130>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <TIM_Base_SetConfig+0x134>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <TIM_Base_SetConfig+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <TIM_Base_SetConfig+0x13c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <TIM_Base_SetConfig+0x140>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <TIM_Base_SetConfig+0x144>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2c      	ldr	r2, [pc, #176]	@ (80036f0 <TIM_Base_SetConfig+0x148>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <TIM_Base_SetConfig+0x12c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <TIM_Base_SetConfig+0x13c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <TIM_Base_SetConfig+0x140>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <TIM_Base_SetConfig+0x144>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a15      	ldr	r2, [pc, #84]	@ (80036f0 <TIM_Base_SetConfig+0x148>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]
  }
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 0201 	bic.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0302 	bic.w	r3, r3, #2
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2c      	ldr	r2, [pc, #176]	@ (8003800 <TIM_OC1_SetConfig+0x10c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00f      	beq.n	8003774 <TIM_OC1_SetConfig+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2b      	ldr	r2, [pc, #172]	@ (8003804 <TIM_OC1_SetConfig+0x110>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_OC1_SetConfig+0x80>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <TIM_OC1_SetConfig+0x114>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC1_SetConfig+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a29      	ldr	r2, [pc, #164]	@ (800380c <TIM_OC1_SetConfig+0x118>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC1_SetConfig+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <TIM_OC1_SetConfig+0x11c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10c      	bne.n	800378e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0308 	bic.w	r3, r3, #8
 800377a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <TIM_OC1_SetConfig+0x10c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_OC1_SetConfig+0xc2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <TIM_OC1_SetConfig+0x110>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_OC1_SetConfig+0xc2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <TIM_OC1_SetConfig+0x114>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_OC1_SetConfig+0xc2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a18      	ldr	r2, [pc, #96]	@ (800380c <TIM_OC1_SetConfig+0x118>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC1_SetConfig+0xc2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <TIM_OC1_SetConfig+0x11c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d111      	bne.n	80037da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800

08003814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 0210 	bic.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0320 	bic.w	r3, r3, #32
 8003862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a28      	ldr	r2, [pc, #160]	@ (8003914 <TIM_OC2_SetConfig+0x100>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0x6c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a27      	ldr	r2, [pc, #156]	@ (8003918 <TIM_OC2_SetConfig+0x104>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10d      	bne.n	800389c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800389a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <TIM_OC2_SetConfig+0x100>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_OC2_SetConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <TIM_OC2_SetConfig+0x104>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_OC2_SetConfig+0xb0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1b      	ldr	r2, [pc, #108]	@ (800391c <TIM_OC2_SetConfig+0x108>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_OC2_SetConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003920 <TIM_OC2_SetConfig+0x10c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC2_SetConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <TIM_OC2_SetConfig+0x110>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d113      	bne.n	80038ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a27      	ldr	r2, [pc, #156]	@ (8003a24 <TIM_OC3_SetConfig+0xfc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_OC3_SetConfig+0x6a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <TIM_OC3_SetConfig+0x100>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10d      	bne.n	80039ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <TIM_OC3_SetConfig+0xfc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_OC3_SetConfig+0xae>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a28 <TIM_OC3_SetConfig+0x100>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_OC3_SetConfig+0xae>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a2c <TIM_OC3_SetConfig+0x104>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_OC3_SetConfig+0xae>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a19      	ldr	r2, [pc, #100]	@ (8003a30 <TIM_OC3_SetConfig+0x108>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_OC3_SetConfig+0xae>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <TIM_OC3_SetConfig+0x10c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d113      	bne.n	80039fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	031b      	lsls	r3, r3, #12
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <TIM_OC4_SetConfig+0xc0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00f      	beq.n	8003abc <TIM_OC4_SetConfig+0x84>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <TIM_OC4_SetConfig+0xc4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_OC4_SetConfig+0x84>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	@ (8003b00 <TIM_OC4_SetConfig+0xc8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_OC4_SetConfig+0x84>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <TIM_OC4_SetConfig+0xcc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC4_SetConfig+0x84>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <TIM_OC4_SetConfig+0xd0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800

08003b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <TIM_OC5_SetConfig+0xb4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_OC5_SetConfig+0x7a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <TIM_OC5_SetConfig+0xb8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_OC5_SetConfig+0x7a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <TIM_OC5_SetConfig+0xbc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_OC5_SetConfig+0x7a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <TIM_OC5_SetConfig+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_OC5_SetConfig+0x7a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <TIM_OC5_SetConfig+0xc4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d109      	bne.n	8003b9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	051b      	lsls	r3, r3, #20
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <TIM_OC6_SetConfig+0xb8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00f      	beq.n	8003c50 <TIM_OC6_SetConfig+0x7c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	@ (8003c90 <TIM_OC6_SetConfig+0xbc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <TIM_OC6_SetConfig+0x7c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <TIM_OC6_SetConfig+0xc0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_OC6_SetConfig+0x7c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a15      	ldr	r2, [pc, #84]	@ (8003c98 <TIM_OC6_SetConfig+0xc4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC6_SetConfig+0x7c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <TIM_OC6_SetConfig+0xc8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d109      	bne.n	8003c64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f023 030a 	bic.w	r3, r3, #10
 8003cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0210 	bic.w	r2, r3, #16
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f043 0307 	orr.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2201      	movs	r2, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e068      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2d      	ldr	r2, [pc, #180]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eaa:	d018      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a13      	ldr	r2, [pc, #76]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40014000 	.word	0x40014000

08003f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e065      	b.n	8004018 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d115      	bne.n	8004006 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	051b      	lsls	r3, r3, #20
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40013400 	.word	0x40013400

0800402c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e040      	b.n	80040c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fe30 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	@ 0x24
 8004058:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fedc 	bl	8004e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fc21 	bl	80048c0 <UART_SetConfig>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e01b      	b.n	80040c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 ff5b 	bl	8004f74 <UART_CheckIdleState>
 80040be:	4603      	mov	r3, r0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	@ 0x28
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d177      	bne.n	80041d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Transmit+0x24>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e070      	b.n	80041d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2221      	movs	r2, #33	@ 0x21
 80040fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040fe:	f7fd f839 	bl	8001174 <HAL_GetTick>
 8004102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411c:	d108      	bne.n	8004130 <HAL_UART_Transmit+0x68>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e003      	b.n	8004138 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004138:	e02f      	b.n	800419a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	2180      	movs	r1, #128	@ 0x80
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 ffbd 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e03b      	b.n	80041d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416c:	b292      	uxth	r2, r2
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	3302      	adds	r3, #2
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e007      	b.n	8004188 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1c9      	bne.n	800413a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2140      	movs	r1, #64	@ 0x40
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 ff87 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e005      	b.n	80041d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d137      	bne.n	8004264 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Receive_IT+0x24>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e030      	b.n	8004266 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <HAL_UART_Receive_IT+0x94>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d01f      	beq.n	8004254 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	61bb      	str	r3, [r7, #24]
   return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	461a      	mov	r2, r3
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 ffa0 	bl	80051a0 <UART_Start_Receive_IT>
 8004260:	4603      	mov	r3, r0
 8004262:	e000      	b.n	8004266 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3728      	adds	r7, #40	@ 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40008000 	.word	0x40008000

08004274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b0ba      	sub	sp, #232	@ 0xe8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800429a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800429e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042a2:	4013      	ands	r3, r2
 80042a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d115      	bne.n	80042dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00f      	beq.n	80042dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 82ca 	beq.w	8004866 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
      }
      return;
 80042da:	e2c4      	b.n	8004866 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8117 	beq.w	8004514 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80042f6:	4b85      	ldr	r3, [pc, #532]	@ (800450c <HAL_UART_IRQHandler+0x298>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 810a 	beq.w	8004514 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d011      	beq.n	8004330 <HAL_UART_IRQHandler+0xbc>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d011      	beq.n	8004360 <HAL_UART_IRQHandler+0xec>
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2202      	movs	r2, #2
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d011      	beq.n	8004390 <HAL_UART_IRQHandler+0x11c>
 800436c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2204      	movs	r2, #4
 800437e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2208      	movs	r2, #8
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <HAL_UART_IRQHandler+0x18a>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8230 	beq.w	800486a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004438:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800444a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d04f      	beq.n	80044f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 ff68 	bl	800532c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d141      	bne.n	80044ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800449a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1d9      	bne.n	800446a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d013      	beq.n	80044e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <HAL_UART_IRQHandler+0x29c>)
 80044c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc ffad 	bl	800142a <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d017      	beq.n	8004506 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044e0:	4610      	mov	r0, r2
 80044e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e00f      	b.n	8004506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f9d4 	bl	8004894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e00b      	b.n	8004506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9d0 	bl	8004894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e007      	b.n	8004506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9cc 	bl	8004894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004504:	e1b1      	b.n	800486a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004506:	bf00      	nop
    return;
 8004508:	e1af      	b.n	800486a <HAL_UART_IRQHandler+0x5f6>
 800450a:	bf00      	nop
 800450c:	04000120 	.word	0x04000120
 8004510:	080053f5 	.word	0x080053f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 816a 	bne.w	80047f2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8163 	beq.w	80047f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 815c 	beq.w	80047f2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	f040 80d4 	bne.w	80046fa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800455e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80ad 	beq.w	80046c2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800456e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004572:	429a      	cmp	r2, r3
 8004574:	f080 80a5 	bcs.w	80046c2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800457e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 8086 	bne.w	80046a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1da      	bne.n	8004594 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3308      	adds	r3, #8
 80045e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004602:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004606:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800460a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e1      	bne.n	80045de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800462a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800462c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800463e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004640:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004644:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800464c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e3      	bne.n	800461a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800466e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004684:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004688:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e4      	bne.n	8004660 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc fe87 	bl	80013ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8f4 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046c0:	e0d5      	b.n	800486e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046cc:	429a      	cmp	r2, r3
 80046ce:	f040 80ce 	bne.w	800486e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	f040 80c5 	bne.w	800486e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8d8 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
      return;
 80046f8:	e0b9      	b.n	800486e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004706:	b29b      	uxth	r3, r3
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80ab 	beq.w	8004872 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800471c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a6 	beq.w	8004872 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800473a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004748:	647b      	str	r3, [r7, #68]	@ 0x44
 800474a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800474e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	623b      	str	r3, [r7, #32]
   return(result);
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004780:	633a      	str	r2, [r7, #48]	@ 0x30
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e3      	bne.n	800475c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 0310 	bic.w	r3, r3, #16
 80047bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	617b      	str	r3, [r7, #20]
   return(result);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e4      	bne.n	80047a8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f85c 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f0:	e03f      	b.n	8004872 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <HAL_UART_IRQHandler+0x5a8>
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 ffe9 	bl	80057ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800481a:	e02d      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800482c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01c      	beq.n	8004876 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
    }
    return;
 8004844:	e017      	b.n	8004876 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d012      	beq.n	8004878 <HAL_UART_IRQHandler+0x604>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fdde 	bl	8005420 <UART_EndTransmit_IT>
    return;
 8004864:	e008      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
      return;
 8004866:	bf00      	nop
 8004868:	e006      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
    return;
 800486a:	bf00      	nop
 800486c:	e004      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
      return;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
      return;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HAL_UART_IRQHandler+0x604>
    return;
 8004876:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004878:	37e8      	adds	r7, #232	@ 0xe8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b08a      	sub	sp, #40	@ 0x28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4ba4      	ldr	r3, [pc, #656]	@ (8004b80 <UART_SetConfig+0x2c0>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a99      	ldr	r2, [pc, #612]	@ (8004b84 <UART_SetConfig+0x2c4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	4313      	orrs	r3, r2
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a90      	ldr	r2, [pc, #576]	@ (8004b88 <UART_SetConfig+0x2c8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d126      	bne.n	8004998 <UART_SetConfig+0xd8>
 800494a:	4b90      	ldr	r3, [pc, #576]	@ (8004b8c <UART_SetConfig+0x2cc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b03      	cmp	r3, #3
 8004956:	d81b      	bhi.n	8004990 <UART_SetConfig+0xd0>
 8004958:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <UART_SetConfig+0xa0>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004971 	.word	0x08004971
 8004964:	08004981 	.word	0x08004981
 8004968:	08004979 	.word	0x08004979
 800496c:	08004989 	.word	0x08004989
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004976:	e116      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497e:	e112      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004986:	e10e      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e10a      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e106      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a7c      	ldr	r2, [pc, #496]	@ (8004b90 <UART_SetConfig+0x2d0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d138      	bne.n	8004a14 <UART_SetConfig+0x154>
 80049a2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b8c <UART_SetConfig+0x2cc>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b0c      	cmp	r3, #12
 80049ae:	d82d      	bhi.n	8004a0c <UART_SetConfig+0x14c>
 80049b0:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <UART_SetConfig+0xf8>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004a0d 	.word	0x08004a0d
 80049c4:	08004a0d 	.word	0x08004a0d
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	08004a0d 	.word	0x08004a0d
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	08004a0d 	.word	0x08004a0d
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e0d8      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e0d4      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a02:	e0d0      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e0cc      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e0c8      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5e      	ldr	r2, [pc, #376]	@ (8004b94 <UART_SetConfig+0x2d4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d125      	bne.n	8004a6a <UART_SetConfig+0x1aa>
 8004a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004b8c <UART_SetConfig+0x2cc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a28:	2b30      	cmp	r3, #48	@ 0x30
 8004a2a:	d016      	beq.n	8004a5a <UART_SetConfig+0x19a>
 8004a2c:	2b30      	cmp	r3, #48	@ 0x30
 8004a2e:	d818      	bhi.n	8004a62 <UART_SetConfig+0x1a2>
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d00a      	beq.n	8004a4a <UART_SetConfig+0x18a>
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d814      	bhi.n	8004a62 <UART_SetConfig+0x1a2>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <UART_SetConfig+0x182>
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d008      	beq.n	8004a52 <UART_SetConfig+0x192>
 8004a40:	e00f      	b.n	8004a62 <UART_SetConfig+0x1a2>
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a48:	e0ad      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a50:	e0a9      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a52:	2304      	movs	r3, #4
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a58:	e0a5      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a60:	e0a1      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a62:	2310      	movs	r3, #16
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a68:	e09d      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004b98 <UART_SetConfig+0x2d8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d125      	bne.n	8004ac0 <UART_SetConfig+0x200>
 8004a74:	4b45      	ldr	r3, [pc, #276]	@ (8004b8c <UART_SetConfig+0x2cc>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a80:	d016      	beq.n	8004ab0 <UART_SetConfig+0x1f0>
 8004a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a84:	d818      	bhi.n	8004ab8 <UART_SetConfig+0x1f8>
 8004a86:	2b80      	cmp	r3, #128	@ 0x80
 8004a88:	d00a      	beq.n	8004aa0 <UART_SetConfig+0x1e0>
 8004a8a:	2b80      	cmp	r3, #128	@ 0x80
 8004a8c:	d814      	bhi.n	8004ab8 <UART_SetConfig+0x1f8>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <UART_SetConfig+0x1d8>
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d008      	beq.n	8004aa8 <UART_SetConfig+0x1e8>
 8004a96:	e00f      	b.n	8004ab8 <UART_SetConfig+0x1f8>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9e:	e082      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e07e      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e07a      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e076      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e072      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	@ (8004b9c <UART_SetConfig+0x2dc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d12a      	bne.n	8004b20 <UART_SetConfig+0x260>
 8004aca:	4b30      	ldr	r3, [pc, #192]	@ (8004b8c <UART_SetConfig+0x2cc>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ad8:	d01a      	beq.n	8004b10 <UART_SetConfig+0x250>
 8004ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ade:	d81b      	bhi.n	8004b18 <UART_SetConfig+0x258>
 8004ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae4:	d00c      	beq.n	8004b00 <UART_SetConfig+0x240>
 8004ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aea:	d815      	bhi.n	8004b18 <UART_SetConfig+0x258>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <UART_SetConfig+0x238>
 8004af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af4:	d008      	beq.n	8004b08 <UART_SetConfig+0x248>
 8004af6:	e00f      	b.n	8004b18 <UART_SetConfig+0x258>
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e052      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b00:	2302      	movs	r3, #2
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e04e      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e04a      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b10:	2308      	movs	r3, #8
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e046      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1e:	e042      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <UART_SetConfig+0x2c4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d13a      	bne.n	8004ba0 <UART_SetConfig+0x2e0>
 8004b2a:	4b18      	ldr	r3, [pc, #96]	@ (8004b8c <UART_SetConfig+0x2cc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b38:	d01a      	beq.n	8004b70 <UART_SetConfig+0x2b0>
 8004b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b3e:	d81b      	bhi.n	8004b78 <UART_SetConfig+0x2b8>
 8004b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b44:	d00c      	beq.n	8004b60 <UART_SetConfig+0x2a0>
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b4a:	d815      	bhi.n	8004b78 <UART_SetConfig+0x2b8>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <UART_SetConfig+0x298>
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b54:	d008      	beq.n	8004b68 <UART_SetConfig+0x2a8>
 8004b56:	e00f      	b.n	8004b78 <UART_SetConfig+0x2b8>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5e:	e022      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b66:	e01e      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e01a      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e016      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e012      	b.n	8004ba6 <UART_SetConfig+0x2e6>
 8004b80:	efff69f3 	.word	0xefff69f3
 8004b84:	40008000 	.word	0x40008000
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40004c00 	.word	0x40004c00
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a9f      	ldr	r2, [pc, #636]	@ (8004e28 <UART_SetConfig+0x568>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d17a      	bne.n	8004ca6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d824      	bhi.n	8004c02 <UART_SetConfig+0x342>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <UART_SetConfig+0x300>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004c03 	.word	0x08004c03
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004c03 	.word	0x08004c03
 8004bd0:	08004bf3 	.word	0x08004bf3
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c03 	.word	0x08004c03
 8004be0:	08004bfb 	.word	0x08004bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7fd fbfc 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8004be8:	61f8      	str	r0, [r7, #28]
        break;
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bec:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <UART_SetConfig+0x56c>)
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e00d      	b.n	8004c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf2:	f7fd fb5d 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8004bf6:	61f8      	str	r0, [r7, #28]
        break;
 8004bf8:	e009      	b.n	8004c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80fb 	beq.w	8004e0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d305      	bcc.n	8004c32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d903      	bls.n	8004c3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c38:	e0e8      	b.n	8004e0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	461c      	mov	r4, r3
 8004c40:	4615      	mov	r5, r2
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	022b      	lsls	r3, r5, #8
 8004c4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c50:	0222      	lsls	r2, r4, #8
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	6849      	ldr	r1, [r1, #4]
 8004c56:	0849      	lsrs	r1, r1, #1
 8004c58:	2000      	movs	r0, #0
 8004c5a:	4688      	mov	r8, r1
 8004c5c:	4681      	mov	r9, r0
 8004c5e:	eb12 0a08 	adds.w	sl, r2, r8
 8004c62:	eb43 0b09 	adc.w	fp, r3, r9
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c74:	4650      	mov	r0, sl
 8004c76:	4659      	mov	r1, fp
 8004c78:	f7fb faa6 	bl	80001c8 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4613      	mov	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8a:	d308      	bcc.n	8004c9e <UART_SetConfig+0x3de>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c92:	d204      	bcs.n	8004c9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	e0b6      	b.n	8004e0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ca4:	e0b2      	b.n	8004e0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cae:	d15e      	bne.n	8004d6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d828      	bhi.n	8004d0a <UART_SetConfig+0x44a>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <UART_SetConfig+0x400>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fd fb7c 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	61f8      	str	r0, [r7, #28]
        break;
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fd fb8e 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8004cf0:	61f8      	str	r0, [r7, #28]
        break;
 8004cf2:	e010      	b.n	8004d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8004e2c <UART_SetConfig+0x56c>)
 8004cf6:	61fb      	str	r3, [r7, #28]
        break;
 8004cf8:	e00d      	b.n	8004d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fd fad9 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8004cfe:	61f8      	str	r0, [r7, #28]
        break;
 8004d00:	e009      	b.n	8004d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d06:	61fb      	str	r3, [r7, #28]
        break;
 8004d08:	e005      	b.n	8004d16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d077      	beq.n	8004e0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005a      	lsls	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	441a      	add	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d916      	bls.n	8004d66 <UART_SetConfig+0x4a6>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d212      	bcs.n	8004d66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f023 030f 	bic.w	r3, r3, #15
 8004d48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	8afb      	ldrh	r3, [r7, #22]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	8afa      	ldrh	r2, [r7, #22]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	e052      	b.n	8004e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d6c:	e04e      	b.n	8004e0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d827      	bhi.n	8004dc6 <UART_SetConfig+0x506>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0x4bc>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fd fb1e 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8004da4:	61f8      	str	r0, [r7, #28]
        break;
 8004da6:	e014      	b.n	8004dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fd fb30 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e010      	b.n	8004dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <UART_SetConfig+0x56c>)
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e00d      	b.n	8004dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fd fa7b 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d019      	beq.n	8004e0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	085a      	lsrs	r2, r3, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	d909      	bls.n	8004e06 <UART_SetConfig+0x546>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d205      	bcs.n	8004e06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e002      	b.n	8004e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3728      	adds	r7, #40	@ 0x28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e26:	bf00      	nop
 8004e28:	40008000 	.word	0x40008000
 8004e2c:	00f42400 	.word	0x00f42400

08004e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f2e:	d10a      	bne.n	8004f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b098      	sub	sp, #96	@ 0x60
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f84:	f7fc f8f6 	bl	8001174 <HAL_GetTick>
 8004f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d12e      	bne.n	8004ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f88c 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d021      	beq.n	8004ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e6      	bne.n	8004fb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e062      	b.n	80050bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b04      	cmp	r3, #4
 8005002:	d149      	bne.n	8005098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500c:	2200      	movs	r2, #0
 800500e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f856 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d03c      	beq.n	8005098 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	623b      	str	r3, [r7, #32]
   return(result);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e6      	bne.n	800501e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	617b      	str	r3, [r7, #20]
   return(result);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e011      	b.n	80050bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3758      	adds	r7, #88	@ 0x58
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	e04f      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d04b      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc f849 	bl	8001174 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e04e      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d037      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b80      	cmp	r3, #128	@ 0x80
 800510a:	d034      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b40      	cmp	r3, #64	@ 0x40
 8005110:	d031      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d110      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f8ff 	bl	800532c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2208      	movs	r2, #8
 8005132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e029      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d111      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800515a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f8e5 	bl	800532c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d0a0      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b097      	sub	sp, #92	@ 0x5c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d10e      	bne.n	80051f2 <UART_Start_Receive_IT+0x52>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <UART_Start_Receive_IT+0x48>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051e6:	e02d      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051f0:	e028      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <UART_Start_Receive_IT+0x76>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <UART_Start_Receive_IT+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	@ 0xff
 8005206:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800520a:	e01b      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	227f      	movs	r2, #127	@ 0x7f
 8005210:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005214:	e016      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521e:	d10d      	bne.n	800523c <UART_Start_Receive_IT+0x9c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <UART_Start_Receive_IT+0x92>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	227f      	movs	r2, #127	@ 0x7f
 800522c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005230:	e008      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	223f      	movs	r2, #63	@ 0x3f
 8005236:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800523a:	e003      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2222      	movs	r2, #34	@ 0x22
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	657b      	str	r3, [r7, #84]	@ 0x54
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005274:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005276:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800527a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005290:	d107      	bne.n	80052a2 <UART_Start_Receive_IT+0x102>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <UART_Start_Receive_IT+0x184>)
 800529e:	669a      	str	r2, [r3, #104]	@ 0x68
 80052a0:	e002      	b.n	80052a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a20      	ldr	r2, [pc, #128]	@ (8005328 <UART_Start_Receive_IT+0x188>)
 80052a6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d019      	beq.n	80052e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80052c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e6      	bne.n	80052b0 <UART_Start_Receive_IT+0x110>
 80052e2:	e018      	b.n	8005316 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	613b      	str	r3, [r7, #16]
   return(result);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f043 0320 	orr.w	r3, r3, #32
 80052f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	69f9      	ldr	r1, [r7, #28]
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e6      	bne.n	80052e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	375c      	adds	r7, #92	@ 0x5c
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	08005631 	.word	0x08005631
 8005328:	08005475 	.word	0x08005475

0800532c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b095      	sub	sp, #84	@ 0x54
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005352:	643b      	str	r3, [r7, #64]	@ 0x40
 8005354:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005358:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e6      	bne.n	8005334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3308      	adds	r3, #8
 800536c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	61fb      	str	r3, [r7, #28]
   return(result);
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3308      	adds	r3, #8
 8005384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800538c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e5      	bne.n	8005366 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d118      	bne.n	80053d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 0310 	bic.w	r3, r3, #16
 80053b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6979      	ldr	r1, [r7, #20]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	613b      	str	r3, [r7, #16]
   return(result);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053e8:	bf00      	nop
 80053ea:	3754      	adds	r7, #84	@ 0x54
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fa3e 	bl	8004894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	60bb      	str	r3, [r7, #8]
   return(result);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	613b      	str	r3, [r7, #16]
   return(result);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fa0a 	bl	8004880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546c:	bf00      	nop
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b09c      	sub	sp, #112	@ 0x70
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005482:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800548c:	2b22      	cmp	r3, #34	@ 0x22
 800548e:	f040 80be 	bne.w	800560e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005498:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800549c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054a0:	b2d9      	uxtb	r1, r3
 80054a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	400a      	ands	r2, r1
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 80a3 	bne.w	8005622 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e6      	bne.n	80054dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800551e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	667b      	str	r3, [r7, #100]	@ 0x64
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800552e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800553c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a34      	ldr	r2, [pc, #208]	@ (800562c <UART_RxISR_8BIT+0x1b8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01f      	beq.n	80055a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	623b      	str	r3, [r7, #32]
   return(result);
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005582:	663b      	str	r3, [r7, #96]	@ 0x60
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800558c:	633b      	str	r3, [r7, #48]	@ 0x30
 800558e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d12e      	bne.n	8005606 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	69b9      	ldr	r1, [r7, #24]
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	617b      	str	r3, [r7, #20]
   return(result);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d103      	bne.n	80055f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff f952 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005604:	e00d      	b.n	8005622 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb fa84 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 800560c:	e009      	b.n	8005622 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	8b1b      	ldrh	r3, [r3, #24]
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	b292      	uxth	r2, r2
 8005620:	831a      	strh	r2, [r3, #24]
}
 8005622:	bf00      	nop
 8005624:	3770      	adds	r7, #112	@ 0x70
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40008000 	.word	0x40008000

08005630 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b09c      	sub	sp, #112	@ 0x70
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800563e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005648:	2b22      	cmp	r3, #34	@ 0x22
 800564a:	f040 80be 	bne.w	80057ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005654:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800565e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005662:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005666:	4013      	ands	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800566c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 80a3 	bne.w	80057de <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e6      	bne.n	8005698 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80056ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e5      	bne.n	80056ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a34      	ldr	r2, [pc, #208]	@ (80057e8 <UART_RxISR_16BIT+0x1b8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d01f      	beq.n	800575c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	61fb      	str	r3, [r7, #28]
   return(result);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800573e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800574a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005760:	2b01      	cmp	r3, #1
 8005762:	d12e      	bne.n	80057c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	60bb      	str	r3, [r7, #8]
   return(result);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	613b      	str	r3, [r7, #16]
   return(result);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d103      	bne.n	80057b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2210      	movs	r2, #16
 80057b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff f874 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057c0:	e00d      	b.n	80057de <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fb f9a6 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 80057c8:	e009      	b.n	80057de <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	8b1b      	ldrh	r3, [r3, #24]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	b292      	uxth	r2, r2
 80057dc:	831a      	strh	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	3770      	adds	r7, #112	@ 0x70
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40008000 	.word	0x40008000

080057ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <atoi>:
 8005800:	220a      	movs	r2, #10
 8005802:	2100      	movs	r1, #0
 8005804:	f000 b87a 	b.w	80058fc <strtol>

08005808 <_strtol_l.constprop.0>:
 8005808:	2b24      	cmp	r3, #36	@ 0x24
 800580a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580e:	4686      	mov	lr, r0
 8005810:	4690      	mov	r8, r2
 8005812:	d801      	bhi.n	8005818 <_strtol_l.constprop.0+0x10>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <_strtol_l.constprop.0+0x1e>
 8005818:	f000 f896 	bl	8005948 <__errno>
 800581c:	2316      	movs	r3, #22
 800581e:	6003      	str	r3, [r0, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005826:	4834      	ldr	r0, [pc, #208]	@ (80058f8 <_strtol_l.constprop.0+0xf0>)
 8005828:	460d      	mov	r5, r1
 800582a:	462a      	mov	r2, r5
 800582c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005830:	5d06      	ldrb	r6, [r0, r4]
 8005832:	f016 0608 	ands.w	r6, r6, #8
 8005836:	d1f8      	bne.n	800582a <_strtol_l.constprop.0+0x22>
 8005838:	2c2d      	cmp	r4, #45	@ 0x2d
 800583a:	d12d      	bne.n	8005898 <_strtol_l.constprop.0+0x90>
 800583c:	782c      	ldrb	r4, [r5, #0]
 800583e:	2601      	movs	r6, #1
 8005840:	1c95      	adds	r5, r2, #2
 8005842:	f033 0210 	bics.w	r2, r3, #16
 8005846:	d109      	bne.n	800585c <_strtol_l.constprop.0+0x54>
 8005848:	2c30      	cmp	r4, #48	@ 0x30
 800584a:	d12a      	bne.n	80058a2 <_strtol_l.constprop.0+0x9a>
 800584c:	782a      	ldrb	r2, [r5, #0]
 800584e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005852:	2a58      	cmp	r2, #88	@ 0x58
 8005854:	d125      	bne.n	80058a2 <_strtol_l.constprop.0+0x9a>
 8005856:	786c      	ldrb	r4, [r5, #1]
 8005858:	2310      	movs	r3, #16
 800585a:	3502      	adds	r5, #2
 800585c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005860:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005864:	2200      	movs	r2, #0
 8005866:	fbbc f9f3 	udiv	r9, ip, r3
 800586a:	4610      	mov	r0, r2
 800586c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005870:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005874:	2f09      	cmp	r7, #9
 8005876:	d81b      	bhi.n	80058b0 <_strtol_l.constprop.0+0xa8>
 8005878:	463c      	mov	r4, r7
 800587a:	42a3      	cmp	r3, r4
 800587c:	dd27      	ble.n	80058ce <_strtol_l.constprop.0+0xc6>
 800587e:	1c57      	adds	r7, r2, #1
 8005880:	d007      	beq.n	8005892 <_strtol_l.constprop.0+0x8a>
 8005882:	4581      	cmp	r9, r0
 8005884:	d320      	bcc.n	80058c8 <_strtol_l.constprop.0+0xc0>
 8005886:	d101      	bne.n	800588c <_strtol_l.constprop.0+0x84>
 8005888:	45a2      	cmp	sl, r4
 800588a:	db1d      	blt.n	80058c8 <_strtol_l.constprop.0+0xc0>
 800588c:	fb00 4003 	mla	r0, r0, r3, r4
 8005890:	2201      	movs	r2, #1
 8005892:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005896:	e7eb      	b.n	8005870 <_strtol_l.constprop.0+0x68>
 8005898:	2c2b      	cmp	r4, #43	@ 0x2b
 800589a:	bf04      	itt	eq
 800589c:	782c      	ldrbeq	r4, [r5, #0]
 800589e:	1c95      	addeq	r5, r2, #2
 80058a0:	e7cf      	b.n	8005842 <_strtol_l.constprop.0+0x3a>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1da      	bne.n	800585c <_strtol_l.constprop.0+0x54>
 80058a6:	2c30      	cmp	r4, #48	@ 0x30
 80058a8:	bf0c      	ite	eq
 80058aa:	2308      	moveq	r3, #8
 80058ac:	230a      	movne	r3, #10
 80058ae:	e7d5      	b.n	800585c <_strtol_l.constprop.0+0x54>
 80058b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058b4:	2f19      	cmp	r7, #25
 80058b6:	d801      	bhi.n	80058bc <_strtol_l.constprop.0+0xb4>
 80058b8:	3c37      	subs	r4, #55	@ 0x37
 80058ba:	e7de      	b.n	800587a <_strtol_l.constprop.0+0x72>
 80058bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058c0:	2f19      	cmp	r7, #25
 80058c2:	d804      	bhi.n	80058ce <_strtol_l.constprop.0+0xc6>
 80058c4:	3c57      	subs	r4, #87	@ 0x57
 80058c6:	e7d8      	b.n	800587a <_strtol_l.constprop.0+0x72>
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	e7e1      	b.n	8005892 <_strtol_l.constprop.0+0x8a>
 80058ce:	1c53      	adds	r3, r2, #1
 80058d0:	d108      	bne.n	80058e4 <_strtol_l.constprop.0+0xdc>
 80058d2:	2322      	movs	r3, #34	@ 0x22
 80058d4:	f8ce 3000 	str.w	r3, [lr]
 80058d8:	4660      	mov	r0, ip
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	d0a0      	beq.n	8005822 <_strtol_l.constprop.0+0x1a>
 80058e0:	1e69      	subs	r1, r5, #1
 80058e2:	e006      	b.n	80058f2 <_strtol_l.constprop.0+0xea>
 80058e4:	b106      	cbz	r6, 80058e8 <_strtol_l.constprop.0+0xe0>
 80058e6:	4240      	negs	r0, r0
 80058e8:	f1b8 0f00 	cmp.w	r8, #0
 80058ec:	d099      	beq.n	8005822 <_strtol_l.constprop.0+0x1a>
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d1f6      	bne.n	80058e0 <_strtol_l.constprop.0+0xd8>
 80058f2:	f8c8 1000 	str.w	r1, [r8]
 80058f6:	e794      	b.n	8005822 <_strtol_l.constprop.0+0x1a>
 80058f8:	08005a19 	.word	0x08005a19

080058fc <strtol>:
 80058fc:	4613      	mov	r3, r2
 80058fe:	460a      	mov	r2, r1
 8005900:	4601      	mov	r1, r0
 8005902:	4802      	ldr	r0, [pc, #8]	@ (800590c <strtol+0x10>)
 8005904:	6800      	ldr	r0, [r0, #0]
 8005906:	f7ff bf7f 	b.w	8005808 <_strtol_l.constprop.0>
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <strncpy>:
 8005920:	b510      	push	{r4, lr}
 8005922:	3901      	subs	r1, #1
 8005924:	4603      	mov	r3, r0
 8005926:	b132      	cbz	r2, 8005936 <strncpy+0x16>
 8005928:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800592c:	f803 4b01 	strb.w	r4, [r3], #1
 8005930:	3a01      	subs	r2, #1
 8005932:	2c00      	cmp	r4, #0
 8005934:	d1f7      	bne.n	8005926 <strncpy+0x6>
 8005936:	441a      	add	r2, r3
 8005938:	2100      	movs	r1, #0
 800593a:	4293      	cmp	r3, r2
 800593c:	d100      	bne.n	8005940 <strncpy+0x20>
 800593e:	bd10      	pop	{r4, pc}
 8005940:	f803 1b01 	strb.w	r1, [r3], #1
 8005944:	e7f9      	b.n	800593a <strncpy+0x1a>
	...

08005948 <__errno>:
 8005948:	4b01      	ldr	r3, [pc, #4]	@ (8005950 <__errno+0x8>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	2000000c 	.word	0x2000000c

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4d0d      	ldr	r5, [pc, #52]	@ (800598c <__libc_init_array+0x38>)
 8005958:	4c0d      	ldr	r4, [pc, #52]	@ (8005990 <__libc_init_array+0x3c>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	2600      	movs	r6, #0
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	4d0b      	ldr	r5, [pc, #44]	@ (8005994 <__libc_init_array+0x40>)
 8005966:	4c0c      	ldr	r4, [pc, #48]	@ (8005998 <__libc_init_array+0x44>)
 8005968:	f000 f826 	bl	80059b8 <_init>
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	2600      	movs	r6, #0
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	08005b24 	.word	0x08005b24
 8005990:	08005b24 	.word	0x08005b24
 8005994:	08005b24 	.word	0x08005b24
 8005998:	08005b28 	.word	0x08005b28

0800599c <memcpy>:
 800599c:	440a      	add	r2, r1
 800599e:	4291      	cmp	r1, r2
 80059a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059a4:	d100      	bne.n	80059a8 <memcpy+0xc>
 80059a6:	4770      	bx	lr
 80059a8:	b510      	push	{r4, lr}
 80059aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b2:	4291      	cmp	r1, r2
 80059b4:	d1f9      	bne.n	80059aa <memcpy+0xe>
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
