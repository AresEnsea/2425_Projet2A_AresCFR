
Pami_F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059ac  080059ac  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080059ac  080059ac  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059ac  080059ac  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3fd  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c95  00000000  00000000  00013439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  000150d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000944  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7b3  00000000  00000000  0001660c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e800  00000000  00000000  00031dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a73e7  00000000  00000000  000405bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e79a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003328  00000000  00000000  000e79ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000ead14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005964 	.word	0x08005964

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005964 	.word	0x08005964

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
ADC_ChannelConfTypeDef sConfig;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
  static int threshold_state, timer_count;
  if((GPIO_Pin == ECHO_PIN)&&(threshold_state==0)){
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10d      	bne.n	80009d4 <HAL_GPIO_EXTI_Callback+0x2c>
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x98>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d109      	bne.n	80009d4 <HAL_GPIO_EXTI_Callback+0x2c>
	  threshold_state =1;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x98>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
	  timer_count = __HAL_TIM_GET_COUNTER (&htim1);
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009d0:	601a      	str	r2, [r3, #0]
	  threshold_state = 0;
	  //int time = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count);
	  Distance = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count)*0.034/2;
	  //__HAL_TIM_SET_COUNTER (&htim1, 0);
  }
}
 80009d2:	e02b      	b.n	8000a2c <HAL_GPIO_EXTI_Callback+0x84>
  }else if((GPIO_Pin==ECHO_PIN) && (threshold_state ==1)){
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d128      	bne.n	8000a2c <HAL_GPIO_EXTI_Callback+0x84>
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x98>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d124      	bne.n	8000a2c <HAL_GPIO_EXTI_Callback+0x84>
	  threshold_state = 0;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
	  Distance = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count)*0.034/2;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009f0:	6812      	ldr	r2, [r2, #0]
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fd29 	bl	800044c <__aeabi_ui2d>
 80009fa:	a30f      	add	r3, pc, #60	@ (adr r3, 8000a38 <HAL_GPIO_EXTI_Callback+0x90>)
 80009fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a00:	f7ff fd9e 	bl	8000540 <__aeabi_dmul>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	4610      	mov	r0, r2
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 0200 	mov.w	r2, #0
 8000a10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a14:	f7ff febe 	bl	8000794 <__aeabi_ddiv>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff ffa0 	bl	8000964 <__aeabi_d2uiz>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a2a:	801a      	strh	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	f3af 8000 	nop.w
 8000a38:	b020c49c 	.word	0xb020c49c
 8000a3c:	3fa16872 	.word	0x3fa16872
 8000a40:	2000013c 	.word	0x2000013c
 8000a44:	20000078 	.word	0x20000078
 8000a48:	20000140 	.word	0x20000140
 8000a4c:	20000110 	.word	0x20000110

08000a50 <ADC_Select_CH1>:
/* USER CODE BEGIN 0 */


// I couldn't configure the ioc file properly with DMAs, so I'm gonna just manually initialise those each time, here's the functions to do so :
// note: they're copied, slightly modified and pasted from lines 382-409 down this file
void ADC_Select_CH1(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	  */
	sConfig.Channel = ADC_CHANNEL_1;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a62:	2206      	movs	r2, #6
 8000a64:	609a      	str	r2, [r3, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	4905      	ldr	r1, [pc, #20]	@ (8000a90 <ADC_Select_CH1+0x40>)
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <ADC_Select_CH1+0x44>)
 8000a7c:	f001 fc2a 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <ADC_Select_CH1+0x3a>
	{
	  Error_Handler();
 8000a86:	f000 fc39 	bl	80012fc <Error_Handler>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000114 	.word	0x20000114
 8000a94:	20000028 	.word	0x20000028

08000a98 <ADC_Select_CH2>:
void ADC_Select_CH2(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	609a      	str	r2, [r3, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
	  sConfig.Offset = 0;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	4905      	ldr	r1, [pc, #20]	@ (8000ad8 <ADC_Select_CH2+0x40>)
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <ADC_Select_CH2+0x44>)
 8000ac4:	f001 fc06 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <ADC_Select_CH2+0x3a>
	  {
	    Error_Handler();
 8000ace:	f000 fc15 	bl	80012fc <Error_Handler>
	  }
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000114 	.word	0x20000114
 8000adc:	20000028 	.word	0x20000028

08000ae0 <ADC_Select_CH3>:

void ADC_Select_CH3(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
		  */
		  sConfig.Channel = ADC_CHANNEL_3;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000af2:	2206      	movs	r2, #6
 8000af4:	609a      	str	r2, [r3, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
		  sConfig.Offset = 0;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	4905      	ldr	r1, [pc, #20]	@ (8000b20 <ADC_Select_CH3+0x40>)
 8000b0a:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <ADC_Select_CH3+0x44>)
 8000b0c:	f001 fbe2 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <ADC_Select_CH3+0x3a>
		  {
		    Error_Handler();
 8000b16:	f000 fbf1 	bl	80012fc <Error_Handler>
		  }
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000114 	.word	0x20000114
 8000b24:	20000028 	.word	0x20000028

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fd3b 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f9b3 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 fb6d 	bl	8001214 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b3a:	f000 fa95 	bl	8001068 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000b3e:	f000 fa09 	bl	8000f54 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b42:	f000 fae5 	bl	8001110 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // For the motors
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b46:	2100      	movs	r1, #0
 8000b48:	487e      	ldr	r0, [pc, #504]	@ (8000d44 <main+0x21c>)
 8000b4a:	f003 ffbd 	bl	8004ac8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b4e:	2104      	movs	r1, #4
 8000b50:	487c      	ldr	r0, [pc, #496]	@ (8000d44 <main+0x21c>)
 8000b52:	f003 ffb9 	bl	8004ac8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000b56:	487c      	ldr	r0, [pc, #496]	@ (8000d48 <main+0x220>)
 8000b58:	f003 ff00 	bl	800495c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //pull the TRIG pin low
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	487a      	ldr	r0, [pc, #488]	@ (8000d4c <main+0x224>)
 8000b62:	f002 fb3f 	bl	80031e4 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //for sensors calibration
 8000b66:	2100      	movs	r1, #0
 8000b68:	4879      	ldr	r0, [pc, #484]	@ (8000d50 <main+0x228>)
 8000b6a:	f001 fb19 	bl	80021a0 <HAL_ADCEx_Calibration_Start>

  int threshold = 500;  //the threshold for line tracking
 8000b6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b72:	60bb      	str	r3, [r7, #8]
  //Stop the motor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f002 fb32 	bl	80031e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f002 fb2c 	bl	80031e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f002 fb26 	bl	80031e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2140      	movs	r1, #64	@ 0x40
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f002 fb20 	bl	80031e4 <HAL_GPIO_WritePin>

  int count_time_init =0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  int count_time_actu =0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // The code for the radar, it prints the distance
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000bac:	2201      	movs	r2, #1
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4866      	ldr	r0, [pc, #408]	@ (8000d4c <main+0x224>)
 8000bb2:	f002 fb17 	bl	80031e4 <HAL_GPIO_WritePin>
	  //__HAL_TIM_SET_COUNTER(&htim1, 0);
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000bb6:	bf00      	nop
 8000bb8:	4b63      	ldr	r3, [pc, #396]	@ (8000d48 <main+0x220>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d9fa      	bls.n	8000bb8 <main+0x90>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4861      	ldr	r0, [pc, #388]	@ (8000d4c <main+0x224>)
 8000bc8:	f002 fb0c 	bl	80031e4 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8000d48 <main+0x220>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24


	  //Lign tracker part
	  ADC_Select_CH1();
 8000bd4:	f7ff ff3c 	bl	8000a50 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000bd8:	485d      	ldr	r0, [pc, #372]	@ (8000d50 <main+0x228>)
 8000bda:	f000 ff1f 	bl	8001a1c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000bde:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000be2:	485b      	ldr	r0, [pc, #364]	@ (8000d50 <main+0x228>)
 8000be4:	f001 f806 	bl	8001bf4 <HAL_ADC_PollForConversion>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8000be8:	4859      	ldr	r0, [pc, #356]	@ (8000d50 <main+0x228>)
 8000bea:	f001 f8d1 	bl	8001d90 <HAL_ADC_GetValue>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b58      	ldr	r3, [pc, #352]	@ (8000d54 <main+0x22c>)
 8000bf4:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000bf6:	4856      	ldr	r0, [pc, #344]	@ (8000d50 <main+0x228>)
 8000bf8:	f000 ffc6 	bl	8001b88 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8000bfc:	f7ff ff4c 	bl	8000a98 <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8000c00:	4853      	ldr	r0, [pc, #332]	@ (8000d50 <main+0x228>)
 8000c02:	f000 ff0b 	bl	8001a1c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c06:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c0a:	4851      	ldr	r0, [pc, #324]	@ (8000d50 <main+0x228>)
 8000c0c:	f000 fff2 	bl	8001bf4 <HAL_ADC_PollForConversion>
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8000c10:	484f      	ldr	r0, [pc, #316]	@ (8000d50 <main+0x228>)
 8000c12:	f001 f8bd 	bl	8001d90 <HAL_ADC_GetValue>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <main+0x22c>)
 8000c1c:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);
 8000c1e:	484c      	ldr	r0, [pc, #304]	@ (8000d50 <main+0x228>)
 8000c20:	f000 ffb2 	bl	8001b88 <HAL_ADC_Stop>

	  ADC_Select_CH3();
 8000c24:	f7ff ff5c 	bl	8000ae0 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 8000c28:	4849      	ldr	r0, [pc, #292]	@ (8000d50 <main+0x228>)
 8000c2a:	f000 fef7 	bl	8001a1c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c2e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c32:	4847      	ldr	r0, [pc, #284]	@ (8000d50 <main+0x228>)
 8000c34:	f000 ffde 	bl	8001bf4 <HAL_ADC_PollForConversion>
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000c38:	4845      	ldr	r0, [pc, #276]	@ (8000d50 <main+0x228>)
 8000c3a:	f001 f8a9 	bl	8001d90 <HAL_ADC_GetValue>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <main+0x22c>)
 8000c44:	809a      	strh	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 8000c46:	4842      	ldr	r0, [pc, #264]	@ (8000d50 <main+0x228>)
 8000c48:	f000 ff9e 	bl	8001b88 <HAL_ADC_Stop>
	  //printf("Left : %d, Mid: %d, Right: %d \r\n", ADC_VAL[0], ADC_VAL[1], ADC_VAL[2]);


	  if(((ADC_VAL[0]<threshold) &&(ADC_VAL[1]>threshold) && (ADC_VAL[2]<threshold))&&(Distance>10)){
 8000c4c:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <main+0x22c>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	dd3e      	ble.n	8000cd6 <main+0x1ae>
 8000c58:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <main+0x22c>)
 8000c5a:	885b      	ldrh	r3, [r3, #2]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4293      	cmp	r3, r2
 8000c62:	da38      	bge.n	8000cd6 <main+0x1ae>
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <main+0x22c>)
 8000c66:	889b      	ldrh	r3, [r3, #4]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dd32      	ble.n	8000cd6 <main+0x1ae>
 8000c70:	4b39      	ldr	r3, [pc, #228]	@ (8000d58 <main+0x230>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	d92e      	bls.n	8000cd6 <main+0x1ae>
	  		  //Set the rotation direction forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f002 fab0 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8c:	f002 faaa 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2120      	movs	r1, #32
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c98:	f002 faa4 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2140      	movs	r1, #64	@ 0x40
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca4:	f002 fa9e 	bl	80031e4 <HAL_GPIO_WritePin>
	  		  // Set the speed
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 200);
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <main+0x21c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	22c8      	movs	r2, #200	@ 0xc8
 8000cae:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 200);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <main+0x21c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	22c8      	movs	r2, #200	@ 0xc8
 8000cb6:	639a      	str	r2, [r3, #56]	@ 0x38
		  count_time_actu =HAL_GetTick();
 8000cb8:	f000 fcd0 	bl	800165c <HAL_GetTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	607b      	str	r3, [r7, #4]
		  count_time_init =HAL_GetTick();
 8000cc0:	f000 fccc 	bl	800165c <HAL_GetTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
		  started_to_turn_right = 0;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <main+0x234>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
		  started_to_turn_left = 0;
 8000cce:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <main+0x238>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e07b      	b.n	8000dce <main+0x2a6>
	  }else if(( (ADC_VAL[0]>threshold)&&(Distance>10)) || (started_to_turn_left==1)){
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <main+0x22c>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	da03      	bge.n	8000cea <main+0x1c2>
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <main+0x230>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d803      	bhi.n	8000cf2 <main+0x1ca>
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <main+0x238>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d138      	bne.n	8000d64 <main+0x23c>
	  		  //Stop the left motor
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f002 fa73 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d06:	f002 fa6d 	bl	80031e4 <HAL_GPIO_WritePin>
	  		  //right motor rotate foward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d12:	f002 fa67 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	@ 0x40
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f002 fa61 	bl	80031e4 <HAL_GPIO_WritePin>
	  		  // Set the speed
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 150);
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <main+0x21c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2296      	movs	r2, #150	@ 0x96
 8000d28:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  count_time_actu =HAL_GetTick();
 8000d2a:	f000 fc97 	bl	800165c <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	607b      	str	r3, [r7, #4]
	  	  count_time_init =HAL_GetTick();
 8000d32:	f000 fc93 	bl	800165c <HAL_GetTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	60fb      	str	r3, [r7, #12]
	  	  started_to_turn_left = 1;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <main+0x238>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e045      	b.n	8000dce <main+0x2a6>
 8000d42:	bf00      	nop
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	20000078 	.word	0x20000078
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	20000028 	.word	0x20000028
 8000d54:	2000012c 	.word	0x2000012c
 8000d58:	20000110 	.word	0x20000110
 8000d5c:	20000134 	.word	0x20000134
 8000d60:	20000138 	.word	0x20000138
	  }else if(((ADC_VAL[2]>threshold)&&(Distance>10))|| (started_to_turn_right==1)){
 8000d64:	4b49      	ldr	r3, [pc, #292]	@ (8000e8c <main+0x364>)
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da03      	bge.n	8000d78 <main+0x250>
 8000d70:	4b47      	ldr	r3, [pc, #284]	@ (8000e90 <main+0x368>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2b0a      	cmp	r3, #10
 8000d76:	d803      	bhi.n	8000d80 <main+0x258>
 8000d78:	4b46      	ldr	r3, [pc, #280]	@ (8000e94 <main+0x36c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d126      	bne.n	8000dce <main+0x2a6>
	  		  //left motor rotate foward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2108      	movs	r1, #8
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d88:	f002 fa2c 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f002 fa26 	bl	80031e4 <HAL_GPIO_WritePin>
		  	  		  //right motor rotate foward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da0:	f002 fa20 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f002 fa1a 	bl	80031e4 <HAL_GPIO_WritePin>
	  		  // Set the speed
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 150);
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <main+0x370>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2296      	movs	r2, #150	@ 0x96
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  count_time_actu =HAL_GetTick();
 8000db8:	f000 fc50 	bl	800165c <HAL_GetTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	607b      	str	r3, [r7, #4]
	  	  count_time_init =HAL_GetTick();
 8000dc0:	f000 fc4c 	bl	800165c <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60fb      	str	r3, [r7, #12]
	  	  started_to_turn_right = 1;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <main+0x36c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
	  }

	  if(Distance<10){
 8000dce:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <main+0x368>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d81f      	bhi.n	8000e16 <main+0x2ee>
	  	  //Stop both motors
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2108      	movs	r1, #8
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f002 fa01 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f002 f9fb 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2120      	movs	r1, #32
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df6:	f002 f9f5 	bl	80031e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2140      	movs	r1, #64	@ 0x40
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f002 f9ef 	bl	80031e4 <HAL_GPIO_WritePin>
	  	  count_time_actu =HAL_GetTick();
 8000e06:	f000 fc29 	bl	800165c <HAL_GetTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	607b      	str	r3, [r7, #4]
	  	  count_time_init =HAL_GetTick();
 8000e0e:	f000 fc25 	bl	800165c <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	60fb      	str	r3, [r7, #12]
	  }
	  if((ADC_VAL[0]<threshold) &&(ADC_VAL[1]<threshold) && (ADC_VAL[2]<threshold)){
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <main+0x364>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	dd2f      	ble.n	8000e82 <main+0x35a>
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <main+0x364>)
 8000e24:	885b      	ldrh	r3, [r3, #2]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	dd29      	ble.n	8000e82 <main+0x35a>
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <main+0x364>)
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	dd23      	ble.n	8000e82 <main+0x35a>
	    		  //Set the rotation direction forward
	   	  count_time_actu = HAL_GetTick();
 8000e3a:	f000 fc0f 	bl	800165c <HAL_GetTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	607b      	str	r3, [r7, #4]
	  	  //if((count_time_actu-count_time_init) !=0){count_time_init =count_time_actu;}
	  	  //printf("count_time_init-HAL_GetTick() = %d \r\n",(count_time_actu-count_time_init));
	   	  if (count_time_actu-count_time_init >800 ){
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000e4c:	dd19      	ble.n	8000e82 <main+0x35a>
	    			//Stop both motors
					  //printf("jarrrettee \r\n");
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e56:	f002 f9c5 	bl	80031e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f002 f9bf 	bl	80031e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6e:	f002 f9b9 	bl	80031e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7a:	f002 f9b3 	bl	80031e4 <HAL_GPIO_WritePin>
			  count_time_init = count_time_actu;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]
	  	}
	  }


	  HAL_Delay(50); //If I don't add this the detection with ultrasound might cause pb with relatively long ditances
 8000e82:	2032      	movs	r0, #50	@ 0x32
 8000e84:	f000 fbf6 	bl	8001674 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e88:	e690      	b.n	8000bac <main+0x84>
 8000e8a:	bf00      	nop
 8000e8c:	2000012c 	.word	0x2000012c
 8000e90:	20000110 	.word	0x20000110
 8000e94:	20000134 	.word	0x20000134
 8000e98:	200000c4 	.word	0x200000c4

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b096      	sub	sp, #88	@ 0x58
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea6:	2228      	movs	r2, #40	@ 0x28
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fd2e 	bl	800590c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ee8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f9a8 	bl	8003244 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000efa:	f000 f9ff 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 f9d0 	bl	80042c0 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f26:	f000 f9e9 	bl	80012fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000f2a:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000f2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fb8f 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f48:	f000 f9d8 	bl	80012fc <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3758      	adds	r7, #88	@ 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b31      	ldr	r3, [pc, #196]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	4824      	ldr	r0, [pc, #144]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fd2:	f000 fb91 	bl	80016f8 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f98e 	bl	80012fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_ADC1_Init+0x110>)
 8000fec:	f001 fc30 	bl	8002850 <HAL_ADCEx_MultiModeConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ff6:	f000 f981 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001006:	2306      	movs	r3, #6
 8001008:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MX_ADC1_Init+0x110>)
 8001018:	f001 f95c 	bl	80022d4 <HAL_ADC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001022:	f000 f96b 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001026:	2301      	movs	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800102a:	2302      	movs	r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <MX_ADC1_Init+0x110>)
 8001034:	f001 f94e 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800103e:	f000 f95d 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001042:	2303      	movs	r3, #3
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <MX_ADC1_Init+0x110>)
 800104c:	f001 f942 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001056:	f000 f951 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000028 	.word	0x20000028

08001068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <MX_TIM1_Init+0xa0>)
 8001088:	4a20      	ldr	r2, [pc, #128]	@ (800110c <MX_TIM1_Init+0xa4>)
 800108a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <MX_TIM1_Init+0xa0>)
 800108e:	2223      	movs	r2, #35	@ 0x23
 8001090:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_TIM1_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <MX_TIM1_Init+0xa0>)
 800109a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800109e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b2:	4815      	ldr	r0, [pc, #84]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010b4:	f003 fbfa 	bl	80048ac <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010be:	f000 f91d 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480e      	ldr	r0, [pc, #56]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010d0:	f003 fefa 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010da:	f000 f90f 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <MX_TIM1_Init+0xa0>)
 80010f0:	f004 fb9e 	bl	8005830 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010fa:	f000 f8ff 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000078 	.word	0x20000078
 800110c:	40012c00 	.word	0x40012c00

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001142:	4b32      	ldr	r3, [pc, #200]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001144:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <MX_TIM3_Init+0x100>)
 8001146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <MX_TIM3_Init+0xfc>)
 800114a:	2223      	movs	r2, #35	@ 0x23
 800114c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001156:	22c7      	movs	r2, #199	@ 0xc7
 8001158:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <MX_TIM3_Init+0xfc>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001166:	4829      	ldr	r0, [pc, #164]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001168:	f003 fba0 	bl	80048ac <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001172:	f000 f8c3 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001180:	4619      	mov	r1, r3
 8001182:	4822      	ldr	r0, [pc, #136]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001184:	f003 fea0 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800118e:	f000 f8b5 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001192:	481e      	ldr	r0, [pc, #120]	@ (800120c <MX_TIM3_Init+0xfc>)
 8001194:	f003 fc36 	bl	8004a04 <HAL_TIM_PWM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800119e:	f000 f8ad 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4816      	ldr	r0, [pc, #88]	@ (800120c <MX_TIM3_Init+0xfc>)
 80011b2:	f004 fb3d 	bl	8005830 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011bc:	f000 f89e 	bl	80012fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c0:	2360      	movs	r3, #96	@ 0x60
 80011c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM3_Init+0xfc>)
 80011d8:	f003 fd62 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011e2:	f000 f88b 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2204      	movs	r2, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <MX_TIM3_Init+0xfc>)
 80011ee:	f003 fd57 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011f8:	f000 f880 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <MX_TIM3_Init+0xfc>)
 80011fe:	f000 f91f 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	@ 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000c4 	.word	0x200000c4
 8001210:	40000400 	.word	0x40000400

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122a:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a31      	ldr	r2, [pc, #196]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a2b      	ldr	r2, [pc, #172]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a25      	ldr	r2, [pc, #148]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <MX_GPIO_Init+0xe0>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2178      	movs	r1, #120	@ 0x78
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f001 ffb3 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2102      	movs	r1, #2
 8001282:	481d      	ldr	r0, [pc, #116]	@ (80012f8 <MX_GPIO_Init+0xe4>)
 8001284:	f001 ffae 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8001288:	2378      	movs	r3, #120	@ 0x78
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a2:	f001 fe2d 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012aa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	@ (80012f8 <MX_GPIO_Init+0xe4>)
 80012bc:	f001 fe20 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80012c0:	2302      	movs	r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <MX_GPIO_Init+0xe4>)
 80012d8:	f001 fe12 	bl	8002f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2006      	movs	r0, #6
 80012e2:	f001 fdd6 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012e6:	2006      	movs	r0, #6
 80012e8:	f001 fdef 	bl	8002eca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001370:	d12c      	bne.n	80013cc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6153      	str	r3, [r2, #20]
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 8001390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S_L_Pin|S_M_Pin|S_R_Pin;
 80013a2:	2307      	movs	r3, #7
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b8:	f001 fda2 	bl	8002f00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2012      	movs	r0, #18
 80013c2:	f001 fd66 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c6:	2012      	movs	r0, #18
 80013c8:	f001 fd7f 	bl	8002eca <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <HAL_TIM_Base_MspInit+0x5c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10c      	bne.n	8001404 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 80013f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013f4:	6193      	str	r3, [r2, #24]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001402:	e010      	b.n	8001426 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <HAL_TIM_Base_MspInit+0x64>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10b      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_TIM_Base_MspInit+0x60>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40012c00 	.word	0x40012c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40000400 	.word	0x40000400

08001440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_TIM_MspPostInit+0x64>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11b      	bne.n	800149a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800147a:	2330      	movs	r3, #48	@ 0x30
 800147c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800148a:	2302      	movs	r3, #2
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_TIM_MspPostInit+0x6c>)
 8001496:	f001 fd33 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f895 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001512:	2001      	movs	r0, #1
 8001514:	f001 fe7e 	bl	8003214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <ADC1_2_IRQHandler+0x10>)
 8001522:	f000 fc43 	bl	8001dac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000028 	.word	0x20000028

08001530 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001558:	f7ff ffea 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopForever+0x6>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopForever+0xe>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopForever+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f004 f9cb 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001586:	f7ff facf 	bl	8000b28 <main>

0800158a <LoopForever>:

LoopForever:
    b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800158c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001598:	080059b4 	.word	0x080059b4
  ldr r2, =_sbss
 800159c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015a0:	20000148 	.word	0x20000148

080015a4 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <CAN_RX0_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f001 fc5f 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fea0 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fc77 	bl	8002ee6 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f001 fc3f 	bl	8002e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	20000144 	.word	0x20000144

0800165c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000144 	.word	0x20000144

08001674 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09a      	sub	sp, #104	@ 0x68
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e172      	b.n	80019fe <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d176      	bne.n	8001818 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d152      	bne.n	80017d8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fdff 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d13b      	bne.n	80017d8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f001 f99f 	bl	8002aa4 <ADC_Disable>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d12f      	bne.n	80017d8 <HAL_ADC_Init+0xe0>
 8001778:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800177c:	2b00      	cmp	r3, #0
 800177e:	d12b      	bne.n	80017d8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001788:	f023 0302 	bic.w	r3, r3, #2
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017b4:	4b94      	ldr	r3, [pc, #592]	@ (8001a08 <HAL_ADC_Init+0x310>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a94      	ldr	r2, [pc, #592]	@ (8001a0c <HAL_ADC_Init+0x314>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9a      	lsrs	r2, r3, #18
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f9      	bne.n	80017cc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017f4:	d110      	bne.n	8001818 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f023 0312 	bic.w	r3, r3, #18
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 80df 	bne.w	80019e4 <HAL_ADC_Init+0x2ec>
 8001826:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 80da 	bne.w	80019e4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 80d2 	bne.w	80019e4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001848:	f043 0202 	orr.w	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	4b6f      	ldr	r3, [pc, #444]	@ (8001a10 <HAL_ADC_Init+0x318>)
 8001852:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800185c:	d102      	bne.n	8001864 <HAL_ADC_Init+0x16c>
 800185e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a14 <HAL_ADC_Init+0x31c>)
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e002      	b.n	800186a <HAL_ADC_Init+0x172>
 8001864:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001868:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_ADC_Init+0x192>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x192>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_ADC_Init+0x194>
 800188a:	2300      	movs	r3, #0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11c      	bne.n	80018ca <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001890:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_ADC_Init+0x1ba>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x1ba>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_ADC_Init+0x1bc>
 80018b2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018c8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e5b      	ldrb	r3, [r3, #25]
 80018ce:	035b      	lsls	r3, r3, #13
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	d002      	beq.n	80018de <HAL_ADC_Init+0x1e6>
 80018d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018dc:	e000      	b.n	80018e0 <HAL_ADC_Init+0x1e8>
 80018de:	2200      	movs	r2, #0
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018f0:	4313      	orrs	r3, r2
 80018f2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d11b      	bne.n	8001936 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7e5b      	ldrb	r3, [r3, #25]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	045a      	lsls	r2, r3, #17
 800190e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001910:	4313      	orrs	r3, r2
 8001912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001916:	663b      	str	r3, [r7, #96]	@ 0x60
 8001918:	e00d      	b.n	8001936 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001922:	f043 0220 	orr.w	r2, r3, #32
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	4313      	orrs	r3, r2
 8001948:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800194a:	4313      	orrs	r3, r2
 800194c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	d114      	bne.n	8001986 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800196a:	f023 0302 	bic.w	r3, r3, #2
 800196e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e1b      	ldrb	r3, [r3, #24]
 8001974:	039a      	lsls	r2, r3, #14
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4313      	orrs	r3, r2
 8001980:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001982:	4313      	orrs	r3, r2
 8001984:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <HAL_ADC_Init+0x320>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001996:	430b      	orrs	r3, r1
 8001998:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10c      	bne.n	80019bc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	f023 010f 	bic.w	r1, r3, #15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ba:	e007      	b.n	80019cc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 020f 	bic.w	r2, r2, #15
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e2:	e00a      	b.n	80019fa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f023 0312 	bic.w	r3, r3, #18
 80019ec:	f043 0210 	orr.w	r2, r3, #16
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3768      	adds	r7, #104	@ 0x68
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	50000300 	.word	0x50000300
 8001a14:	50000100 	.word	0x50000100
 8001a18:	fff0c007 	.word	0xfff0c007

08001a1c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 809c 	bne.w	8001b70 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Start+0x2a>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e097      	b.n	8001b76 <HAL_ADC_Start+0x15a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 ffc4 	bl	80029dc <ADC_Enable>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 8083 	bne.w	8001b66 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a74:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <HAL_ADC_Start+0x164>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_Start+0x6e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a88:	d115      	bne.n	8001ab6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d027      	beq.n	8001af4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ab4:	e01e      	b.n	8001af4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_Start+0xba>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <HAL_ADC_Start+0x168>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10e      	bne.n	8001af4 <HAL_ADC_Start+0xd8>
 8001ad6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b00:	d106      	bne.n	8001b10 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f023 0206 	bic.w	r2, r3, #6
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	221c      	movs	r2, #28
 8001b24:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_ADC_Start+0x164>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_ADC_Start+0x138>
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_ADC_Start+0x164>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_Start+0x138>
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_ADC_Start+0x164>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d004      	beq.n	8001b54 <HAL_ADC_Start+0x138>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b52:	d10f      	bne.n	8001b74 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0204 	orr.w	r2, r2, #4
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	50000300 	.word	0x50000300
 8001b84:	50000100 	.word	0x50000100

08001b88 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Stop+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e023      	b.n	8001bea <HAL_ADC_Stop+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001baa:	216c      	movs	r1, #108	@ 0x6c
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ffdf 	bl	8002b70 <ADC_ConversionStop>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 ff71 	bl	8002aa4 <ADC_Disable>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d102      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e02e      	b.n	8001c6e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	4b5e      	ldr	r3, [pc, #376]	@ (8001d8c <HAL_ADC_PollForConversion+0x198>)
 8001c12:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d112      	bne.n	8001c46 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d11d      	bne.n	8001c6a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e09d      	b.n	8001d82 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f043 0220 	orr.w	r2, r3, #32
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e08b      	b.n	8001d82 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c6e:	4b47      	ldr	r3, [pc, #284]	@ (8001d8c <HAL_ADC_PollForConversion+0x198>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_PollForConversion+0x90>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c82:	d104      	bne.n	8001c8e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001c96:	f7ff fce1 	bl	800165c <HAL_GetTick>
 8001c9a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c9c:	e021      	b.n	8001ce2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d01d      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_ADC_PollForConversion+0xc8>
 8001cac:	f7ff fcd6 	bl	800165c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d212      	bcs.n	8001ce2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f043 0204 	orr.w	r2, r3, #4
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e04f      	b.n	8001d82 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0d6      	beq.n	8001c9e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d131      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d12c      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d125      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d112      	bne.n	8001d56 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d54:	e00b      	b.n	8001d6e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	50000300 	.word	0x50000300

08001d90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x38>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d076      	beq.n	8001edc <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d071      	beq.n	8001edc <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e10:	4b82      	ldr	r3, [pc, #520]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x92>
 8001e1c:	4b7f      	ldr	r3, [pc, #508]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d00a      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x92>
 8001e28:	4b7c      	ldr	r3, [pc, #496]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x92>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e3c:	d104      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d137      	bne.n	8001ece <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d132      	bne.n	8001ece <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d02d      	beq.n	8001ece <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020c 	bic.w	r2, r2, #12
 8001e8e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d112      	bne.n	8001ece <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb4:	e00b      	b.n	8001ece <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fbf4 	bl	80016bc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	220c      	movs	r2, #12
 8001eda:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x144>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80a5 	beq.w	8002046 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 809f 	beq.w	8002046 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f14:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x196>
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d00a      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x196>
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d004      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x196>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f40:	d104      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d16a      	bne.n	8002038 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d15e      	bne.n	8002038 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d159      	bne.n	8002038 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d054      	beq.n	8002038 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x210>
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d00a      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x210>
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_ADC_IRQHandler+0x270>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2b07      	cmp	r3, #7
 8001fb0:	d004      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x210>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fba:	d104      	bne.n	8001fc6 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d12f      	bne.n	8002038 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11c      	bne.n	8002020 <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ff4:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d114      	bne.n	8002038 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
 800201a:	e00d      	b.n	8002038 <HAL_ADC_IRQHandler+0x28c>
 800201c:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f923 	bl	8002284 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2260      	movs	r2, #96	@ 0x60
 8002044:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d011      	beq.n	8002074 <HAL_ADC_IRQHandler+0x2c8>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fb32 	bl	80016d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2280      	movs	r2, #128	@ 0x80
 8002072:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x2f8>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f909 	bl	80022ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x328>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8fb 	bl	80022c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03b      	beq.n	8002156 <HAL_ADC_IRQHandler+0x3aa>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d036      	beq.n	8002156 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e019      	b.n	800212a <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f6:	4b29      	ldr	r3, [pc, #164]	@ (800219c <HAL_ADC_IRQHandler+0x3f0>)
 80020f8:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10a      	bne.n	800212a <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8002114:	2301      	movs	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	e007      	b.n	800212a <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8002126:	2301      	movs	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10e      	bne.n	800214e <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002140:	f043 0202 	orr.w	r2, r3, #2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff facb 	bl	80016e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2210      	movs	r2, #16
 8002154:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <HAL_ADC_IRQHandler+0x3e6>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d013      	beq.n	8002192 <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0208 	orr.w	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800218a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f883 	bl	8002298 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002192:	bf00      	nop
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	50000300 	.word	0x50000300

080021a0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADCEx_Calibration_Start+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e05f      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xdc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc6d 	bl	8002aa4 <ADC_Disable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d14e      	bne.n	8002272 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80021e8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021fe:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800220e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002210:	f7ff fa24 	bl	800165c <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002216:	e01c      	b.n	8002252 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002218:	f7ff fa20 	bl	800165c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b0a      	cmp	r3, #10
 8002224:	d915      	bls.n	8002252 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002234:	d10d      	bne.n	8002252 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f023 0312 	bic.w	r3, r3, #18
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e014      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800225c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002260:	d0da      	beq.n	8002218 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b09b      	sub	sp, #108	@ 0x6c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x22>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e2a1      	b.n	800283a <HAL_ADC_ConfigChannel+0x566>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8285 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d81c      	bhi.n	8002350 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	461a      	mov	r2, r3
 800232a:	231f      	movs	r3, #31
 800232c:	4093      	lsls	r3, r2
 800232e:	43db      	mvns	r3, r3
 8002330:	4019      	ands	r1, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
 800234e:	e063      	b.n	8002418 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d81e      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	3b1e      	subs	r3, #30
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	4019      	ands	r1, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	3b1e      	subs	r3, #30
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34
 8002394:	e040      	b.n	8002418 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b0e      	cmp	r3, #14
 800239c:	d81e      	bhi.n	80023dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	3b3c      	subs	r3, #60	@ 0x3c
 80023b2:	221f      	movs	r2, #31
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	3b3c      	subs	r3, #60	@ 0x3c
 80023ce:	fa00 f203 	lsl.w	r2, r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80023da:	e01d      	b.n	8002418 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	3b5a      	subs	r3, #90	@ 0x5a
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4019      	ands	r1, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	3b5a      	subs	r3, #90	@ 0x5a
 800240c:	fa00 f203 	lsl.w	r2, r0, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 80e5 	bne.w	80025f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d91c      	bls.n	800246a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6999      	ldr	r1, [r3, #24]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6898      	ldr	r0, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	3b1e      	subs	r3, #30
 800245c:	fa00 f203 	lsl.w	r2, r0, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	619a      	str	r2, [r3, #24]
 8002468:	e019      	b.n	800249e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6959      	ldr	r1, [r3, #20]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	2207      	movs	r2, #7
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	4019      	ands	r1, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d84f      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0x28c>
 80024c0:	a201      	add	r2, pc, #4	@ (adr r2, 80024c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024fb 	.word	0x080024fb
 80024d0:	0800251d 	.word	0x0800251d
 80024d4:	0800253f 	.word	0x0800253f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024de:	4b9c      	ldr	r3, [pc, #624]	@ (8002750 <HAL_ADC_ConfigChannel+0x47c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	0691      	lsls	r1, r2, #26
 80024e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024ea:	430a      	orrs	r2, r1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80024f6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024f8:	e07b      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002500:	4b93      	ldr	r3, [pc, #588]	@ (8002750 <HAL_ADC_ConfigChannel+0x47c>)
 8002502:	4013      	ands	r3, r2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	0691      	lsls	r1, r2, #26
 800250a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800250c:	430a      	orrs	r2, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002518:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800251a:	e06a      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002522:	4b8b      	ldr	r3, [pc, #556]	@ (8002750 <HAL_ADC_ConfigChannel+0x47c>)
 8002524:	4013      	ands	r3, r2
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	0691      	lsls	r1, r2, #26
 800252c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800252e:	430a      	orrs	r2, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800253a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800253c:	e059      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002544:	4b82      	ldr	r3, [pc, #520]	@ (8002750 <HAL_ADC_ConfigChannel+0x47c>)
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	0691      	lsls	r1, r2, #26
 800254e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002550:	430a      	orrs	r2, r1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800255c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800255e:	e048      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	069b      	lsls	r3, r3, #26
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80025f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d108      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x33e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x33e>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_ADC_ConfigChannel+0x340>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 810a 	bne.w	800282e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d00f      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002640:	e049      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d91c      	bls.n	800269e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6999      	ldr	r1, [r3, #24]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1b      	subs	r3, #27
 8002676:	2207      	movs	r2, #7
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	4019      	ands	r1, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6898      	ldr	r0, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1b      	subs	r3, #27
 8002690:	fa00 f203 	lsl.w	r2, r0, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	e01b      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6959      	ldr	r1, [r3, #20]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	2207      	movs	r2, #7
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4019      	ands	r1, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6898      	ldr	r0, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <HAL_ADC_ConfigChannel+0x480>)
 80026d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026f2:	2b11      	cmp	r3, #17
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002706:	2b12      	cmp	r3, #18
 8002708:	f040 8091 	bne.w	800282e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800270c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 808a 	bne.w	800282e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002722:	d102      	bne.n	800272a <HAL_ADC_ConfigChannel+0x456>
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_ADC_ConfigChannel+0x484>)
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x45c>
 800272a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800272e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10e      	bne.n	800275c <HAL_ADC_ConfigChannel+0x488>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x488>
 800274c:	2301      	movs	r3, #1
 800274e:	e006      	b.n	800275e <HAL_ADC_ConfigChannel+0x48a>
 8002750:	83fff000 	.word	0x83fff000
 8002754:	50000300 	.word	0x50000300
 8002758:	50000100 	.word	0x50000100
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d150      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002762:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x4b0>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x4b0>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_ADC_ConfigChannel+0x4b2>
 8002784:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13c      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11d      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x4fa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800279a:	d118      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800279c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_ADC_ConfigChannel+0x574>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a27      	ldr	r2, [pc, #156]	@ (800284c <HAL_ADC_ConfigChannel+0x578>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0c9a      	lsrs	r2, r3, #18
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027be:	e002      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027cc:	e02e      	b.n	800282c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b11      	cmp	r3, #17
 80027d4:	d10b      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x51a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027de:	d106      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80027e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ec:	e01e      	b.n	800282c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d11a      	bne.n	800282c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002802:	e013      	b.n	800282c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002816:	e00a      	b.n	800282e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800282a:	e000      	b.n	800282e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800282c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002836:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800283a:	4618      	mov	r0, r3
 800283c:	376c      	adds	r7, #108	@ 0x6c
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000
 800284c:	431bde83 	.word	0x431bde83

08002850 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002850:	b480      	push	{r7}
 8002852:	b099      	sub	sp, #100	@ 0x64
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002868:	d102      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800286a:	4b5a      	ldr	r3, [pc, #360]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	e002      	b.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002870:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002874:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0a2      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800288a:	2302      	movs	r3, #2
 800288c:	e09b      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d17f      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d179      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b0:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80028b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d040      	beq.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ce:	035b      	lsls	r3, r3, #13
 80028d0:	430b      	orrs	r3, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d15c      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800291a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800291c:	2b00      	cmp	r3, #0
 800291e:	d14b      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002928:	f023 030f 	bic.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	6811      	ldr	r1, [r2, #0]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	430a      	orrs	r2, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800293a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800293c:	e03c      	b.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800293e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002948:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d123      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800298c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d112      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800299a:	f023 030f 	bic.w	r3, r3, #15
 800299e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a2:	e009      	b.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80029b6:	e000      	b.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80029c6:	4618      	mov	r0, r3
 80029c8:	3764      	adds	r7, #100	@ 0x64
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	50000100 	.word	0x50000100
 80029d8:	50000300 	.word	0x50000300

080029dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <ADC_Enable+0x2c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <ADC_Enable+0x2c>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <ADC_Enable+0x2e>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d143      	bne.n	8002a96 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <ADC_Enable+0xc4>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f043 0210 	orr.w	r2, r3, #16
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e02f      	b.n	8002a98 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a48:	f7fe fe08 	bl	800165c <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a4e:	e01b      	b.n	8002a88 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a50:	f7fe fe04 	bl	800165c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d914      	bls.n	8002a88 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d00d      	beq.n	8002a88 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d1dc      	bne.n	8002a50 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	8000003f 	.word	0x8000003f

08002aa4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <ADC_Disable+0x2c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <ADC_Disable+0x2c>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <ADC_Disable+0x2e>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d047      	beq.n	8002b66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030d 	and.w	r3, r3, #13
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0202 	orr.w	r2, r2, #2
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2203      	movs	r2, #3
 8002afa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fdae 	bl	800165c <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b02:	e029      	b.n	8002b58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e023      	b.n	8002b68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b20:	f7fe fd9c 	bl	800165c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d914      	bls.n	8002b58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10d      	bne.n	8002b58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d0dc      	beq.n	8002b20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 809b 	beq.w	8002ccc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba4:	d12a      	bne.n	8002bfc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d126      	bne.n	8002bfc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d122      	bne.n	8002bfc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002bba:	e014      	b.n	8002be6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4a46      	ldr	r2, [pc, #280]	@ (8002cd8 <ADC_ConversionStop+0x168>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d90d      	bls.n	8002be0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e076      	b.n	8002cce <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	3301      	adds	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf0:	2b40      	cmp	r3, #64	@ 0x40
 8002bf2:	d1e3      	bne.n	8002bbc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2240      	movs	r2, #64	@ 0x40
 8002bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b60      	cmp	r3, #96	@ 0x60
 8002c00:	d015      	beq.n	8002c2e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d10e      	bne.n	8002c2e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0210 	orr.w	r2, r2, #16
 8002c2c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d015      	beq.n	8002c60 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d10e      	bne.n	8002c60 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b60      	cmp	r3, #96	@ 0x60
 8002c64:	d005      	beq.n	8002c72 <ADC_ConversionStop+0x102>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b6c      	cmp	r3, #108	@ 0x6c
 8002c6a:	d105      	bne.n	8002c78 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	617b      	str	r3, [r7, #20]
        break;
 8002c70:	e005      	b.n	8002c7e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c72:	2308      	movs	r3, #8
 8002c74:	617b      	str	r3, [r7, #20]
        break;
 8002c76:	e002      	b.n	8002c7e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]
        break;
 8002c7c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fced 	bl	800165c <HAL_GetTick>
 8002c82:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002c84:	e01b      	b.n	8002cbe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c86:	f7fe fce9 	bl	800165c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b0b      	cmp	r3, #11
 8002c92:	d914      	bls.n	8002cbe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1dc      	bne.n	8002c86 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	000993ff 	.word	0x000993ff

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	@ (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	@ (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	@ (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	@ 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff29 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff3e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff31 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0e:	e14e      	b.n	80031ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8140 	beq.w	80031a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d005      	beq.n	8002f40 <HAL_GPIO_Init+0x40>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d130      	bne.n	8002fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f76:	2201      	movs	r2, #1
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 0201 	and.w	r2, r3, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d017      	beq.n	8002fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d123      	bne.n	8003032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	6939      	ldr	r1, [r7, #16]
 800302e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 809a 	beq.w	80031a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003074:	4b55      	ldr	r3, [pc, #340]	@ (80031cc <HAL_GPIO_Init+0x2cc>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a54      	ldr	r2, [pc, #336]	@ (80031cc <HAL_GPIO_Init+0x2cc>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b52      	ldr	r3, [pc, #328]	@ (80031cc <HAL_GPIO_Init+0x2cc>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800308c:	4a50      	ldr	r2, [pc, #320]	@ (80031d0 <HAL_GPIO_Init+0x2d0>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030b6:	d013      	beq.n	80030e0 <HAL_GPIO_Init+0x1e0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a46      	ldr	r2, [pc, #280]	@ (80031d4 <HAL_GPIO_Init+0x2d4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00d      	beq.n	80030dc <HAL_GPIO_Init+0x1dc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a45      	ldr	r2, [pc, #276]	@ (80031d8 <HAL_GPIO_Init+0x2d8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <HAL_GPIO_Init+0x1d8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a44      	ldr	r2, [pc, #272]	@ (80031dc <HAL_GPIO_Init+0x2dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_GPIO_Init+0x1d4>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_GPIO_Init+0x1e2>
 80030d4:	2305      	movs	r3, #5
 80030d6:	e004      	b.n	80030e2 <HAL_GPIO_Init+0x1e2>
 80030d8:	2302      	movs	r3, #2
 80030da:	e002      	b.n	80030e2 <HAL_GPIO_Init+0x1e2>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_GPIO_Init+0x1e2>
 80030e0:	2300      	movs	r3, #0
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	f002 0203 	and.w	r2, r2, #3
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	4093      	lsls	r3, r2
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030f2:	4937      	ldr	r1, [pc, #220]	@ (80031d0 <HAL_GPIO_Init+0x2d0>)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003100:	4b37      	ldr	r3, [pc, #220]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003124:	4a2e      	ldr	r2, [pc, #184]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312a:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800314e:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003154:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003178:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a2:	4a0f      	ldr	r2, [pc, #60]	@ (80031e0 <HAL_GPIO_Init+0x2e0>)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3301      	adds	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f aea9 	bne.w	8002f10 <HAL_GPIO_Init+0x10>
  }
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010000 	.word	0x40010000
 80031d4:	48000400 	.word	0x48000400
 80031d8:	48000800 	.word	0x48000800
 80031dc:	48000c00 	.word	0x48000c00
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800322a:	4a05      	ldr	r2, [pc, #20]	@ (8003240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fbb8 	bl	80009a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800324a:	af00      	add	r7, sp, #0
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003254:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f001 b823 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 817d 	beq.w	800357a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003280:	4bbc      	ldr	r3, [pc, #752]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b04      	cmp	r3, #4
 800328a:	d00c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800328c:	4bb9      	ldr	r3, [pc, #740]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d15c      	bne.n	8003352 <HAL_RCC_OscConfig+0x10e>
 8003298:	4bb6      	ldr	r3, [pc, #728]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d155      	bne.n	8003352 <HAL_RCC_OscConfig+0x10e>
 80032a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_OscConfig+0x94>
 80032d2:	4ba8      	ldr	r3, [pc, #672]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e015      	b.n	8003304 <HAL_RCC_OscConfig+0xc0>
 80032d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032dc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003300:	4b9c      	ldr	r3, [pc, #624]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003308:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800330c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003318:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 811f 	beq.w	8003578 <HAL_RCC_OscConfig+0x334>
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8116 	bne.w	8003578 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f000 bfaf 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003356:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x12e>
 8003364:	4b83      	ldr	r3, [pc, #524]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a82      	ldr	r2, [pc, #520]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e036      	b.n	80033e0 <HAL_RCC_OscConfig+0x19c>
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x158>
 8003382:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7b      	ldr	r2, [pc, #492]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b79      	ldr	r3, [pc, #484]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a78      	ldr	r2, [pc, #480]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e021      	b.n	80033e0 <HAL_RCC_OscConfig+0x19c>
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x184>
 80033ae:	4b71      	ldr	r3, [pc, #452]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a70      	ldr	r2, [pc, #448]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0x19c>
 80033c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a69      	ldr	r2, [pc, #420]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a66      	ldr	r2, [pc, #408]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033e0:	4b64      	ldr	r3, [pc, #400]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	f023 020f 	bic.w	r2, r3, #15
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	495f      	ldr	r1, [pc, #380]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d059      	beq.n	80034be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe f927 	bl	800165c <HAL_GetTick>
 800340e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe f922 	bl	800165c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	@ 0x64
 8003422:	d902      	bls.n	800342a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	f000 bf43 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 800342a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800342e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800343e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_RCC_OscConfig+0x218>
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	e015      	b.n	8003488 <HAL_RCC_OscConfig+0x244>
 800345c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003460:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003474:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003478:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003484:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800348c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003490:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003494:	fa92 f2a2 	rbit	r2, r2
 8003498:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800349c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f042 0220 	orr.w	r2, r2, #32
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f002 021f 	and.w	r2, r2, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f202 	lsl.w	r2, r1, r2
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ab      	beq.n	8003414 <HAL_RCC_OscConfig+0x1d0>
 80034bc:	e05d      	b.n	800357a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe f8cd 	bl	800165c <HAL_GetTick>
 80034c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe f8c8 	bl	800165c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	@ 0x64
 80034d6:	d902      	bls.n	80034de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	f000 bee9 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 80034de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80034f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x2cc>
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e015      	b.n	800353c <HAL_RCC_OscConfig+0x2f8>
 8003510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003514:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003528:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800352c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003538:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003540:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003544:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003550:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ab      	bne.n	80034c8 <HAL_RCC_OscConfig+0x284>
 8003570:	e003      	b.n	800357a <HAL_RCC_OscConfig+0x336>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 817d 	beq.w	800388a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003590:	4ba6      	ldr	r3, [pc, #664]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800359c:	4ba3      	ldr	r3, [pc, #652]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d172      	bne.n	800368e <HAL_RCC_OscConfig+0x44a>
 80035a8:	4ba0      	ldr	r3, [pc, #640]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d16c      	bne.n	800368e <HAL_RCC_OscConfig+0x44a>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80035c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3a0>
 80035de:	4b93      	ldr	r3, [pc, #588]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x3c8>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035f6:	2302      	movs	r3, #2
 80035f8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003608:	4b88      	ldr	r3, [pc, #544]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	2202      	movs	r2, #2
 800360e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003612:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800361e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f002 021f 	and.w	r2, r2, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCC_OscConfig+0x410>
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f000 be2e 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b75      	ldr	r3, [pc, #468]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	21f8      	movs	r1, #248	@ 0xf8
 800366a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003672:	fa91 f1a1 	rbit	r1, r1
 8003676:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800367a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800367e:	fab1 f181 	clz	r1, r1
 8003682:	b2c9      	uxtb	r1, r1
 8003684:	408b      	lsls	r3, r1
 8003686:	4969      	ldr	r1, [pc, #420]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368c:	e0fd      	b.n	800388a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8088 	beq.w	80037b0 <HAL_RCC_OscConfig+0x56c>
 80036a0:	2301      	movs	r3, #1
 80036a2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	2301      	movs	r3, #1
 80036ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd ffc6 	bl	800165c <HAL_GetTick>
 80036d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fd ffc1 	bl	800165c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	f000 bde2 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 80036ec:	2302      	movs	r3, #2
 80036ee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80036fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0x4d8>
 8003716:	4b45      	ldr	r3, [pc, #276]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x500>
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800372e:	2302      	movs	r3, #2
 8003730:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003734:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003740:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	2202      	movs	r2, #2
 8003746:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800374a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800374e:	fa92 f2a2 	rbit	r2, r2
 8003752:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003756:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0af      	beq.n	80036d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	21f8      	movs	r1, #248	@ 0xf8
 800378c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003794:	fa91 f1a1 	rbit	r1, r1
 8003798:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800379c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80037a0:	fab1 f181 	clz	r1, r1
 80037a4:	b2c9      	uxtb	r1, r1
 80037a6:	408b      	lsls	r3, r1
 80037a8:	4920      	ldr	r1, [pc, #128]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
 80037ae:	e06c      	b.n	800388a <HAL_RCC_OscConfig+0x646>
 80037b0:	2301      	movs	r3, #1
 80037b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80037c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	461a      	mov	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd ff3e 	bl	800165c <HAL_GetTick>
 80037e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fd ff39 	bl	800165c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	f000 bd5a 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800380e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d104      	bne.n	8003830 <HAL_RCC_OscConfig+0x5ec>
 8003826:	4b01      	ldr	r3, [pc, #4]	@ (800382c <HAL_RCC_OscConfig+0x5e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	e015      	b.n	8003858 <HAL_RCC_OscConfig+0x614>
 800382c:	40021000 	.word	0x40021000
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003848:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003854:	4bc8      	ldr	r3, [pc, #800]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	2202      	movs	r2, #2
 800385a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800385e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003862:	fa92 f2a2 	rbit	r2, r2
 8003866:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800386a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ad      	bne.n	80037e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8110 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d079      	beq.n	80039a4 <HAL_RCC_OscConfig+0x760>
 80038b0:	2301      	movs	r3, #1
 80038b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80038c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4bab      	ldr	r3, [pc, #684]	@ (8003b7c <HAL_RCC_OscConfig+0x938>)
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	461a      	mov	r2, r3
 80038d6:	2301      	movs	r3, #1
 80038d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038da:	f7fd febf 	bl	800165c <HAL_GetTick>
 80038de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd feba 	bl	800165c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d902      	bls.n	80038fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	f000 bcdb 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 80038fa:	2302      	movs	r3, #2
 80038fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003914:	2202      	movs	r2, #2
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003938:	2202      	movs	r2, #2
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003952:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003954:	4b88      	ldr	r3, [pc, #544]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003960:	2102      	movs	r1, #2
 8003962:	6019      	str	r1, [r3, #0]
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f1a3 	rbit	r1, r3
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800397a:	6019      	str	r1, [r3, #0]
  return result;
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0a0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x6a0>
 80039a2:	e08d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x87c>
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	fa93 f2a3 	rbit	r2, r3
 80039be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039c6:	601a      	str	r2, [r3, #0]
  return result;
 80039c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	4b68      	ldr	r3, [pc, #416]	@ (8003b7c <HAL_RCC_OscConfig+0x938>)
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	461a      	mov	r2, r3
 80039e2:	2300      	movs	r3, #0
 80039e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fd fe39 	bl	800165c <HAL_GetTick>
 80039ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fd fe34 	bl	800165c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d902      	bls.n	8003a06 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	f000 bc55 	b.w	80042b0 <HAL_RCC_OscConfig+0x106c>
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a0e:	2202      	movs	r2, #2
 8003a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a32:	2202      	movs	r2, #2
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a56:	2202      	movs	r2, #2
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f2a3 	rbit	r2, r3
 8003a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a7e:	2102      	movs	r1, #2
 8003a80:	6019      	str	r1, [r3, #0]
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fa93 f1a3 	rbit	r1, r3
 8003a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a98:	6019      	str	r1, [r3, #0]
  return result;
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d197      	bne.n	80039f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 81a1 	beq.w	8003e18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003adc:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	61d3      	str	r3, [r2, #28]
 8003af4:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <HAL_RCC_OscConfig+0x93c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b22:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <HAL_RCC_OscConfig+0x93c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_RCC_OscConfig+0x93c>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fd95 	bl	800165c <HAL_GetTick>
 8003b32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	e009      	b.n	8003b4c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fd fd90 	bl	800165c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	@ 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e3b1      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x93c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCC_OscConfig+0x940>
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a02      	ldr	r2, [pc, #8]	@ (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6213      	str	r3, [r2, #32]
 8003b74:	e03c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x9ac>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	10908120 	.word	0x10908120
 8003b80:	40007000 	.word	0x40007000
 8003b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x96a>
 8003b94:	4bc1      	ldr	r3, [pc, #772]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4ac0      	ldr	r2, [pc, #768]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6213      	str	r3, [r2, #32]
 8003ba0:	4bbe      	ldr	r3, [pc, #760]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4abd      	ldr	r2, [pc, #756]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6213      	str	r3, [r2, #32]
 8003bac:	e020      	b.n	8003bf0 <HAL_RCC_OscConfig+0x9ac>
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x994>
 8003bbe:	4bb7      	ldr	r3, [pc, #732]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4ab6      	ldr	r2, [pc, #728]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	4bb4      	ldr	r3, [pc, #720]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4ab3      	ldr	r2, [pc, #716]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6213      	str	r3, [r2, #32]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x9ac>
 8003bd8:	4bb0      	ldr	r3, [pc, #704]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4aaf      	ldr	r2, [pc, #700]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	4bad      	ldr	r3, [pc, #692]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4aac      	ldr	r2, [pc, #688]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8081 	beq.w	8003d04 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fd fd2b 	bl	800165c <HAL_GetTick>
 8003c06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fd26 	bl	800165c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e345      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c50:	2202      	movs	r2, #2
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c6a:	601a      	str	r2, [r3, #0]
  return result;
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d102      	bne.n	8003c90 <HAL_RCC_OscConfig+0xa4c>
 8003c8a:	4b84      	ldr	r3, [pc, #528]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	e013      	b.n	8003cb8 <HAL_RCC_OscConfig+0xa74>
 8003c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c98:	2202      	movs	r2, #2
 8003c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	fa93 f2a3 	rbit	r2, r3
 8003caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	4b79      	ldr	r3, [pc, #484]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cbc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	6011      	str	r1, [r2, #0]
 8003cc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	fa92 f1a2 	rbit	r1, r2
 8003cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cd6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cda:	6011      	str	r1, [r2, #0]
  return result;
 8003cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ce0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d084      	beq.n	8003c0c <HAL_RCC_OscConfig+0x9c8>
 8003d02:	e07f      	b.n	8003e04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fd fcaa 	bl	800165c <HAL_GetTick>
 8003d08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fca5 	bl	800165c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e2c4      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d2e:	2202      	movs	r2, #2
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d44:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d52:	2202      	movs	r2, #2
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	fa93 f2a3 	rbit	r2, r3
 8003d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d6c:	601a      	str	r2, [r3, #0]
  return result;
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d102      	bne.n	8003d92 <HAL_RCC_OscConfig+0xb4e>
 8003d8c:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	e013      	b.n	8003dba <HAL_RCC_OscConfig+0xb76>
 8003d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fa93 f2a3 	rbit	r2, r3
 8003dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dbe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	fa92 f1a2 	rbit	r1, r2
 8003dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ddc:	6011      	str	r1, [r2, #0]
  return result;
 8003dde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d184      	bne.n	8003d0e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e04:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b23      	ldr	r3, [pc, #140]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8242 	beq.w	80042ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e9c <HAL_RCC_OscConfig+0xc58>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	f000 8213 	beq.w	800425e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 8162 	bne.w	800410e <HAL_RCC_OscConfig+0xeca>
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e6e:	601a      	str	r2, [r3, #0]
  return result;
 8003e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e74:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fbe4 	bl	800165c <HAL_GetTick>
 8003e94:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e98:	e00c      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc70>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fd fbdc 	bl	800165c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1fd      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ebc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ed8:	601a      	str	r2, [r3, #0]
  return result;
 8003eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ede:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ee2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d102      	bne.n	8003efe <HAL_RCC_OscConfig+0xcba>
 8003ef8:	4bb0      	ldr	r3, [pc, #704]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	e027      	b.n	8003f4e <HAL_RCC_OscConfig+0xd0a>
 8003efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f36:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f52:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f56:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f5a:	6011      	str	r1, [r2, #0]
 8003f5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f60:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	fa92 f1a2 	rbit	r1, r2
 8003f6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f6e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f72:	6011      	str	r1, [r2, #0]
  return result;
 8003f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f78:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	fab2 f282 	clz	r2, r2
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f002 021f 	and.w	r2, r2, #31
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d182      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	4b88      	ldr	r3, [pc, #544]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	497f      	ldr	r1, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f2a3 	rbit	r2, r3
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fe6:	601a      	str	r2, [r3, #0]
  return result;
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ff0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ffc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	2301      	movs	r3, #1
 8004006:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fb28 	bl	800165c <HAL_GetTick>
 800400c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004010:	e009      	b.n	8004026 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fd fb23 	bl	800165c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e144      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800402e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004038:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004046:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800404a:	601a      	str	r2, [r3, #0]
  return result;
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d102      	bne.n	8004070 <HAL_RCC_OscConfig+0xe2c>
 800406a:	4b54      	ldr	r3, [pc, #336]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	e027      	b.n	80040c0 <HAL_RCC_OscConfig+0xe7c>
 8004070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004074:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004078:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004082:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f2a3 	rbit	r2, r3
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800409e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040cc:	6011      	str	r1, [r2, #0]
 80040ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040d2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	fa92 f1a2 	rbit	r1, r2
 80040dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040e4:	6011      	str	r1, [r2, #0]
  return result;
 80040e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	fab2 f282 	clz	r2, r2
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f042 0220 	orr.w	r2, r2, #32
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	f002 021f 	and.w	r2, r2, #31
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f202 	lsl.w	r2, r1, r2
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d082      	beq.n	8004012 <HAL_RCC_OscConfig+0xdce>
 800410c:	e0cf      	b.n	80042ae <HAL_RCC_OscConfig+0x106a>
 800410e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004112:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004116:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800411a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004120:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa93 f2a3 	rbit	r2, r3
 800412a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004132:	601a      	str	r2, [r3, #0]
  return result;
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800413c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004148:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fa82 	bl	800165c <HAL_GetTick>
 8004158:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	e009      	b.n	8004172 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd fa7d 	bl	800165c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e09e      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800417a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800417e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	fa93 f2a3 	rbit	r2, r3
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004196:	601a      	str	r2, [r3, #0]
  return result;
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d104      	bne.n	80041c0 <HAL_RCC_OscConfig+0xf7c>
 80041b6:	4b01      	ldr	r3, [pc, #4]	@ (80041bc <HAL_RCC_OscConfig+0xf78>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	e029      	b.n	8004210 <HAL_RCC_OscConfig+0xfcc>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f2a3 	rbit	r2, r3
 80041dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	fa93 f2a3 	rbit	r2, r3
 8004202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004206:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_OscConfig+0x1078>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004214:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004218:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800421c:	6011      	str	r1, [r2, #0]
 800421e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004222:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	fa92 f1a2 	rbit	r1, r2
 800422c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004230:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004234:	6011      	str	r1, [r2, #0]
  return result;
 8004236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800423a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	fab2 f282 	clz	r2, r2
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f002 021f 	and.w	r2, r2, #31
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f202 	lsl.w	r2, r1, r2
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d180      	bne.n	800415e <HAL_RCC_OscConfig+0xf1a>
 800425c:	e027      	b.n	80042ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800425e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e01e      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <HAL_RCC_OscConfig+0x1078>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800427a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800427e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	429a      	cmp	r2, r3
 8004290:	d10b      	bne.n	80042aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004292:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004296:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b09e      	sub	sp, #120	@ 0x78
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e162      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d8:	4b90      	ldr	r3, [pc, #576]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d910      	bls.n	8004308 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b8d      	ldr	r3, [pc, #564]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	498b      	ldr	r1, [pc, #556]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b89      	ldr	r3, [pc, #548]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e14a      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004314:	4b82      	ldr	r3, [pc, #520]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	497f      	ldr	r1, [pc, #508]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80dc 	beq.w	80044ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d13c      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xf6>
 800433c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004340:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800434a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HAL_RCC_ClockConfig+0xa6>
 8004360:	4b6f      	ldr	r3, [pc, #444]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	e00f      	b.n	8004386 <HAL_RCC_ClockConfig+0xc6>
 8004366:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800436a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	667b      	str	r3, [r7, #100]	@ 0x64
 8004374:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60
 800437a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004382:	4b67      	ldr	r3, [pc, #412]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800438a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800438c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800438e:	fa92 f2a2 	rbit	r2, r2
 8004392:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004394:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004396:	fab2 f282 	clz	r2, r2
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	f042 0220 	orr.w	r2, r2, #32
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	f002 021f 	and.w	r2, r2, #31
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d17b      	bne.n	80044aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0f3      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d13c      	bne.n	8004438 <HAL_RCC_ClockConfig+0x178>
 80043be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	fab3 f383 	clz	r3, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_ClockConfig+0x148>
 80043e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004404:	4b46      	ldr	r3, [pc, #280]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800440c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800440e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004410:	fa92 f2a2 	rbit	r2, r2
 8004414:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004418:	fab2 f282 	clz	r2, r2
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	f042 0220 	orr.w	r2, r2, #32
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	f002 021f 	and.w	r2, r2, #31
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f202 	lsl.w	r2, r1, r2
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d13a      	bne.n	80044aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b2      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
 8004438:	2302      	movs	r3, #2
 800443a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d102      	bne.n	8004460 <HAL_RCC_ClockConfig+0x1a0>
 800445a:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	e00d      	b.n	800447c <HAL_RCC_ClockConfig+0x1bc>
 8004460:	2302      	movs	r3, #2
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
 800446c:	2302      	movs	r3, #2
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	2202      	movs	r2, #2
 800447e:	61ba      	str	r2, [r7, #24]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	fa92 f2a2 	rbit	r2, r2
 8004486:	617a      	str	r2, [r7, #20]
  return result;
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	fab2 f282 	clz	r2, r2
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f042 0220 	orr.w	r2, r2, #32
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f002 021f 	and.w	r2, r2, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e079      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	491a      	ldr	r1, [pc, #104]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044bc:	f7fd f8ce 	bl	800165c <HAL_GetTick>
 80044c0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	e00a      	b.n	80044da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fd f8ca 	bl	800165c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e061      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_RCC_ClockConfig+0x260>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 020c 	and.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1eb      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d214      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b08      	ldr	r3, [pc, #32]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 0207 	bic.w	r2, r3, #7
 8004502:	4906      	ldr	r1, [pc, #24]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b04      	ldr	r3, [pc, #16]	@ (800451c <HAL_RCC_ClockConfig+0x25c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e040      	b.n	800459e <HAL_RCC_ClockConfig+0x2de>
 800451c:	40022000 	.word	0x40022000
 8004520:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	491a      	ldr	r1, [pc, #104]	@ (80045a8 <HAL_RCC_ClockConfig+0x2e8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454e:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4912      	ldr	r1, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x2e8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004562:	f000 f829 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <HAL_RCC_ClockConfig+0x2e8>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004570:	22f0      	movs	r2, #240	@ 0xf0
 8004572:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	fa92 f2a2 	rbit	r2, r2
 800457a:	60fa      	str	r2, [r7, #12]
  return result;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	fab2 f282 	clz	r2, r2
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	40d3      	lsrs	r3, r2
 8004586:	4a09      	ldr	r2, [pc, #36]	@ (80045ac <HAL_RCC_ClockConfig+0x2ec>)
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	fa21 f303 	lsr.w	r3, r1, r3
 800458e:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <HAL_RCC_ClockConfig+0x2f0>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_RCC_ClockConfig+0x2f4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd f81c 	bl	80015d4 <HAL_InitTick>
  
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3778      	adds	r7, #120	@ 0x78
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	0800597c 	.word	0x0800597c
 80045b0:	20000000 	.word	0x20000000
 80045b4:	20000004 	.word	0x20000004

080045b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <HAL_RCC_GetSysClockFreq+0x94>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d002      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x30>
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_GetSysClockFreq+0x36>
 80045e6:	e026      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ea:	613b      	str	r3, [r7, #16]
      break;
 80045ec:	e026      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0c9b      	lsrs	r3, r3, #18
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a17      	ldr	r2, [pc, #92]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <HAL_RCC_GetSysClockFreq+0x94>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004606:	5cd3      	ldrb	r3, [r2, r3]
 8004608:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004614:	4a0e      	ldr	r2, [pc, #56]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fbb2 f2f3 	udiv	r2, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a0c      	ldr	r2, [pc, #48]	@ (800465c <HAL_RCC_GetSysClockFreq+0xa4>)
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	613b      	str	r3, [r7, #16]
      break;
 8004634:	e002      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 8004638:	613b      	str	r3, [r7, #16]
      break;
 800463a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463c:	693b      	ldr	r3, [r7, #16]
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	007a1200 	.word	0x007a1200
 8004654:	0800598c 	.word	0x0800598c
 8004658:	0800599c 	.word	0x0800599c
 800465c:	003d0900 	.word	0x003d0900

08004660 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b092      	sub	sp, #72	@ 0x48
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80cd 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004684:	4b86      	ldr	r3, [pc, #536]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10e      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b83      	ldr	r3, [pc, #524]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	4a82      	ldr	r2, [pc, #520]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	61d3      	str	r3, [r2, #28]
 800469c:	4b80      	ldr	r3, [pc, #512]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b7d      	ldr	r3, [pc, #500]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d118      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ba:	4b7a      	ldr	r3, [pc, #488]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a79      	ldr	r2, [pc, #484]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fc ffc9 	bl	800165c <HAL_GetTick>
 80046ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fc ffc5 	bl	800165c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b64      	cmp	r3, #100	@ 0x64
 80046da:	d901      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0db      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	4b70      	ldr	r3, [pc, #448]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ec:	4b6c      	ldr	r3, [pc, #432]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d07d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004706:	429a      	cmp	r2, r3
 8004708:	d076      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800470a:	4b65      	ldr	r3, [pc, #404]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	4b5e      	ldr	r3, [pc, #376]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	461a      	mov	r2, r3
 8004734:	2301      	movs	r3, #1
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800473c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	4b55      	ldr	r3, [pc, #340]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	461a      	mov	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800475c:	4a50      	ldr	r2, [pc, #320]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800475e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004760:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d045      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fc ff76 	bl	800165c <HAL_GetTick>
 8004770:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fc ff72 	bl	800165c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e086      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800478a:	2302      	movs	r3, #2
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
 8004796:	2302      	movs	r3, #2
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	61fb      	str	r3, [r7, #28]
  return result;
 80047a2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d102      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047b8:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	e007      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80047be:	2302      	movs	r3, #2
 80047c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	4b35      	ldr	r3, [pc, #212]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	2202      	movs	r2, #2
 80047d0:	613a      	str	r2, [r7, #16]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	fa92 f2a2 	rbit	r2, r2
 80047d8:	60fa      	str	r2, [r7, #12]
  return result;
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0bd      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047f8:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4926      	ldr	r1, [pc, #152]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004806:	4313      	orrs	r3, r2
 8004808:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800480a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4b23      	ldr	r3, [pc, #140]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4a22      	ldr	r2, [pc, #136]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482a:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	491a      	ldr	r1, [pc, #104]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004838:	4313      	orrs	r3, r2
 800483a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	f023 0210 	bic.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4912      	ldr	r1, [pc, #72]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004866:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	490b      	ldr	r1, [pc, #44]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004874:	4313      	orrs	r3, r2
 8004876:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004884:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	4903      	ldr	r1, [pc, #12]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3748      	adds	r7, #72	@ 0x48
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	10908100 	.word	0x10908100

080048ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e049      	b.n	8004952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fd80 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 fbb6 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e038      	b.n	80049e6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_TIM_Base_Start+0x98>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_TIM_Base_Start+0x48>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498e:	d009      	beq.n	80049a4 <HAL_TIM_Base_Start+0x48>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a18      	ldr	r2, [pc, #96]	@ (80049f8 <HAL_TIM_Base_Start+0x9c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIM_Base_Start+0x48>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <HAL_TIM_Base_Start+0xa0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d115      	bne.n	80049d0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <HAL_TIM_Base_Start+0xa4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d015      	beq.n	80049e2 <HAL_TIM_Base_Start+0x86>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049bc:	d011      	beq.n	80049e2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e008      	b.n	80049e2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	00010007 	.word	0x00010007

08004a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e049      	b.n	8004aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f841 	bl	8004ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fb0a 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_TIM_PWM_Start+0x24>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e03c      	b.n	8004b66 <HAL_TIM_PWM_Start+0x9e>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d109      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x3e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e02f      	b.n	8004b66 <HAL_TIM_PWM_Start+0x9e>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start+0x58>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e022      	b.n	8004b66 <HAL_TIM_PWM_Start+0x9e>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d109      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x72>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e015      	b.n	8004b66 <HAL_TIM_PWM_Start+0x9e>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x8c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e008      	b.n	8004b66 <HAL_TIM_PWM_Start+0x9e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e088      	b.n	8004c80 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start+0xb6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b7c:	e023      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xfe>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0xc6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b8c:	e01b      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xfe>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0xd6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	e013      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xfe>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xe6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bac:	e00b      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xfe>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xf6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bbc:	e003      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xfe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fe08 	bl	80057e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c88 <HAL_TIM_PWM_Start+0x1c0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x134>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c8c <HAL_TIM_PWM_Start+0x1c4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x134>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a28      	ldr	r2, [pc, #160]	@ (8004c90 <HAL_TIM_PWM_Start+0x1c8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x134>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a27      	ldr	r2, [pc, #156]	@ (8004c94 <HAL_TIM_PWM_Start+0x1cc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_PWM_Start+0x138>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_TIM_PWM_Start+0x13a>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004c88 <HAL_TIM_PWM_Start+0x1c0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x176>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d009      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x176>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c98 <HAL_TIM_PWM_Start+0x1d0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x176>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <HAL_TIM_PWM_Start+0x1c4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d115      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <HAL_TIM_PWM_Start+0x1d4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d015      	beq.n	8004c7c <HAL_TIM_PWM_Start+0x1b4>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c56:	d011      	beq.n	8004c7c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	e008      	b.n	8004c7c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e000      	b.n	8004c7e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	00010007 	.word	0x00010007

08004ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0ff      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b14      	cmp	r3, #20
 8004cca:	f200 80f0 	bhi.w	8004eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cce:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004eaf 	.word	0x08004eaf
 8004cdc:	08004eaf 	.word	0x08004eaf
 8004ce0:	08004eaf 	.word	0x08004eaf
 8004ce4:	08004d69 	.word	0x08004d69
 8004ce8:	08004eaf 	.word	0x08004eaf
 8004cec:	08004eaf 	.word	0x08004eaf
 8004cf0:	08004eaf 	.word	0x08004eaf
 8004cf4:	08004dab 	.word	0x08004dab
 8004cf8:	08004eaf 	.word	0x08004eaf
 8004cfc:	08004eaf 	.word	0x08004eaf
 8004d00:	08004eaf 	.word	0x08004eaf
 8004d04:	08004deb 	.word	0x08004deb
 8004d08:	08004eaf 	.word	0x08004eaf
 8004d0c:	08004eaf 	.word	0x08004eaf
 8004d10:	08004eaf 	.word	0x08004eaf
 8004d14:	08004e2d 	.word	0x08004e2d
 8004d18:	08004eaf 	.word	0x08004eaf
 8004d1c:	08004eaf 	.word	0x08004eaf
 8004d20:	08004eaf 	.word	0x08004eaf
 8004d24:	08004e6d 	.word	0x08004e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa18 	bl	8005164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6999      	ldr	r1, [r3, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	619a      	str	r2, [r3, #24]
      break;
 8004d66:	e0a5      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa7e 	bl	8005270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
      break;
 8004da8:	e084      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fadd 	bl	8005370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0208 	orr.w	r2, r2, #8
 8004dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0204 	bic.w	r2, r2, #4
 8004dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	61da      	str	r2, [r3, #28]
      break;
 8004de8:	e064      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fb3b 	bl	800546c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	021a      	lsls	r2, r3, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	61da      	str	r2, [r3, #28]
      break;
 8004e2a:	e043      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fb7e 	bl	8005534 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0208 	orr.w	r2, r2, #8
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e6a:	e023      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fbbc 	bl	80055f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004eac:	e002      	b.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop

08004ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0b6      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x18a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd8>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x176>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f38:	2b70      	cmp	r3, #112	@ 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xaa>
 8004f3c:	2b70      	cmp	r3, #112	@ 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f40:	2b60      	cmp	r3, #96	@ 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11e>
 8004f44:	2b60      	cmp	r3, #96	@ 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	2b50      	cmp	r3, #80	@ 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfe>
 8004f4c:	2b50      	cmp	r3, #80	@ 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13e>
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15e>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15e>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15e>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15e>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	f000 fc0f 	bl	80057a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	f000 fbf8 	bl	80057a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb6c 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	@ 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbc5 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fb8b 	bl	800570e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	@ 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fbb5 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fb4c 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fba5 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fb9c 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <TIM_Base_SetConfig+0xf4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0x28>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0x28>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <TIM_Base_SetConfig+0xf8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d108      	bne.n	8005096 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2d      	ldr	r2, [pc, #180]	@ (8005150 <TIM_Base_SetConfig+0xf4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0x6a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0x6a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005154 <TIM_Base_SetConfig+0xf8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0x6a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a29      	ldr	r2, [pc, #164]	@ (8005158 <TIM_Base_SetConfig+0xfc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0x6a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a28      	ldr	r2, [pc, #160]	@ (800515c <TIM_Base_SetConfig+0x100>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0x6a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a27      	ldr	r2, [pc, #156]	@ (8005160 <TIM_Base_SetConfig+0x104>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <TIM_Base_SetConfig+0xf4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <TIM_Base_SetConfig+0xfc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a13      	ldr	r2, [pc, #76]	@ (800515c <TIM_Base_SetConfig+0x100>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <TIM_Base_SetConfig+0x104>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d105      	bne.n	8005142 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]
  }
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40000400 	.word	0x40000400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f023 0201 	bic.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 0302 	bic.w	r3, r3, #2
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a28      	ldr	r2, [pc, #160]	@ (8005260 <TIM_OC1_SetConfig+0xfc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00b      	beq.n	80051dc <TIM_OC1_SetConfig+0x78>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <TIM_OC1_SetConfig+0x100>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <TIM_OC1_SetConfig+0x78>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a26      	ldr	r2, [pc, #152]	@ (8005268 <TIM_OC1_SetConfig+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_OC1_SetConfig+0x78>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a25      	ldr	r2, [pc, #148]	@ (800526c <TIM_OC1_SetConfig+0x108>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10c      	bne.n	80051f6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0308 	bic.w	r3, r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 0304 	bic.w	r3, r3, #4
 80051f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a19      	ldr	r2, [pc, #100]	@ (8005260 <TIM_OC1_SetConfig+0xfc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_OC1_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <TIM_OC1_SetConfig+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <TIM_OC1_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a17      	ldr	r2, [pc, #92]	@ (8005268 <TIM_OC1_SetConfig+0x104>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_OC1_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <TIM_OC1_SetConfig+0x108>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d111      	bne.n	800523a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800521c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0210 	bic.w	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0320 	bic.w	r3, r3, #32
 80052be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a24      	ldr	r2, [pc, #144]	@ (8005360 <TIM_OC2_SetConfig+0xf0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10d      	bne.n	80052f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <TIM_OC2_SetConfig+0xf0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_OC2_SetConfig+0xa0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005364 <TIM_OC2_SetConfig+0xf4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_OC2_SetConfig+0xa0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <TIM_OC2_SetConfig+0xf8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC2_SetConfig+0xa0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a18      	ldr	r2, [pc, #96]	@ (800536c <TIM_OC2_SetConfig+0xfc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d113      	bne.n	8005338 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005316:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800531e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a23      	ldr	r2, [pc, #140]	@ (800545c <TIM_OC3_SetConfig+0xec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10d      	bne.n	80053ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1a      	ldr	r2, [pc, #104]	@ (800545c <TIM_OC3_SetConfig+0xec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_OC3_SetConfig+0x9e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a19      	ldr	r2, [pc, #100]	@ (8005460 <TIM_OC3_SetConfig+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_OC3_SetConfig+0x9e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <TIM_OC3_SetConfig+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC3_SetConfig+0x9e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a17      	ldr	r2, [pc, #92]	@ (8005468 <TIM_OC3_SetConfig+0xf8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d113      	bne.n	8005436 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a16      	ldr	r2, [pc, #88]	@ (8005524 <TIM_OC4_SetConfig+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_OC4_SetConfig+0x7c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <TIM_OC4_SetConfig+0xbc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_OC4_SetConfig+0x7c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a14      	ldr	r2, [pc, #80]	@ (800552c <TIM_OC4_SetConfig+0xc0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC4_SetConfig+0x7c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <TIM_OC4_SetConfig+0xc4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d109      	bne.n	80054fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800

08005534 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005578:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <TIM_OC5_SetConfig+0xac>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_OC5_SetConfig+0x72>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a14      	ldr	r2, [pc, #80]	@ (80055e4 <TIM_OC5_SetConfig+0xb0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC5_SetConfig+0x72>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <TIM_OC5_SetConfig+0xb4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC5_SetConfig+0x72>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a12      	ldr	r2, [pc, #72]	@ (80055ec <TIM_OC5_SetConfig+0xb8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d109      	bne.n	80055ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	051b      	lsls	r3, r3, #20
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a16      	ldr	r2, [pc, #88]	@ (80056a0 <TIM_OC6_SetConfig+0xb0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_OC6_SetConfig+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <TIM_OC6_SetConfig+0xb4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_OC6_SetConfig+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a14      	ldr	r2, [pc, #80]	@ (80056a8 <TIM_OC6_SetConfig+0xb8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC6_SetConfig+0x74>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a13      	ldr	r2, [pc, #76]	@ (80056ac <TIM_OC6_SetConfig+0xbc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d109      	bne.n	8005678 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 030a 	bic.w	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f023 0210 	bic.w	r2, r3, #16
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800574a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	f043 0307 	orr.w	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	021a      	lsls	r2, r3, #8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2201      	movs	r2, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e054      	b.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a24      	ldr	r2, [pc, #144]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005878:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a17      	ldr	r2, [pc, #92]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d009      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a13      	ldr	r2, [pc, #76]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a11      	ldr	r2, [pc, #68]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10c      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40014000 	.word	0x40014000

0800590c <memset>:
 800590c:	4402      	add	r2, r0
 800590e:	4603      	mov	r3, r0
 8005910:	4293      	cmp	r3, r2
 8005912:	d100      	bne.n	8005916 <memset+0xa>
 8005914:	4770      	bx	lr
 8005916:	f803 1b01 	strb.w	r1, [r3], #1
 800591a:	e7f9      	b.n	8005910 <memset+0x4>

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4d0d      	ldr	r5, [pc, #52]	@ (8005954 <__libc_init_array+0x38>)
 8005920:	4c0d      	ldr	r4, [pc, #52]	@ (8005958 <__libc_init_array+0x3c>)
 8005922:	1b64      	subs	r4, r4, r5
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	2600      	movs	r6, #0
 8005928:	42a6      	cmp	r6, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	4d0b      	ldr	r5, [pc, #44]	@ (800595c <__libc_init_array+0x40>)
 800592e:	4c0c      	ldr	r4, [pc, #48]	@ (8005960 <__libc_init_array+0x44>)
 8005930:	f000 f818 	bl	8005964 <_init>
 8005934:	1b64      	subs	r4, r4, r5
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	2600      	movs	r6, #0
 800593a:	42a6      	cmp	r6, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f855 3b04 	ldr.w	r3, [r5], #4
 8005944:	4798      	blx	r3
 8005946:	3601      	adds	r6, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	f855 3b04 	ldr.w	r3, [r5], #4
 800594e:	4798      	blx	r3
 8005950:	3601      	adds	r6, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	080059ac 	.word	0x080059ac
 8005958:	080059ac 	.word	0x080059ac
 800595c:	080059ac 	.word	0x080059ac
 8005960:	080059b0 	.word	0x080059b0

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
