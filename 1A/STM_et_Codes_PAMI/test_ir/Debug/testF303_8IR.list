
testF303_8IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004588  08004588  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004588  08004588  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004590  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001ac  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd27  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6a  00000000  00000000  00015d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00017ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  000188b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3f2  00000000  00000000  0001939f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010df4  00000000  00000000  00034791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a80f4  00000000  00000000  00045585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ed679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b28  00000000  00000000  000ed6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000f11e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004538 	.word	0x08004538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004538 	.word	0x08004538

080001c8 <HAL_ADC_ConvCpltCallback>:
//	}
//}

uint16_t tblADC[8]; // Tableau pour stocker les valeurs des deux ADCs
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    static uint8_t channel_count_adc1 = 0; // Compteur pour les channels d'ADC1
    static uint8_t channel_count_adc2 = 0; // Compteur pour les channels d'ADC2

    if(hadc->Instance == ADC1) // Conversion complète pour ADC1
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80001d8:	d118      	bne.n	800020c <HAL_ADC_ConvCpltCallback+0x44>
    {
        tblADC[channel_count_adc1] = HAL_ADC_GetValue(&hadc1); // Stocke la valeur dans tblADC
 80001da:	481d      	ldr	r0, [pc, #116]	@ (8000250 <HAL_ADC_ConvCpltCallback+0x88>)
 80001dc:	f000 ff16 	bl	800100c <HAL_ADC_GetValue>
 80001e0:	4601      	mov	r1, r0
 80001e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000254 <HAL_ADC_ConvCpltCallback+0x8c>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	b289      	uxth	r1, r1
 80001ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000258 <HAL_ADC_ConvCpltCallback+0x90>)
 80001ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        channel_count_adc1++;
 80001f0:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <HAL_ADC_ConvCpltCallback+0x8c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b16      	ldr	r3, [pc, #88]	@ (8000254 <HAL_ADC_ConvCpltCallback+0x8c>)
 80001fa:	701a      	strb	r2, [r3, #0]
        if(channel_count_adc1 == 4) // Réinitialise après les 4 channels
 80001fc:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <HAL_ADC_ConvCpltCallback+0x8c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b04      	cmp	r3, #4
 8000202:	d120      	bne.n	8000246 <HAL_ADC_ConvCpltCallback+0x7e>
        {
            channel_count_adc1 = 0;
 8000204:	4b13      	ldr	r3, [pc, #76]	@ (8000254 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
        if(channel_count_adc2 == 4) // Réinitialise après les 4 channels
        {
            channel_count_adc2 = 0;
        }
    }
}
 800020a:	e01c      	b.n	8000246 <HAL_ADC_ConvCpltCallback+0x7e>
    else if(hadc->Instance == ADC2) // Conversion complète pour ADC2
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a12      	ldr	r2, [pc, #72]	@ (800025c <HAL_ADC_ConvCpltCallback+0x94>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d117      	bne.n	8000246 <HAL_ADC_ConvCpltCallback+0x7e>
        tblADC[4 + channel_count_adc2] = HAL_ADC_GetValue(&hadc2); // Stocke la valeur après les valeurs d'ADC1
 8000216:	4812      	ldr	r0, [pc, #72]	@ (8000260 <HAL_ADC_ConvCpltCallback+0x98>)
 8000218:	f000 fef8 	bl	800100c <HAL_ADC_GetValue>
 800021c:	4602      	mov	r2, r0
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3304      	adds	r3, #4
 8000224:	b291      	uxth	r1, r2
 8000226:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <HAL_ADC_ConvCpltCallback+0x90>)
 8000228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_count_adc2++;
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <HAL_ADC_ConvCpltCallback+0x9c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000236:	701a      	strb	r2, [r3, #0]
        if(channel_count_adc2 == 4) // Réinitialise après les 4 channels
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <HAL_ADC_ConvCpltCallback+0x9c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b04      	cmp	r3, #4
 800023e:	d102      	bne.n	8000246 <HAL_ADC_ConvCpltCallback+0x7e>
            channel_count_adc2 = 0;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	200001ac 	.word	0x200001ac
 8000258:	2000019c 	.word	0x2000019c
 800025c:	50000100 	.word	0x50000100
 8000260:	20000078 	.word	0x20000078
 8000264:	200001ad 	.word	0x200001ad

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fbe2 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f824 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f9ea 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000278:	f000 f9b8 	bl	80005ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800027c:	f000 f85a 	bl	8000334 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000280:	f000 f8f4 	bl	800046c <MX_ADC2_Init>
  MX_TIM6_Init();
 8000284:	f000 f97c 	bl	8000580 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000288:	2100      	movs	r1, #0
 800028a:	4809      	ldr	r0, [pc, #36]	@ (80002b0 <main+0x48>)
 800028c:	f001 f8c6 	bl	800141c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000290:	2100      	movs	r1, #0
 8000292:	4808      	ldr	r0, [pc, #32]	@ (80002b4 <main+0x4c>)
 8000294:	f001 f8c2 	bl	800141c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <main+0x48>)
 800029a:	f000 fdd7 	bl	8000e4c <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <main+0x4c>)
 80002a0:	f000 fdd4 	bl	8000e4c <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <main+0x50>)
 80002a6:	f003 fadb 	bl	8003860 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002aa:	bf00      	nop
 80002ac:	e7fd      	b.n	80002aa <main+0x42>
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028
 80002b4:	20000078 	.word	0x20000078
 80002b8:	200000c8 	.word	0x200000c8

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	@ 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 f907 	bl	80044de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fffe 	bl	80022f4 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fe:	f000 f9d5 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 f828 	bl	8003370 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000326:	f000 f9c1 	bl	80006ac <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	@ 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08a      	sub	sp, #40	@ 0x28
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000356:	4b44      	ldr	r3, [pc, #272]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000358:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800035c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800035e:	4b42      	ldr	r3, [pc, #264]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000360:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000366:	4b40      	ldr	r3, [pc, #256]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036c:	4b3e      	ldr	r3, [pc, #248]	@ (8000468 <MX_ADC1_Init+0x134>)
 800036e:	2201      	movs	r2, #1
 8000370:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000372:	4b3d      	ldr	r3, [pc, #244]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b3b      	ldr	r3, [pc, #236]	@ (8000468 <MX_ADC1_Init+0x134>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000380:	4b39      	ldr	r3, [pc, #228]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000388:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <MX_ADC1_Init+0x134>)
 800038a:	f44f 7250 	mov.w	r2, #832	@ 0x340
 800038e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000390:	4b35      	ldr	r3, [pc, #212]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000396:	4b34      	ldr	r3, [pc, #208]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000398:	2204      	movs	r2, #4
 800039a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800039c:	4b32      	ldr	r3, [pc, #200]	@ (8000468 <MX_ADC1_Init+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a4:	4b30      	ldr	r3, [pc, #192]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b6:	482c      	ldr	r0, [pc, #176]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003b8:	f000 fbb6 	bl	8000b28 <HAL_ADC_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003c2:	f000 f973 	bl	80006ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	4619      	mov	r1, r3
 80003d0:	4825      	ldr	r0, [pc, #148]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003d2:	f001 fb7b 	bl	8001acc <HAL_ADCEx_MultiModeConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003dc:	f000 f966 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	481a      	ldr	r0, [pc, #104]	@ (8000468 <MX_ADC1_Init+0x134>)
 80003fe:	f001 f8a7 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000408:	f000 f950 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800040c:	2302      	movs	r3, #2
 800040e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000410:	2302      	movs	r3, #2
 8000412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	4813      	ldr	r0, [pc, #76]	@ (8000468 <MX_ADC1_Init+0x134>)
 800041a:	f001 f899 	bl	8001550 <HAL_ADC_ConfigChannel>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000424:	f000 f942 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000428:	2303      	movs	r3, #3
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800042c:	2303      	movs	r3, #3
 800042e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4619      	mov	r1, r3
 8000434:	480c      	ldr	r0, [pc, #48]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000436:	f001 f88b 	bl	8001550 <HAL_ADC_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000440:	f000 f934 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000444:	2304      	movs	r3, #4
 8000446:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000448:	2304      	movs	r3, #4
 800044a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	@ (8000468 <MX_ADC1_Init+0x134>)
 8000452:	f001 f87d 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 800045c:	f000 f926 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	@ 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000028 	.word	0x20000028

0800046c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000482:	4b3d      	ldr	r3, [pc, #244]	@ (8000578 <MX_ADC2_Init+0x10c>)
 8000484:	4a3d      	ldr	r2, [pc, #244]	@ (800057c <MX_ADC2_Init+0x110>)
 8000486:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000488:	4b3b      	ldr	r3, [pc, #236]	@ (8000578 <MX_ADC2_Init+0x10c>)
 800048a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800048e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000490:	4b39      	ldr	r3, [pc, #228]	@ (8000578 <MX_ADC2_Init+0x10c>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000496:	4b38      	ldr	r3, [pc, #224]	@ (8000578 <MX_ADC2_Init+0x10c>)
 8000498:	2201      	movs	r2, #1
 800049a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800049c:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <MX_ADC2_Init+0x10c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004a2:	4b35      	ldr	r3, [pc, #212]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004aa:	4b33      	ldr	r3, [pc, #204]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80004b2:	4b31      	ldr	r3, [pc, #196]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004b4:	f44f 7250 	mov.w	r2, #832	@ 0x340
 80004b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004d4:	4b28      	ldr	r3, [pc, #160]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004da:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004e0:	4825      	ldr	r0, [pc, #148]	@ (8000578 <MX_ADC2_Init+0x10c>)
 80004e2:	f000 fb21 	bl	8000b28 <HAL_ADC_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80004ec:	f000 f8de 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000508:	463b      	mov	r3, r7
 800050a:	4619      	mov	r1, r3
 800050c:	481a      	ldr	r0, [pc, #104]	@ (8000578 <MX_ADC2_Init+0x10c>)
 800050e:	f001 f81f 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000518:	f000 f8c8 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800051c:	2302      	movs	r3, #2
 800051e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000520:	2302      	movs	r3, #2
 8000522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000524:	463b      	mov	r3, r7
 8000526:	4619      	mov	r1, r3
 8000528:	4813      	ldr	r0, [pc, #76]	@ (8000578 <MX_ADC2_Init+0x10c>)
 800052a:	f001 f811 	bl	8001550 <HAL_ADC_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000534:	f000 f8ba 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000538:	2303      	movs	r3, #3
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800053c:	2303      	movs	r3, #3
 800053e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <MX_ADC2_Init+0x10c>)
 8000546:	f001 f803 	bl	8001550 <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8000550:	f000 f8ac 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000554:	2304      	movs	r3, #4
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000558:	2304      	movs	r3, #4
 800055a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	@ (8000578 <MX_ADC2_Init+0x10c>)
 8000562:	f000 fff5 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 800056c:	f000 f89e 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000078 	.word	0x20000078
 800057c:	50000100 	.word	0x50000100

08000580 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_TIM6_Init+0x64>)
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <MX_TIM6_Init+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_TIM6_Init+0x64>)
 8000598:	2207      	movs	r2, #7
 800059a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_TIM6_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_TIM6_Init+0x64>)
 80005a4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_TIM6_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_TIM6_Init+0x64>)
 80005b2:	f003 f8fd 	bl	80037b0 <HAL_TIM_Base_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005bc:	f000 f876 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005c0:	2320      	movs	r3, #32
 80005c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_TIM6_Init+0x64>)
 80005ce:	f003 fb5b 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 f868 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	40001000 	.word	0x40001000

080005ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 80005f2:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <MX_USART2_UART_Init+0x5c>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 80005f8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_USART2_UART_Init+0x58>)
 8000630:	f003 fbb6 	bl	8003da0 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f837 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000114 	.word	0x20000114
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000658:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_GPIO_Init+0x5c>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	@ 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000720:	d136      	bne.n	8000790 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000722:	4b3b      	ldr	r3, [pc, #236]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a39      	ldr	r2, [pc, #228]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 800072a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800072c:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10b      	bne.n	800074c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000734:	4b37      	ldr	r3, [pc, #220]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a36      	ldr	r2, [pc, #216]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6153      	str	r3, [r2, #20]
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a30      	ldr	r2, [pc, #192]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 8000752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000764:	230f      	movs	r3, #15
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f001 fc49 	bl	8002010 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2012      	movs	r0, #18
 8000784:	f001 fc0d 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000788:	2012      	movs	r0, #18
 800078a:	f001 fc26 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800078e:	e03a      	b.n	8000806 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <HAL_ADC_MspInit+0x118>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d135      	bne.n	8000806 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800079a:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 80007a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <HAL_ADC_MspInit+0x110>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10b      	bne.n	80007c4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ce:	6153      	str	r3, [r2, #20]
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_ADC_MspInit+0x114>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007dc:	23f0      	movs	r3, #240	@ 0xf0
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f001 fc0d 	bl	8002010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2012      	movs	r0, #18
 80007fc:	f001 fbd1 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000800:	2012      	movs	r0, #18
 8000802:	f001 fbea 	bl	8001fda <HAL_NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3730      	adds	r7, #48	@ 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001b0 	.word	0x200001b0
 8000814:	40021000 	.word	0x40021000
 8000818:	50000100 	.word	0x50000100

0800081c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <HAL_TIM_Base_MspInit+0x44>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d113      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <HAL_TIM_Base_MspInit+0x48>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <HAL_TIM_Base_MspInit+0x48>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_TIM_Base_MspInit+0x48>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2036      	movs	r0, #54	@ 0x36
 800084c:	f001 fba9 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000850:	2036      	movs	r0, #54	@ 0x36
 8000852:	f001 fbc2 	bl	8001fda <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40001000 	.word	0x40001000
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a26      	ldr	r2, [pc, #152]	@ (8000920 <HAL_UART_MspInit+0xb8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d145      	bne.n	8000916 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a19      	ldr	r2, [pc, #100]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0xbc>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e4:	2307      	movs	r3, #7
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f001 fb8d 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f6:	2308      	movs	r3, #8
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0xc0>)
 8000912:	f001 fb7d 	bl	8002010 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40021000 	.word	0x40021000
 8000928:	48000400 	.word	0x48000400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f89d 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <ADC1_2_IRQHandler+0x14>)
 8000992:	f000 fb49 	bl	8001028 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000996:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <ADC1_2_IRQHandler+0x18>)
 8000998:	f000 fb46 	bl	8001028 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000028 	.word	0x20000028
 80009a4:	20000078 	.word	0x20000078

080009a8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM6_DAC1_IRQHandler+0x10>)
 80009ae:	f002 ffb3 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000c8 	.word	0x200000c8

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 fd6f 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fc29 	bl	8000268 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a24:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 8000a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a2c:	200001b8 	.word	0x200001b8

08000a30 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <CAN_RX0_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f001 faa1 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe32 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fab9 	bl	8001ff6 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f001 fa81 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200001b4 	.word	0x200001b4

08000ae8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200001b4 	.word	0x200001b4

08000b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09a      	sub	sp, #104	@ 0x68
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e172      	b.n	8000e2e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d176      	bne.n	8000c48 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d152      	bne.n	8000c08 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fdbf 	bl	8000700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d13b      	bne.n	8000c08 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f001 f8c5 	bl	8001d20 <ADC_Disable>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d12f      	bne.n	8000c08 <HAL_ADC_Init+0xe0>
 8000ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d12b      	bne.n	8000c08 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bb8:	f023 0302 	bic.w	r3, r3, #2
 8000bbc:	f043 0202 	orr.w	r2, r3, #2
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000bd2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000be2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000be4:	4b94      	ldr	r3, [pc, #592]	@ (8000e38 <HAL_ADC_Init+0x310>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a94      	ldr	r2, [pc, #592]	@ (8000e3c <HAL_ADC_Init+0x314>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	0c9a      	lsrs	r2, r3, #18
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bfa:	e002      	b.n	8000c02 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f9      	bne.n	8000bfc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c24:	d110      	bne.n	8000c48 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f023 0312 	bic.w	r3, r3, #18
 8000c2e:	f043 0210 	orr.w	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f040 80df 	bne.w	8000e14 <HAL_ADC_Init+0x2ec>
 8000c56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 80da 	bne.w	8000e14 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 80d2 	bne.w	8000e14 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c78:	f043 0202 	orr.w	r2, r3, #2
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c80:	4b6f      	ldr	r3, [pc, #444]	@ (8000e40 <HAL_ADC_Init+0x318>)
 8000c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c8c:	d102      	bne.n	8000c94 <HAL_ADC_Init+0x16c>
 8000c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8000e44 <HAL_ADC_Init+0x31c>)
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e002      	b.n	8000c9a <HAL_ADC_Init+0x172>
 8000c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c98:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d108      	bne.n	8000cba <HAL_ADC_Init+0x192>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_Init+0x192>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_ADC_Init+0x194>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d11c      	bne.n	8000cfa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d010      	beq.n	8000ce8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <HAL_ADC_Init+0x1ba>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Init+0x1ba>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <HAL_ADC_Init+0x1bc>
 8000ce2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d108      	bne.n	8000cfa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cf8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e5b      	ldrb	r3, [r3, #25]
 8000cfe:	035b      	lsls	r3, r3, #13
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d002      	beq.n	8000d0e <HAL_ADC_Init+0x1e6>
 8000d08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d0c:	e000      	b.n	8000d10 <HAL_ADC_Init+0x1e8>
 8000d0e:	2200      	movs	r2, #0
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d20:	4313      	orrs	r3, r2
 8000d22:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d11b      	bne.n	8000d66 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7e5b      	ldrb	r3, [r3, #25]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d109      	bne.n	8000d4a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	045a      	lsls	r2, r3, #17
 8000d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d40:	4313      	orrs	r3, r2
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d48:	e00d      	b.n	8000d66 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000d52:	f043 0220 	orr.w	r2, r3, #32
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f043 0201 	orr.w	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d007      	beq.n	8000d7e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	4313      	orrs	r3, r2
 8000d78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d114      	bne.n	8000db6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d9a:	f023 0302 	bic.w	r3, r3, #2
 8000d9e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7e1b      	ldrb	r3, [r3, #24]
 8000da4:	039a      	lsls	r2, r3, #14
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000db2:	4313      	orrs	r3, r2
 8000db4:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_ADC_Init+0x320>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10c      	bne.n	8000dec <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	f023 010f 	bic.w	r1, r3, #15
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dea:	e007      	b.n	8000dfc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020f 	bic.w	r2, r2, #15
 8000dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	f023 0303 	bic.w	r3, r3, #3
 8000e0a:	f043 0201 	orr.w	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e12:	e00a      	b.n	8000e2a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f023 0312 	bic.w	r3, r3, #18
 8000e1c:	f043 0210 	orr.w	r2, r3, #16
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3768      	adds	r7, #104	@ 0x68
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	50000300 	.word	0x50000300
 8000e44:	50000100 	.word	0x50000100
 8000e48:	fff0c007 	.word	0xfff0c007

08000e4c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 80c6 	bne.w	8000ff4 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Start_IT+0x2a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e0c1      	b.n	8000ffa <HAL_ADC_Start_IT+0x1ae>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 feea 	bl	8001c58 <ADC_Enable>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 80ad 	bne.w	8000fea <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ea4:	4b57      	ldr	r3, [pc, #348]	@ (8001004 <HAL_ADC_Start_IT+0x1b8>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_ADC_Start_IT+0x6e>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eb8:	d115      	bne.n	8000ee6 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d027      	beq.n	8000f24 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000edc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ee4:	e01e      	b.n	8000f24 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000efa:	d004      	beq.n	8000f06 <HAL_ADC_Start_IT+0xba>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a41      	ldr	r2, [pc, #260]	@ (8001008 <HAL_ADC_Start_IT+0x1bc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10e      	bne.n	8000f24 <HAL_ADC_Start_IT+0xd8>
 8000f06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f30:	d106      	bne.n	8000f40 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f023 0206 	bic.w	r2, r3, #6
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f3e:	e002      	b.n	8000f46 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	221c      	movs	r2, #28
 8000f54:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d110      	bne.n	8000f80 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0204 	bic.w	r2, r2, #4
 8000f6c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0208 	orr.w	r2, r2, #8
 8000f7c:	605a      	str	r2, [r3, #4]
          break;
 8000f7e:	e008      	b.n	8000f92 <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 020c 	orr.w	r2, r2, #12
 8000f8e:	605a      	str	r2, [r3, #4]
          break;
 8000f90:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d107      	bne.n	8000faa <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0210 	bic.w	r2, r2, #16
 8000fa8:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_ADC_Start_IT+0x1b8>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d010      	beq.n	8000fd8 <HAL_ADC_Start_IT+0x18c>
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <HAL_ADC_Start_IT+0x1b8>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_ADC_Start_IT+0x18c>
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_ADC_Start_IT+0x1b8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	d004      	beq.n	8000fd8 <HAL_ADC_Start_IT+0x18c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0204 	orr.w	r2, r2, #4
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e006      	b.n	8000ff8 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000ff2:	e001      	b.n	8000ff8 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	50000300 	.word	0x50000300
 8001008:	50000100 	.word	0x50000100

0800100c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_ADC_IRQHandler+0x38>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d076      	beq.n	8001158 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d071      	beq.n	8001158 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b00      	cmp	r3, #0
 800107e:	d105      	bne.n	800108c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800108c:	4b82      	ldr	r3, [pc, #520]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	2b00      	cmp	r3, #0
 8001096:	d010      	beq.n	80010ba <HAL_ADC_IRQHandler+0x92>
 8001098:	4b7f      	ldr	r3, [pc, #508]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d00a      	beq.n	80010ba <HAL_ADC_IRQHandler+0x92>
 80010a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d004      	beq.n	80010ba <HAL_ADC_IRQHandler+0x92>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010b8:	d104      	bne.n	80010c4 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e003      	b.n	80010cc <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d137      	bne.n	800114a <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d132      	bne.n	800114a <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d02d      	beq.n	800114a <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11a      	bne.n	8001132 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020c 	bic.w	r2, r2, #12
 800110a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d112      	bne.n	800114a <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001130:	e00b      	b.n	800114a <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff f83c 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	220c      	movs	r2, #12
 8001156:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <HAL_ADC_IRQHandler+0x144>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a5 	beq.w	80012c2 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809f 	beq.w	80012c2 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001190:	4b41      	ldr	r3, [pc, #260]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2b00      	cmp	r3, #0
 800119a:	d010      	beq.n	80011be <HAL_ADC_IRQHandler+0x196>
 800119c:	4b3e      	ldr	r3, [pc, #248]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	d00a      	beq.n	80011be <HAL_ADC_IRQHandler+0x196>
 80011a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d004      	beq.n	80011be <HAL_ADC_IRQHandler+0x196>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011bc:	d104      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	e003      	b.n	80011d0 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d16a      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00b      	beq.n	8001200 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d15e      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d159      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d054      	beq.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	2b00      	cmp	r3, #0
 8001214:	d010      	beq.n	8001238 <HAL_ADC_IRQHandler+0x210>
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b06      	cmp	r3, #6
 8001220:	d00a      	beq.n	8001238 <HAL_ADC_IRQHandler+0x210>
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_ADC_IRQHandler+0x270>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	2b07      	cmp	r3, #7
 800122c:	d004      	beq.n	8001238 <HAL_ADC_IRQHandler+0x210>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001236:	d104      	bne.n	8001242 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e003      	b.n	800124a <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001242:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d12f      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11c      	bne.n	800129c <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001270:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
 8001296:	e00d      	b.n	80012b4 <HAL_ADC_IRQHandler+0x28c>
 8001298:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f043 0210 	orr.w	r2, r3, #16
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f923 	bl	8001500 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2260      	movs	r2, #96	@ 0x60
 80012c0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d011      	beq.n	80012f0 <HAL_ADC_IRQHandler+0x2c8>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00c      	beq.n	80012f0 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fc0c 	bl	8000b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d012      	beq.n	8001320 <HAL_ADC_IRQHandler+0x2f8>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00d      	beq.n	8001320 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f909 	bl	8001528 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800131e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <HAL_ADC_IRQHandler+0x328>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00d      	beq.n	8001350 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f8fb 	bl	800153c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d03b      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x3aa>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	d036      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001368:	2b01      	cmp	r3, #1
 800136a:	d102      	bne.n	8001372 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	e019      	b.n	80013a6 <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <HAL_ADC_IRQHandler+0x3f0>)
 8001374:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d10a      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e007      	b.n	80013a6 <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10e      	bne.n	80013ca <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fba5 	bl	8000b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2210      	movs	r2, #16
 80013d0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d018      	beq.n	800140e <HAL_ADC_IRQHandler+0x3e6>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f043 0208 	orr.w	r2, r3, #8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f883 	bl	8001514 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	50000300 	.word	0x50000300

0800141c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_ADCEx_Calibration_Start+0x1c>
 8001434:	2302      	movs	r3, #2
 8001436:	e05f      	b.n	80014f8 <HAL_ADCEx_Calibration_Start+0xdc>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fc6d 	bl	8001d20 <ADC_Disable>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d14e      	bne.n	80014ee <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001464:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d107      	bne.n	800147c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800147a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800148a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800148c:	f7ff fb2c 	bl	8000ae8 <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001492:	e01c      	b.n	80014ce <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001494:	f7ff fb28 	bl	8000ae8 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d915      	bls.n	80014ce <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014b0:	d10d      	bne.n	80014ce <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f023 0312 	bic.w	r3, r3, #18
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e014      	b.n	80014f8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014dc:	d0da      	beq.n	8001494 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001550:	b480      	push	{r7}
 8001552:	b09b      	sub	sp, #108	@ 0x6c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x22>
 800156e:	2302      	movs	r3, #2
 8001570:	e2a1      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x566>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	f040 8285 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d81c      	bhi.n	80015cc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	461a      	mov	r2, r3
 80015a6:	231f      	movs	r3, #31
 80015a8:	4093      	lsls	r3, r2
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4019      	ands	r1, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ca:	e063      	b.n	8001694 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d81e      	bhi.n	8001612 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	3b1e      	subs	r3, #30
 80015e8:	221f      	movs	r2, #31
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	4019      	ands	r1, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3b1e      	subs	r3, #30
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001610:	e040      	b.n	8001694 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b0e      	cmp	r3, #14
 8001618:	d81e      	bhi.n	8001658 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	3b3c      	subs	r3, #60	@ 0x3c
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	4019      	ands	r1, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	3b3c      	subs	r3, #60	@ 0x3c
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
 8001656:	e01d      	b.n	8001694 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	3b5a      	subs	r3, #90	@ 0x5a
 800166c:	221f      	movs	r2, #31
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	4019      	ands	r1, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	3b5a      	subs	r3, #90	@ 0x5a
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 80e5 	bne.w	800186e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d91c      	bls.n	80016e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6999      	ldr	r1, [r3, #24]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4019      	ands	r1, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6898      	ldr	r0, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	619a      	str	r2, [r3, #24]
 80016e4:	e019      	b.n	800171a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6959      	ldr	r1, [r3, #20]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	2207      	movs	r2, #7
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4019      	ands	r1, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6898      	ldr	r0, [r3, #8]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	3b01      	subs	r3, #1
 8001738:	2b03      	cmp	r3, #3
 800173a:	d84f      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x28c>
 800173c:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <HAL_ADC_ConfigChannel+0x1f4>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	08001777 	.word	0x08001777
 800174c:	08001799 	.word	0x08001799
 8001750:	080017bb 	.word	0x080017bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800175a:	4b9c      	ldr	r3, [pc, #624]	@ (80019cc <HAL_ADC_ConfigChannel+0x47c>)
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	0691      	lsls	r1, r2, #26
 8001764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001766:	430a      	orrs	r2, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001772:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001774:	e07b      	b.n	800186e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800177c:	4b93      	ldr	r3, [pc, #588]	@ (80019cc <HAL_ADC_ConfigChannel+0x47c>)
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	0691      	lsls	r1, r2, #26
 8001786:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001788:	430a      	orrs	r2, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001794:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001796:	e06a      	b.n	800186e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800179e:	4b8b      	ldr	r3, [pc, #556]	@ (80019cc <HAL_ADC_ConfigChannel+0x47c>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	0691      	lsls	r1, r2, #26
 80017a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017aa:	430a      	orrs	r2, r1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80017b6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017b8:	e059      	b.n	800186e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80017c0:	4b82      	ldr	r3, [pc, #520]	@ (80019cc <HAL_ADC_ConfigChannel+0x47c>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	0691      	lsls	r1, r2, #26
 80017ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017cc:	430a      	orrs	r2, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80017d8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017da:	e048      	b.n	800186e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	069b      	lsls	r3, r3, #26
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d107      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	069b      	lsls	r3, r3, #26
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001822:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800182a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	069b      	lsls	r3, r3, #26
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001846:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800184e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	429a      	cmp	r2, r3
 800185a:	d107      	bne.n	800186c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800186a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800186c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_ADC_ConfigChannel+0x33e>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x33e>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_ADC_ConfigChannel+0x340>
 800188e:	2300      	movs	r3, #0
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 810a 	bne.w	8001aaa <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d00f      	beq.n	80018be <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43da      	mvns	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	400a      	ands	r2, r1
 80018b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80018bc:	e049      	b.n	8001952 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d91c      	bls.n	800191a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6999      	ldr	r1, [r3, #24]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1b      	subs	r3, #27
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	3b1b      	subs	r3, #27
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	619a      	str	r2, [r3, #24]
 8001918:	e01b      	b.n	8001952 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6959      	ldr	r1, [r3, #20]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	2207      	movs	r2, #7
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	4019      	ands	r1, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6898      	ldr	r0, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	fa00 f203 	lsl.w	r2, r0, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001952:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_ADC_ConfigChannel+0x480>)
 8001954:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d105      	bne.n	800196a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800195e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800196e:	2b11      	cmp	r3, #17
 8001970:	d105      	bne.n	800197e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001982:	2b12      	cmp	r3, #18
 8001984:	f040 8091 	bne.w	8001aaa <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 808a 	bne.w	8001aaa <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800199e:	d102      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x456>
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_ADC_ConfigChannel+0x484>)
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e002      	b.n	80019ac <HAL_ADC_ConfigChannel+0x45c>
 80019a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10e      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x488>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x488>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e006      	b.n	80019da <HAL_ADC_ConfigChannel+0x48a>
 80019cc:	83fff000 	.word	0x83fff000
 80019d0:	50000300 	.word	0x50000300
 80019d4:	50000100 	.word	0x50000100
 80019d8:	2300      	movs	r3, #0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d150      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019de:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d010      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4b0>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4b0>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x4b2>
 8001a00:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d13c      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d11d      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x4fa>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a16:	d118      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a22:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x574>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x578>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9a      	lsrs	r2, r3, #18
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a3a:	e002      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a48:	e02e      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b11      	cmp	r3, #17
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x51a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a68:	e01e      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d11a      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a7c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a7e:	e013      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001a92:	e00a      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aa8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	376c      	adds	r7, #108	@ 0x6c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	431bde83 	.word	0x431bde83

08001acc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b099      	sub	sp, #100	@ 0x64
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae4:	d102      	bne.n	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	e002      	b.n	8001af2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001aec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001af0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0a2      	b.n	8001c42 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e09b      	b.n	8001c42 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d17f      	bne.n	8001c20 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d179      	bne.n	8001c20 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2c:	4b49      	ldr	r3, [pc, #292]	@ (8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d040      	beq.n	8001bba <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b4a:	035b      	lsls	r3, r3, #13
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d15c      	bne.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001b96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d14b      	bne.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6811      	ldr	r1, [r2, #0]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	6892      	ldr	r2, [r2, #8]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bb8:	e03c      	b.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d108      	bne.n	8001be6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001be6:	2300      	movs	r3, #0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d123      	bne.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d112      	bne.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001c16:	f023 030f 	bic.w	r3, r3, #15
 8001c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1e:	e009      	b.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001c32:	e000      	b.n	8001c36 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001c42:	4618      	mov	r0, r3
 8001c44:	3764      	adds	r7, #100	@ 0x64
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	50000100 	.word	0x50000100
 8001c54:	50000300 	.word	0x50000300

08001c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <ADC_Enable+0x2c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <ADC_Enable+0x2c>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <ADC_Enable+0x2e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d143      	bne.n	8001d12 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <ADC_Enable+0xc4>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e02f      	b.n	8001d14 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cc4:	f7fe ff10 	bl	8000ae8 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cca:	e01b      	b.n	8001d04 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ccc:	f7fe ff0c 	bl	8000ae8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d914      	bls.n	8001d04 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d00d      	beq.n	8001d04 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f043 0210 	orr.w	r2, r3, #16
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e007      	b.n	8001d14 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d1dc      	bne.n	8001ccc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	8000003f 	.word	0x8000003f

08001d20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <ADC_Disable+0x2c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <ADC_Disable+0x2c>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <ADC_Disable+0x2e>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d047      	beq.n	8001de2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030d 	and.w	r3, r3, #13
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10f      	bne.n	8001d80 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0202 	orr.w	r2, r2, #2
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2203      	movs	r2, #3
 8001d76:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d78:	f7fe feb6 	bl	8000ae8 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d7e:	e029      	b.n	8001dd4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f043 0210 	orr.w	r2, r3, #16
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e023      	b.n	8001de4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d9c:	f7fe fea4 	bl	8000ae8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d914      	bls.n	8001dd4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10d      	bne.n	8001dd4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e007      	b.n	8001de4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d0dc      	beq.n	8001d9c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201e:	e14e      	b.n	80022be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8140 	beq.w	80022b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <HAL_GPIO_Init+0x40>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d130      	bne.n	80020b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002086:	2201      	movs	r2, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 0201 	and.w	r2, r3, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d017      	beq.n	80020ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d123      	bne.n	8002142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	6939      	ldr	r1, [r7, #16]
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 809a 	beq.w	80022b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002184:	4b55      	ldr	r3, [pc, #340]	@ (80022dc <HAL_GPIO_Init+0x2cc>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a54      	ldr	r2, [pc, #336]	@ (80022dc <HAL_GPIO_Init+0x2cc>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <HAL_GPIO_Init+0x2cc>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800219c:	4a50      	ldr	r2, [pc, #320]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021c6:	d013      	beq.n	80021f0 <HAL_GPIO_Init+0x1e0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <HAL_GPIO_Init+0x2d4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00d      	beq.n	80021ec <HAL_GPIO_Init+0x1dc>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a45      	ldr	r2, [pc, #276]	@ (80022e8 <HAL_GPIO_Init+0x2d8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a44      	ldr	r2, [pc, #272]	@ (80022ec <HAL_GPIO_Init+0x2dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_GPIO_Init+0x1d4>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e006      	b.n	80021f2 <HAL_GPIO_Init+0x1e2>
 80021e4:	2305      	movs	r3, #5
 80021e6:	e004      	b.n	80021f2 <HAL_GPIO_Init+0x1e2>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e002      	b.n	80021f2 <HAL_GPIO_Init+0x1e2>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_GPIO_Init+0x1e2>
 80021f0:	2300      	movs	r3, #0
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	f002 0203 	and.w	r2, r2, #3
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	4093      	lsls	r3, r2
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002202:	4937      	ldr	r1, [pc, #220]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002234:	4a2e      	ldr	r2, [pc, #184]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225e:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002264:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022b2:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x2e0>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3301      	adds	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f aea9 	bne.w	8002020 <HAL_GPIO_Init+0x10>
  }
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40010000 	.word	0x40010000
 80022e4:	48000400 	.word	0x48000400
 80022e8:	48000800 	.word	0x48000800
 80022ec:	48000c00 	.word	0x48000c00
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002304:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f001 b823 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 817d 	beq.w	800262a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002330:	4bbc      	ldr	r3, [pc, #752]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4bb9      	ldr	r3, [pc, #740]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d15c      	bne.n	8002402 <HAL_RCC_OscConfig+0x10e>
 8002348:	4bb6      	ldr	r3, [pc, #728]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d155      	bne.n	8002402 <HAL_RCC_OscConfig+0x10e>
 8002356:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x94>
 8002382:	4ba8      	ldr	r3, [pc, #672]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e015      	b.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 8002388:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800238c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800239c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80023b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80023bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80023c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 811f 	beq.w	8002628 <HAL_RCC_OscConfig+0x334>
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8116 	bne.w	8002628 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f000 bfaf 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x12e>
 8002414:	4b83      	ldr	r3, [pc, #524]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a82      	ldr	r2, [pc, #520]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e036      	b.n	8002490 <HAL_RCC_OscConfig+0x19c>
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x158>
 8002432:	4b7c      	ldr	r3, [pc, #496]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7b      	ldr	r2, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b79      	ldr	r3, [pc, #484]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a78      	ldr	r2, [pc, #480]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e021      	b.n	8002490 <HAL_RCC_OscConfig+0x19c>
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x184>
 800245e:	4b71      	ldr	r3, [pc, #452]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a70      	ldr	r2, [pc, #448]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6e      	ldr	r3, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6d      	ldr	r2, [pc, #436]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x19c>
 8002478:	4b6a      	ldr	r3, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a69      	ldr	r2, [pc, #420]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b67      	ldr	r3, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a66      	ldr	r2, [pc, #408]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002490:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f023 020f 	bic.w	r2, r3, #15
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	495f      	ldr	r1, [pc, #380]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d059      	beq.n	800256e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb15 	bl	8000ae8 <HAL_GetTick>
 80024be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fb10 	bl	8000ae8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	@ 0x64
 80024d2:	d902      	bls.n	80024da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	f000 bf43 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 80024da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024de:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80024ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x218>
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	e015      	b.n	8002538 <HAL_RCC_OscConfig+0x244>
 800250c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002510:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002524:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002528:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002534:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800253c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002540:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800254c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f042 0220 	orr.w	r2, r2, #32
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f002 021f 	and.w	r2, r2, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ab      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1d0>
 800256c:	e05d      	b.n	800262a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fabb 	bl	8000ae8 <HAL_GetTick>
 8002572:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fab6 	bl	8000ae8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	@ 0x64
 8002586:	d902      	bls.n	800258e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	f000 bee9 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 800258e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002592:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80025a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2cc>
 80025ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x2f8>
 80025c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_RCC_OscConfig+0x330>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025f0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80025f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002600:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ab      	bne.n	8002578 <HAL_RCC_OscConfig+0x284>
 8002620:	e003      	b.n	800262a <HAL_RCC_OscConfig+0x336>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 817d 	beq.w	800293a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002640:	4ba6      	ldr	r3, [pc, #664]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800264c:	4ba3      	ldr	r3, [pc, #652]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d172      	bne.n	800273e <HAL_RCC_OscConfig+0x44a>
 8002658:	4ba0      	ldr	r3, [pc, #640]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d16c      	bne.n	800273e <HAL_RCC_OscConfig+0x44a>
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002676:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_RCC_OscConfig+0x3a0>
 800268e:	4b93      	ldr	r3, [pc, #588]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	e013      	b.n	80026bc <HAL_RCC_OscConfig+0x3c8>
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80026ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026b8:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	2202      	movs	r2, #2
 80026be:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80026c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80026ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f002 021f 	and.w	r2, r2, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCC_OscConfig+0x410>
 80026ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f000 be2e 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b75      	ldr	r3, [pc, #468]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	21f8      	movs	r1, #248	@ 0xf8
 800271a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002722:	fa91 f1a1 	rbit	r1, r1
 8002726:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800272a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800272e:	fab1 f181 	clz	r1, r1
 8002732:	b2c9      	uxtb	r1, r1
 8002734:	408b      	lsls	r3, r1
 8002736:	4969      	ldr	r1, [pc, #420]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273c:	e0fd      	b.n	800293a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8088 	beq.w	8002860 <HAL_RCC_OscConfig+0x56c>
 8002750:	2301      	movs	r3, #1
 8002752:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002762:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002770:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	461a      	mov	r2, r3
 8002778:	2301      	movs	r3, #1
 800277a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe f9b4 	bl	8000ae8 <HAL_GetTick>
 8002780:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe f9af 	bl	8000ae8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	f000 bde2 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80027ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0x4d8>
 80027c6:	4b45      	ldr	r3, [pc, #276]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x500>
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80027f0:	4b3a      	ldr	r3, [pc, #232]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80027fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027fe:	fa92 f2a2 	rbit	r2, r2
 8002802:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002806:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0af      	beq.n	8002786 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	21f8      	movs	r1, #248	@ 0xf8
 800283c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002844:	fa91 f1a1 	rbit	r1, r1
 8002848:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800284c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002850:	fab1 f181 	clz	r1, r1
 8002854:	b2c9      	uxtb	r1, r1
 8002856:	408b      	lsls	r3, r1
 8002858:	4920      	ldr	r1, [pc, #128]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
 800285e:	e06c      	b.n	800293a <HAL_RCC_OscConfig+0x646>
 8002860:	2301      	movs	r3, #1
 8002862:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002872:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2300      	movs	r3, #0
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe f92c 	bl	8000ae8 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe f927 	bl	8000ae8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f000 bd5a 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80028be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d104      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5ec>
 80028d6:	4b01      	ldr	r3, [pc, #4]	@ (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e015      	b.n	8002908 <HAL_RCC_OscConfig+0x614>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028f2:	2302      	movs	r3, #2
 80028f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002904:	4bc8      	ldr	r3, [pc, #800]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2202      	movs	r2, #2
 800290a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800290e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002912:	fa92 f2a2 	rbit	r2, r2
 8002916:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800291a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0220 	orr.w	r2, r2, #32
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ad      	bne.n	8002896 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8110 	beq.w	8002b70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d079      	beq.n	8002a54 <HAL_RCC_OscConfig+0x760>
 8002960:	2301      	movs	r3, #1
 8002962:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	4bab      	ldr	r3, [pc, #684]	@ (8002c2c <HAL_RCC_OscConfig+0x938>)
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	461a      	mov	r2, r3
 8002986:	2301      	movs	r3, #1
 8002988:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe f8ad 	bl	8000ae8 <HAL_GetTick>
 800298e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe f8a8 	bl	8000ae8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d902      	bls.n	80029aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	f000 bcdb 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029c4:	2202      	movs	r2, #2
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a10:	2102      	movs	r1, #2
 8002a12:	6019      	str	r1, [r3, #0]
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f1a3 	rbit	r1, r3
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a2a:	6019      	str	r1, [r3, #0]
  return result;
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0a0      	beq.n	8002994 <HAL_RCC_OscConfig+0x6a0>
 8002a52:	e08d      	b.n	8002b70 <HAL_RCC_OscConfig+0x87c>
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a76:	601a      	str	r2, [r3, #0]
  return result;
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b68      	ldr	r3, [pc, #416]	@ (8002c2c <HAL_RCC_OscConfig+0x938>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	2300      	movs	r3, #0
 8002a94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe f827 	bl	8000ae8 <HAL_GetTick>
 8002a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe f822 	bl	8000ae8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	f000 bc55 	b.w	8003360 <HAL_RCC_OscConfig+0x106c>
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	fa93 f2a3 	rbit	r2, r3
 8002af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b22:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b2e:	2102      	movs	r1, #2
 8002b30:	6019      	str	r1, [r3, #0]
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f1a3 	rbit	r1, r3
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b48:	6019      	str	r1, [r3, #0]
  return result;
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d197      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 81a1 	beq.w	8002ec8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8c:	4b26      	ldr	r3, [pc, #152]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	61d3      	str	r3, [r2, #28]
 8002ba4:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002bbe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_RCC_OscConfig+0x93c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd2:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_RCC_OscConfig+0x93c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_RCC_OscConfig+0x93c>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7fd ff83 	bl	8000ae8 <HAL_GetTick>
 8002be2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	e009      	b.n	8002bfc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7fd ff7e 	bl	8000ae8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	@ 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e3b1      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <HAL_RCC_OscConfig+0x93c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ef      	beq.n	8002be8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x940>
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a02      	ldr	r2, [pc, #8]	@ (8002c28 <HAL_RCC_OscConfig+0x934>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	e03c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x9ac>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	10908120 	.word	0x10908120
 8002c30:	40007000 	.word	0x40007000
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x96a>
 8002c44:	4bc1      	ldr	r3, [pc, #772]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4ac0      	ldr	r2, [pc, #768]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	4bbe      	ldr	r3, [pc, #760]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4abd      	ldr	r2, [pc, #756]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	e020      	b.n	8002ca0 <HAL_RCC_OscConfig+0x9ac>
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x994>
 8002c6e:	4bb7      	ldr	r3, [pc, #732]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4ab6      	ldr	r2, [pc, #728]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	4bb4      	ldr	r3, [pc, #720]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4ab3      	ldr	r2, [pc, #716]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x9ac>
 8002c88:	4bb0      	ldr	r3, [pc, #704]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4aaf      	ldr	r2, [pc, #700]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	4bad      	ldr	r3, [pc, #692]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4aac      	ldr	r2, [pc, #688]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	f023 0304 	bic.w	r3, r3, #4
 8002c9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8081 	beq.w	8002db4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fd ff19 	bl	8000ae8 <HAL_GetTick>
 8002cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fd ff14 	bl	8000ae8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e345      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d00:	2202      	movs	r2, #2
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d1a:	601a      	str	r2, [r3, #0]
  return result;
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0xa4c>
 8002d3a:	4b84      	ldr	r3, [pc, #528]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	e013      	b.n	8002d68 <HAL_RCC_OscConfig+0xa74>
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	4b79      	ldr	r3, [pc, #484]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d6c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d70:	2102      	movs	r1, #2
 8002d72:	6011      	str	r1, [r2, #0]
 8002d74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d78:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fa92 f1a2 	rbit	r1, r2
 8002d82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d86:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d8a:	6011      	str	r1, [r2, #0]
  return result;
 8002d8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d90:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d084      	beq.n	8002cbc <HAL_RCC_OscConfig+0x9c8>
 8002db2:	e07f      	b.n	8002eb4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fd fe98 	bl	8000ae8 <HAL_GetTick>
 8002db8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd fe93 	bl	8000ae8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e2c4      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dde:	2202      	movs	r2, #2
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e1c:	601a      	str	r2, [r3, #0]
  return result;
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_OscConfig+0xb4e>
 8002e3c:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	e013      	b.n	8002e6a <HAL_RCC_OscConfig+0xb76>
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e6e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e72:	2102      	movs	r1, #2
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e7a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	fa92 f1a2 	rbit	r1, r2
 8002e84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e88:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e92:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f002 021f 	and.w	r2, r2, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d184      	bne.n	8002dbe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8242 	beq.w	800335e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eda:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <HAL_RCC_OscConfig+0xc58>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	f000 8213 	beq.w	800330e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 8162 	bne.w	80031be <HAL_RCC_OscConfig+0xeca>
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f1e:	601a      	str	r2, [r3, #0]
  return result;
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fd fdd2 	bl	8000ae8 <HAL_GetTick>
 8002f44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	e00c      	b.n	8002f64 <HAL_RCC_OscConfig+0xc70>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd fdca 	bl	8000ae8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1fd      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
 8002f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f88:	601a      	str	r2, [r3, #0]
  return result;
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0xcba>
 8002fa8:	4bb0      	ldr	r3, [pc, #704]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e027      	b.n	8002ffe <HAL_RCC_OscConfig+0xd0a>
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003002:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003006:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800300a:	6011      	str	r1, [r2, #0]
 800300c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003010:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fa92 f1a2 	rbit	r1, r2
 800301a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003022:	6011      	str	r1, [r2, #0]
  return result;
 8003024:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003028:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d182      	bne.n	8002f50 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	430b      	orrs	r3, r1
 800306c:	497f      	ldr	r1, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800307a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2301      	movs	r3, #1
 80030b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fd16 	bl	8000ae8 <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fd fd11 	bl	8000ae8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e144      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003104:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_RCC_OscConfig+0xe2c>
 800311a:	4b54      	ldr	r3, [pc, #336]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e027      	b.n	8003170 <HAL_RCC_OscConfig+0xe7c>
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003128:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003132:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800314e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	4b3f      	ldr	r3, [pc, #252]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003174:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003178:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003182:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fa92 f1a2 	rbit	r1, r2
 800318c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003190:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003194:	6011      	str	r1, [r2, #0]
  return result;
 8003196:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f002 021f 	and.w	r2, r2, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d082      	beq.n	80030c2 <HAL_RCC_OscConfig+0xdce>
 80031bc:	e0cf      	b.n	800335e <HAL_RCC_OscConfig+0x106a>
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80031c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031e2:	601a      	str	r2, [r3, #0]
  return result;
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fd fc70 	bl	8000ae8 <HAL_GetTick>
 8003208:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	e009      	b.n	8003222 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fd fc6b 	bl	8000ae8 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e09e      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800322a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003242:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003250:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d104      	bne.n	8003270 <HAL_RCC_OscConfig+0xf7c>
 8003266:	4b01      	ldr	r3, [pc, #4]	@ (800326c <HAL_RCC_OscConfig+0xf78>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e029      	b.n	80032c0 <HAL_RCC_OscConfig+0xfcc>
 800326c:	40021000 	.word	0x40021000
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003278:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800329e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <HAL_RCC_OscConfig+0x1078>)
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032c4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80032c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032d2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	fa92 f1a2 	rbit	r1, r2
 80032dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032e4:	6011      	str	r1, [r2, #0]
  return result;
 80032e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f002 021f 	and.w	r2, r2, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f202 	lsl.w	r2, r1, r2
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d180      	bne.n	800320e <HAL_RCC_OscConfig+0xf1a>
 800330c:	e027      	b.n	800335e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003312:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01e      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_OscConfig+0x1078>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800332a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800332e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	429a      	cmp	r2, r3
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003342:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b09e      	sub	sp, #120	@ 0x78
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e162      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b90      	ldr	r3, [pc, #576]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b8d      	ldr	r3, [pc, #564]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	498b      	ldr	r1, [pc, #556]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b89      	ldr	r3, [pc, #548]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e14a      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b82      	ldr	r3, [pc, #520]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	497f      	ldr	r1, [pc, #508]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80dc 	beq.w	800359c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d13c      	bne.n	8003466 <HAL_RCC_ClockConfig+0xf6>
 80033ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80033fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_ClockConfig+0xa6>
 8003410:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	e00f      	b.n	8003436 <HAL_RCC_ClockConfig+0xc6>
 8003416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800341a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	667b      	str	r3, [r7, #100]	@ 0x64
 8003424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003428:	663b      	str	r3, [r7, #96]	@ 0x60
 800342a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003432:	4b67      	ldr	r3, [pc, #412]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800343a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800343c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800343e:	fa92 f2a2 	rbit	r2, r2
 8003442:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003446:	fab2 f282 	clz	r2, r2
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f042 0220 	orr.w	r2, r2, #32
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f002 021f 	and.w	r2, r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d17b      	bne.n	800355a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0f3      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d13c      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x178>
 800346e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003472:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800347c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_RCC_ClockConfig+0x128>
 8003492:	4b4f      	ldr	r3, [pc, #316]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e00f      	b.n	80034b8 <HAL_RCC_ClockConfig+0x148>
 8003498:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800349c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b4:	4b46      	ldr	r3, [pc, #280]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034bc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80034c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d13a      	bne.n	800355a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b2      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
 80034e8:	2302      	movs	r3, #2
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_ClockConfig+0x1a0>
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e00d      	b.n	800352c <HAL_RCC_ClockConfig+0x1bc>
 8003510:	2302      	movs	r3, #2
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	2302      	movs	r3, #2
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	4b29      	ldr	r3, [pc, #164]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2202      	movs	r2, #2
 800352e:	61ba      	str	r2, [r7, #24]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	fa92 f2a2 	rbit	r2, r2
 8003536:	617a      	str	r2, [r7, #20]
  return result;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f042 0220 	orr.w	r2, r2, #32
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f002 021f 	and.w	r2, r2, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e079      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	491a      	ldr	r1, [pc, #104]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fd fabc 	bl	8000ae8 <HAL_GetTick>
 8003570:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd fab8 	bl	8000ae8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e061      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d214      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4906      	ldr	r1, [pc, #24]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <HAL_RCC_ClockConfig+0x25c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e040      	b.n	800364e <HAL_RCC_ClockConfig+0x2de>
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003658 <HAL_RCC_ClockConfig+0x2e8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	491a      	ldr	r1, [pc, #104]	@ (8003658 <HAL_RCC_ClockConfig+0x2e8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fe:	4b16      	ldr	r3, [pc, #88]	@ (8003658 <HAL_RCC_ClockConfig+0x2e8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4912      	ldr	r1, [pc, #72]	@ (8003658 <HAL_RCC_ClockConfig+0x2e8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003612:	f000 f829 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003616:	4601      	mov	r1, r0
 8003618:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <HAL_RCC_ClockConfig+0x2e8>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003620:	22f0      	movs	r2, #240	@ 0xf0
 8003622:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	fa92 f2a2 	rbit	r2, r2
 800362a:	60fa      	str	r2, [r7, #12]
  return result;
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	fab2 f282 	clz	r2, r2
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	40d3      	lsrs	r3, r2
 8003636:	4a09      	ldr	r2, [pc, #36]	@ (800365c <HAL_RCC_ClockConfig+0x2ec>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	fa21 f303 	lsr.w	r3, r1, r3
 800363e:	4a08      	ldr	r2, [pc, #32]	@ (8003660 <HAL_RCC_ClockConfig+0x2f0>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RCC_ClockConfig+0x2f4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fa0a 	bl	8000a60 <HAL_InitTick>
  
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3778      	adds	r7, #120	@ 0x78
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	08004550 	.word	0x08004550
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003682:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b04      	cmp	r3, #4
 8003690:	d002      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x30>
 8003692:	2b08      	cmp	r3, #8
 8003694:	d003      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x36>
 8003696:	e026      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x98>)
 800369a:	613b      	str	r3, [r7, #16]
      break;
 800369c:	e026      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0c9b      	lsrs	r3, r3, #18
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
 80036aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x94>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x98>)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e004      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <HAL_RCC_GetSysClockFreq+0xa4>)
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	613b      	str	r3, [r7, #16]
      break;
 80036e4:	e002      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x98>)
 80036e8:	613b      	str	r3, [r7, #16]
      break;
 80036ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ec:	693b      	ldr	r3, [r7, #16]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	007a1200 	.word	0x007a1200
 8003704:	08004568 	.word	0x08004568
 8003708:	08004578 	.word	0x08004578
 800370c:	003d0900 	.word	0x003d0900

08003710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003714:	4b03      	ldr	r3, [pc, #12]	@ (8003724 <HAL_RCC_GetHCLKFreq+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000000 	.word	0x20000000

08003728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800372e:	f7ff ffef 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800373c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003740:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	603a      	str	r2, [r7, #0]
  return result;
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	40d3      	lsrs	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	08004560 	.word	0x08004560

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003772:	f7ff ffcd 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 8003776:	4601      	mov	r1, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003780:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003784:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	fa92 f2a2 	rbit	r2, r2
 800378c:	603a      	str	r2, [r7, #0]
  return result;
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	40d3      	lsrs	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08004560 	.word	0x08004560

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e049      	b.n	8003856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f820 	bl	800081c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 f9c6 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e040      	b.n	80038fa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <HAL_TIM_Base_Start_IT+0xa8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_TIM_Base_Start_IT+0xac>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <HAL_TIM_Base_Start_IT+0xb0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d115      	bne.n	80038e4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b15      	ldr	r3, [pc, #84]	@ (8003914 <HAL_TIM_Base_Start_IT+0xb4>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d015      	beq.n	80038f6 <HAL_TIM_Base_Start_IT+0x96>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d0:	d011      	beq.n	80038f6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e2:	e008      	b.n	80038f6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e000      	b.n	80038f8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40000400 	.word	0x40000400
 8003910:	40014000 	.word	0x40014000
 8003914:	00010007 	.word	0x00010007

08003918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0202 	mvn.w	r2, #2
 800394c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8ee 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8e0 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8f1 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0204 	mvn.w	r2, #4
 8003998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8c8 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8ba 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8cb 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d020      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8a2 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f894 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8a5 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d020      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2208      	movs	r2, #8
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f87c 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f86e 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f87f 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0201 	mvn.w	r2, #1
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f84c 	bl	8003b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f968 	bl	8003d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f960 	bl	8003d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f83e 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0220 	mvn.w	r2, #32
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f928 	bl	8003d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a38      	ldr	r2, [pc, #224]	@ (8003c74 <TIM_Base_SetConfig+0xf4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d007      	beq.n	8003ba8 <TIM_Base_SetConfig+0x28>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0x28>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a35      	ldr	r2, [pc, #212]	@ (8003c78 <TIM_Base_SetConfig+0xf8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c74 <TIM_Base_SetConfig+0xf4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <TIM_Base_SetConfig+0x6a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d00f      	beq.n	8003bea <TIM_Base_SetConfig+0x6a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003c78 <TIM_Base_SetConfig+0xf8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <TIM_Base_SetConfig+0x6a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a29      	ldr	r2, [pc, #164]	@ (8003c7c <TIM_Base_SetConfig+0xfc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <TIM_Base_SetConfig+0x6a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a28      	ldr	r2, [pc, #160]	@ (8003c80 <TIM_Base_SetConfig+0x100>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_Base_SetConfig+0x6a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a27      	ldr	r2, [pc, #156]	@ (8003c84 <TIM_Base_SetConfig+0x104>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d108      	bne.n	8003bfc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <TIM_Base_SetConfig+0xf4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0xc0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <TIM_Base_SetConfig+0xfc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0xc0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <TIM_Base_SetConfig+0x100>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0xc0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	@ (8003c84 <TIM_Base_SetConfig+0x104>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f023 0201 	bic.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]
  }
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e054      	b.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d108      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a17      	ldr	r2, [pc, #92]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d08:	d009      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a13      	ldr	r2, [pc, #76]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a11      	ldr	r2, [pc, #68]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10c      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40014000 	.word	0x40014000

08003d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e040      	b.n	8003e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fc fd50 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	@ 0x24
 8003dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f95e 	bl	80040a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f825 	bl	8003e3c <UART_SetConfig>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01b      	b.n	8003e34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f9dd 	bl	80041ec <UART_CheckIdleState>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8a      	ldr	r3, [pc, #552]	@ (8004090 <UART_SetConfig+0x254>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a78      	ldr	r2, [pc, #480]	@ (8004094 <UART_SetConfig+0x258>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d120      	bne.n	8003efa <UART_SetConfig+0xbe>
 8003eb8:	4b77      	ldr	r3, [pc, #476]	@ (8004098 <UART_SetConfig+0x25c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d817      	bhi.n	8003ef4 <UART_SetConfig+0xb8>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <UART_SetConfig+0x90>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003ee9 	.word	0x08003ee9
 8003ed4:	08003eef 	.word	0x08003eef
 8003ed8:	08003ee3 	.word	0x08003ee3
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e01d      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e01a      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e017      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e014      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e011      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a67      	ldr	r2, [pc, #412]	@ (800409c <UART_SetConfig+0x260>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d102      	bne.n	8003f0a <UART_SetConfig+0xce>
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a64      	ldr	r2, [pc, #400]	@ (80040a0 <UART_SetConfig+0x264>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d102      	bne.n	8003f1a <UART_SetConfig+0xde>
 8003f14:	2300      	movs	r3, #0
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e001      	b.n	8003f1e <UART_SetConfig+0xe2>
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f26:	d15a      	bne.n	8003fde <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d827      	bhi.n	8003f7e <UART_SetConfig+0x142>
 8003f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0xf8>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7ff fbe6 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e013      	b.n	8003f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7ff fc04 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8003f64:	61b8      	str	r0, [r7, #24]
        break;
 8003f66:	e00f      	b.n	8003f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b4e      	ldr	r3, [pc, #312]	@ (80040a4 <UART_SetConfig+0x268>)
 8003f6a:	61bb      	str	r3, [r7, #24]
        break;
 8003f6c:	e00c      	b.n	8003f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7ff fb7b 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003f72:	61b8      	str	r0, [r7, #24]
        break;
 8003f74:	e008      	b.n	8003f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	61bb      	str	r3, [r7, #24]
        break;
 8003f7c:	e004      	b.n	8003f88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	77bb      	strb	r3, [r7, #30]
        break;
 8003f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d074      	beq.n	8004078 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	005a      	lsls	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d916      	bls.n	8003fd8 <UART_SetConfig+0x19c>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb0:	d212      	bcs.n	8003fd8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	89fa      	ldrh	r2, [r7, #14]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	e04f      	b.n	8004078 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77bb      	strb	r3, [r7, #30]
 8003fdc:	e04c      	b.n	8004078 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fde:	7ffb      	ldrb	r3, [r7, #31]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d828      	bhi.n	8004036 <UART_SetConfig+0x1fa>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x1b0>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	08004037 	.word	0x08004037
 8003ffc:	08004027 	.word	0x08004027
 8004000:	08004037 	.word	0x08004037
 8004004:	08004037 	.word	0x08004037
 8004008:	08004037 	.word	0x08004037
 800400c:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff fb8a 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8004014:	61b8      	str	r0, [r7, #24]
        break;
 8004016:	e013      	b.n	8004040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004018:	f7ff fba8 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800401c:	61b8      	str	r0, [r7, #24]
        break;
 800401e:	e00f      	b.n	8004040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <UART_SetConfig+0x268>)
 8004022:	61bb      	str	r3, [r7, #24]
        break;
 8004024:	e00c      	b.n	8004040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff fb1f 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800402a:	61b8      	str	r0, [r7, #24]
        break;
 800402c:	e008      	b.n	8004040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	61bb      	str	r3, [r7, #24]
        break;
 8004034:	e004      	b.n	8004040 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	77bb      	strb	r3, [r7, #30]
        break;
 800403e:	bf00      	nop
    }

    if (pclk != 0U)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	085a      	lsrs	r2, r3, #1
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d909      	bls.n	8004074 <UART_SetConfig+0x238>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004066:	d205      	bcs.n	8004074 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	e001      	b.n	8004078 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004084:	7fbb      	ldrb	r3, [r7, #30]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	efff69f3 	.word	0xefff69f3
 8004094:	40013800 	.word	0x40013800
 8004098:	40021000 	.word	0x40021000
 800409c:	40004400 	.word	0x40004400
 80040a0:	40004800 	.word	0x40004800
 80040a4:	007a1200 	.word	0x007a1200

080040a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01a      	beq.n	80041be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a6:	d10a      	bne.n	80041be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b098      	sub	sp, #96	@ 0x60
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041fc:	f7fc fc74 	bl	8000ae8 <HAL_GetTick>
 8004200:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d12e      	bne.n	800426e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004210:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	2200      	movs	r2, #0
 800421a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f88c 	bl	800433c <UART_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d021      	beq.n	800426e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004248:	647b      	str	r3, [r7, #68]	@ 0x44
 800424a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800424e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e062      	b.n	8004334 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d149      	bne.n	8004310 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f856 	bl	800433c <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03c      	beq.n	8004310 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	623b      	str	r3, [r7, #32]
   return(result);
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	617b      	str	r3, [r7, #20]
   return(result);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e011      	b.n	8004334 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3758      	adds	r7, #88	@ 0x58
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434c:	e04f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d04b      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fc fbc7 	bl	8000ae8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <UART_WaitOnFlagUntilTimeout+0x30>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e04e      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d037      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b80      	cmp	r3, #128	@ 0x80
 8004382:	d034      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b40      	cmp	r3, #64	@ 0x40
 8004388:	d031      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d110      	bne.n	80043ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f838 	bl	8004416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2208      	movs	r2, #8
 80043aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e029      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c8:	d111      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f81e 	bl	8004416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e00f      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d0a0      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004416:	b480      	push	{r7}
 8004418:	b095      	sub	sp, #84	@ 0x54
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800443c:	643b      	str	r3, [r7, #64]	@ 0x40
 800443e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800444a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e6      	bne.n	800441e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3308      	adds	r3, #8
 800446e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	2b01      	cmp	r3, #1
 800448a:	d118      	bne.n	80044be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	60bb      	str	r3, [r7, #8]
   return(result);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	613b      	str	r3, [r7, #16]
   return(result);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e6      	bne.n	800448c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044d2:	bf00      	nop
 80044d4:	3754      	adds	r7, #84	@ 0x54
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <memset>:
 80044de:	4402      	add	r2, r0
 80044e0:	4603      	mov	r3, r0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d100      	bne.n	80044e8 <memset+0xa>
 80044e6:	4770      	bx	lr
 80044e8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ec:	e7f9      	b.n	80044e2 <memset+0x4>
	...

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	@ (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	@ (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	@ (8004534 <__libc_init_array+0x44>)
 8004504:	f000 f818 	bl	8004538 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08004588 	.word	0x08004588
 800452c:	08004588 	.word	0x08004588
 8004530:	08004588 	.word	0x08004588
 8004534:	0800458c 	.word	0x0800458c

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
