
CodeStmL552_CDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008808  08008808  00009808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008914  08008914  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008914  08008914  00009914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800891c  0800891c  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800891c  0800891c  0000991c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008920  08008920  00009920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008924  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000078  0800899c  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800899c  0000a400  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019407  00000000  00000000  0000a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003221  00000000  00000000  000234b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  000266d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001183  00000000  00000000  00027d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf6d  00000000  00000000  00028ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f44  00000000  00000000  00054e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d81d  00000000  00000000  0006ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c5b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006838  00000000  00000000  0018c5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00192e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000078 	.word	0x20000078
 8000210:	00000000 	.word	0x00000000
 8000214:	080087f0 	.word	0x080087f0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000007c 	.word	0x2000007c
 8000230:	080087f0 	.word	0x080087f0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <OL>:
#include "main.h"
#include "MotorFunctions.h"
#include <stdbool.h>


bool OL(){    // Le capteur le plus a gauche "Outer Left"
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	return ADC_VAL[0]>threshold;   // Renvoie Vrai si c'est sur du blanc
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <OL+0x24>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <OL+0x28>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	bfcc      	ite	gt
 80005c2:	2301      	movgt	r3, #1
 80005c4:	2300      	movle	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200002a4 	.word	0x200002a4
 80005d8:	20000000 	.word	0x20000000

080005dc <IL>:
bool IL(){					// Le deuxième capteur à partir du gauche
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	return ADC_VAL[1]>threshold;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <IL+0x24>)
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <IL+0x28>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	bfcc      	ite	gt
 80005ee:	2301      	movgt	r3, #1
 80005f0:	2300      	movle	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200002a4 	.word	0x200002a4
 8000604:	20000000 	.word	0x20000000

08000608 <IR>:
bool IR(){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	return ADC_VAL[2]>threshold;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <IR+0x24>)
 800060e:	889b      	ldrh	r3, [r3, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <IR+0x28>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	bfcc      	ite	gt
 800061a:	2301      	movgt	r3, #1
 800061c:	2300      	movle	r3, #0
 800061e:	b2db      	uxtb	r3, r3
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200002a4 	.word	0x200002a4
 8000630:	20000000 	.word	0x20000000

08000634 <OR>:
bool OR(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	return ADC_VAL[3]>threshold;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <OR+0x24>)
 800063a:	88db      	ldrh	r3, [r3, #6]
 800063c:	461a      	mov	r2, r3
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <OR+0x28>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	bfcc      	ite	gt
 8000646:	2301      	movgt	r3, #1
 8000648:	2300      	movle	r3, #0
 800064a:	b2db      	uxtb	r3, r3
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200002a4 	.word	0x200002a4
 800065c:	20000000 	.word	0x20000000

08000660 <Run>:

void Run(uint16_t speedL, uint16_t speedR){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	80fb      	strh	r3, [r7, #6]
 800066c:	4613      	mov	r3, r2
 800066e:	80bb      	strh	r3, [r7, #4]
	// Set direction
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2120      	movs	r1, #32
 8000674:	480f      	ldr	r0, [pc, #60]	@ (80006b4 <Run+0x54>)
 8000676:	f003 fb6b 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <Run+0x54>)
 8000680:	f003 fb66 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2108      	movs	r1, #8
 8000688:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <Run+0x58>)
 800068a:	f003 fb61 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000694:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <Run+0x54>)
 8000696:	f003 fb5b 	bl	8003d50 <HAL_GPIO_WritePin>
	// Set the speed
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, speedL);
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <Run+0x5c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	88fa      	ldrh	r2, [r7, #6]
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, speedR);
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <Run+0x5c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	88ba      	ldrh	r2, [r7, #4]
 80006a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42020400 	.word	0x42020400
 80006b8:	42021c00 	.word	0x42021c00
 80006bc:	200001b0 	.word	0x200001b0

080006c0 <TurnLeft>:

void TurnLeft(uint16_t speed){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
	// Set direction
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	480f      	ldr	r0, [pc, #60]	@ (800070c <TurnLeft+0x4c>)
 80006d0:	f003 fb3e 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <TurnLeft+0x4c>)
 80006da:	f003 fb39 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2108      	movs	r1, #8
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <TurnLeft+0x50>)
 80006e4:	f003 fb34 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ee:	4807      	ldr	r0, [pc, #28]	@ (800070c <TurnLeft+0x4c>)
 80006f0:	f003 fb2e 	bl	8003d50 <HAL_GPIO_WritePin>
	// Set the speed
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 30);
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <TurnLeft+0x54>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	221e      	movs	r2, #30
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, speed);
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <TurnLeft+0x54>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	88fa      	ldrh	r2, [r7, #6]
 8000702:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	42020400 	.word	0x42020400
 8000710:	42021c00 	.word	0x42021c00
 8000714:	200001b0 	.word	0x200001b0

08000718 <TurnRight>:

void TurnRight(uint16_t speed){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	// Set direction
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	480f      	ldr	r0, [pc, #60]	@ (8000764 <TurnRight+0x4c>)
 8000728:	f003 fb12 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <TurnRight+0x4c>)
 8000732:	f003 fb0d 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <TurnRight+0x50>)
 800073c:	f003 fb08 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <TurnRight+0x4c>)
 8000748:	f003 fb02 	bl	8003d50 <HAL_GPIO_WritePin>
	// Set the speed
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, speed);
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <TurnRight+0x54>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 30);
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <TurnRight+0x54>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	221e      	movs	r2, #30
 800075a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	42020400 	.word	0x42020400
 8000768:	42021c00 	.word	0x42021c00
 800076c:	200001b0 	.word	0x200001b0

08000770 <Stop>:

void Stop(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	// Set direction
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	480e      	ldr	r0, [pc, #56]	@ (80007b4 <Stop+0x44>)
 800077a:	f003 fae9 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2110      	movs	r1, #16
 8000782:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <Stop+0x44>)
 8000784:	f003 fae4 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <Stop+0x48>)
 800078e:	f003 fadf 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <Stop+0x44>)
 800079a:	f003 fad9 	bl	8003d50 <HAL_GPIO_WritePin>
	// Set the speed
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 0);
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <Stop+0x4c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 0);
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <Stop+0x4c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2200      	movs	r2, #0
 80007ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	42020400 	.word	0x42020400
 80007b8:	42021c00 	.word	0x42021c00
 80007bc:	200001b0 	.word	0x200001b0

080007c0 <HAL_GPIO_EXTI_Rising_Callback>:
static void MX_TIM4_Init(void);
static void MX_ICACHE_Init(void);
/* USER CODE BEGIN PFP */
ADC_ChannelConfTypeDef sConfig;
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == ECHO_Pin) {
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d0:	d105      	bne.n	80007de <HAL_GPIO_EXTI_Rising_Callback+0x1e>
        timer_count = __HAL_TIM_GET_COUNTER(&htim1);
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 80007da:	6013      	str	r3, [r2, #0]
    else if (GPIO_Pin ==Button_Pin){
    	STANBY=1-STANBY;
    	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, STANBY);

    }
}
 80007dc:	e011      	b.n	8000802 <HAL_GPIO_EXTI_Rising_Callback+0x42>
    else if (GPIO_Pin ==Button_Pin){
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10e      	bne.n	8000802 <HAL_GPIO_EXTI_Rising_Callback+0x42>
    	STANBY=1-STANBY;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f1c3 0301 	rsb	r3, r3, #1
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80007f0:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, STANBY);
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	4806      	ldr	r0, [pc, #24]	@ (8000818 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 80007fe:	f003 faa7 	bl	8003d50 <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000164 	.word	0x20000164
 8000810:	20000290 	.word	0x20000290
 8000814:	2000029a 	.word	0x2000029a
 8000818:	42020400 	.word	0x42020400

0800081c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == ECHO_Pin) {
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800082c:	d12d      	bne.n	800088a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
        current_count = __HAL_TIM_GET_COUNTER(&htim1);
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8000836:	6013      	str	r3, [r2, #0]
        uint32_t delta;

        if (current_count >= timer_count) {
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	d306      	bcc.n	8000852 <HAL_GPIO_EXTI_Falling_Callback+0x36>
            delta = current_count - timer_count;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e007      	b.n	8000862 <HAL_GPIO_EXTI_Falling_Callback+0x46>
        } else {
            delta = (65536 + current_count - timer_count); // pour timer 16 bits
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000860:	60fb      	str	r3, [r7, #12]
        }

        Distance = (uint16_t)((delta * 0.034f) / 2.0f);  // arrondi entier en cm
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800086c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80008a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
 8000870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000874:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800087c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000880:	ee17 3a90 	vmov	r3, s15
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8000888:	801a      	strh	r2, [r3, #0]
    }
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000164 	.word	0x20000164
 800089c:	20000294 	.word	0x20000294
 80008a0:	20000290 	.word	0x20000290
 80008a4:	3d0b4396 	.word	0x3d0b4396
 80008a8:	20000298 	.word	0x20000298

080008ac <__io_putchar>:


uint16_t ADC_VAL[4];

int __io_putchar(int ch)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <__io_putchar+0x20>)
 80008be:	f006 f9a7 	bl	8006c10 <HAL_UART_Transmit>
  return ch;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001fc 	.word	0x200001fc

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f001 f934 	bl	8001b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 fa4f 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80008de:	2018      	movs	r0, #24
 80008e0:	f002 fda7 	bl	8003432 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 fd02 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 80008e8:	f000 fcd6 	bl	8001298 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ec:	f000 fa98 	bl	8000e20 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80008f0:	f000 fc86 	bl	8001200 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008f4:	f000 fb46 	bl	8000f84 <MX_TIM1_Init>
  MX_TIM4_Init();
 80008f8:	f000 fc00 	bl	80010fc <MX_TIM4_Init>
  MX_ICACHE_Init();
 80008fc:	f000 fb36 	bl	8000f6c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, STANBY);
 8000900:	4b95      	ldr	r3, [pc, #596]	@ (8000b58 <main+0x288>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	4894      	ldr	r0, [pc, #592]	@ (8000b5c <main+0x28c>)
 800090c:	f003 fa20 	bl	8003d50 <HAL_GPIO_WritePin>
  // For the motors
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	4893      	ldr	r0, [pc, #588]	@ (8000b60 <main+0x290>)
 8000914:	f005 f8f6 	bl	8005b04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000918:	210c      	movs	r1, #12
 800091a:	4891      	ldr	r0, [pc, #580]	@ (8000b60 <main+0x290>)
 800091c:	f005 f8f2 	bl	8005b04 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000920:	4890      	ldr	r0, [pc, #576]	@ (8000b64 <main+0x294>)
 8000922:	f005 f825 	bl	8005970 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); //pull the TRIG pin low
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092c:	488b      	ldr	r0, [pc, #556]	@ (8000b5c <main+0x28c>)
 800092e:	f003 fa0f 	bl	8003d50 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //for sensors calibration
 8000932:	217f      	movs	r1, #127	@ 0x7f
 8000934:	488c      	ldr	r0, [pc, #560]	@ (8000b68 <main+0x298>)
 8000936:	f002 fb81 	bl	800303c <HAL_ADCEx_Calibration_Start>

  //Stop the motor
  Stop();
 800093a:	f7ff ff19 	bl	8000770 <Stop>

  int crossCount =0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  int TIM_count0 = __HAL_TIM_GET_COUNTER(&htim1);
 8000942:	4b88      	ldr	r3, [pc, #544]	@ (8000b64 <main+0x294>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000948:	613b      	str	r3, [r7, #16]
  int TIM_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 800094a:	4b86      	ldr	r3, [pc, #536]	@ (8000b64 <main+0x294>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000950:	60fb      	str	r3, [r7, #12]
  int CurrentTIM_count = __HAL_TIM_GET_COUNTER(&htim1);
 8000952:	4b84      	ldr	r3, [pc, #528]	@ (8000b64 <main+0x294>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000958:	60bb      	str	r3, [r7, #8]
  //current_count = __HAL_TIM_GET_COUNTER(&htim1);
  HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 4);
 800095a:	2204      	movs	r2, #4
 800095c:	4983      	ldr	r1, [pc, #524]	@ (8000b6c <main+0x29c>)
 800095e:	4882      	ldr	r0, [pc, #520]	@ (8000b68 <main+0x298>)
 8000960:	f001 fce4 	bl	800232c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   CurrentTIM_count = __HAL_TIM_GET_COUNTER(&htim1);
 8000964:	4b7f      	ldr	r3, [pc, #508]	@ (8000b64 <main+0x294>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096a:	60bb      	str	r3, [r7, #8]
	  // Déclenche le capteur
	  	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000972:	487a      	ldr	r0, [pc, #488]	@ (8000b5c <main+0x28c>)
 8000974:	f003 f9ec 	bl	8003d50 <HAL_GPIO_WritePin>
	  	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000978:	4b7a      	ldr	r3, [pc, #488]	@ (8000b64 <main+0x294>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
	  	  while (__HAL_TIM_GET_COUNTER(&htim1) < 10); // 10 us
 8000980:	bf00      	nop
 8000982:	4b78      	ldr	r3, [pc, #480]	@ (8000b64 <main+0x294>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000988:	2b09      	cmp	r3, #9
 800098a:	d9fa      	bls.n	8000982 <main+0xb2>
	  	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000992:	4872      	ldr	r0, [pc, #456]	@ (8000b5c <main+0x28c>)
 8000994:	f003 f9dc 	bl	8003d50 <HAL_GPIO_WritePin>


	//  	if(Distance>8){
	  	if(crossCount>=6){
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	2b05      	cmp	r3, #5
 800099c:	dd09      	ble.n	80009b2 <main+0xe2>
	  		  				TurnRight(UperSpeed);
 800099e:	4b74      	ldr	r3, [pc, #464]	@ (8000b70 <main+0x2a0>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff feb8 	bl	8000718 <TurnRight>
	  		  			printf("TurnRight : Crosscount :  %d \r\n", crossCount);
 80009a8:	6979      	ldr	r1, [r7, #20]
 80009aa:	4872      	ldr	r0, [pc, #456]	@ (8000b74 <main+0x2a4>)
 80009ac:	f007 f8a2 	bl	8007af4 <iprintf>
 80009b0:	e1c9      	b.n	8000d46 <main+0x476>
	  	}else{
	  		if((DebutVirageD==0)&&(DebutVirageG==0)){    // Si on n'est pas dans un virage
 80009b2:	4b71      	ldr	r3, [pc, #452]	@ (8000b78 <main+0x2a8>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 811b 	bne.w	8000bf2 <main+0x322>
 80009bc:	4b6f      	ldr	r3, [pc, #444]	@ (8000b7c <main+0x2ac>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f040 8116 	bne.w	8000bf2 <main+0x322>
	  		if(!OL()&&!OR()){   // Les deux extrémitées sont sur du noir
 80009c6:	f7ff fdf3 	bl	80005b0 <OL>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d073      	beq.n	8000abe <main+0x1ee>
 80009d6:	f7ff fe2d 	bl	8000634 <OR>
 80009da:	4603      	mov	r3, r0
 80009dc:	f083 0301 	eor.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d06b      	beq.n	8000abe <main+0x1ee>
	  			if(IL()&&!IR()){   // On regarde les deux capteur du milieu : Si celui à gauche est sur du blanc et l'autre sur du noir
 80009e6:	f7ff fdf9 	bl	80005dc <IL>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d02c      	beq.n	8000a4a <main+0x17a>
 80009f0:	f7ff fe0a 	bl	8000608 <IR>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f083 0301 	eor.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d024      	beq.n	8000a4a <main+0x17a>
	  				if(RightMotorSpeed>LowerSpeed){RightMotorSpeed-=SpeedStep;}  // On décrémente si possible la vitesse du moteur à droite
 8000a00:	4b5f      	ldr	r3, [pc, #380]	@ (8000b80 <main+0x2b0>)
 8000a02:	881a      	ldrh	r2, [r3, #0]
 8000a04:	4b5f      	ldr	r3, [pc, #380]	@ (8000b84 <main+0x2b4>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d907      	bls.n	8000a1c <main+0x14c>
 8000a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8000b80 <main+0x2b0>)
 8000a0e:	881a      	ldrh	r2, [r3, #0]
 8000a10:	4b5d      	ldr	r3, [pc, #372]	@ (8000b88 <main+0x2b8>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b59      	ldr	r3, [pc, #356]	@ (8000b80 <main+0x2b0>)
 8000a1a:	801a      	strh	r2, [r3, #0]
	  				if(LeftMotorSpeed<UperSpeed){LeftMotorSpeed+=SpeedStep;}  // On incrémente celui de gauche
 8000a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b8c <main+0x2bc>)
 8000a1e:	881a      	ldrh	r2, [r3, #0]
 8000a20:	4b53      	ldr	r3, [pc, #332]	@ (8000b70 <main+0x2a0>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <main+0x168>
 8000a28:	4b58      	ldr	r3, [pc, #352]	@ (8000b8c <main+0x2bc>)
 8000a2a:	881a      	ldrh	r2, [r3, #0]
 8000a2c:	4b56      	ldr	r3, [pc, #344]	@ (8000b88 <main+0x2b8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b55      	ldr	r3, [pc, #340]	@ (8000b8c <main+0x2bc>)
 8000a36:	801a      	strh	r2, [r3, #0]
	  				// Tourner legèrement à droite
	  				Run(LeftMotorSpeed, RightMotorSpeed);
 8000a38:	4b54      	ldr	r3, [pc, #336]	@ (8000b8c <main+0x2bc>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4a50      	ldr	r2, [pc, #320]	@ (8000b80 <main+0x2b0>)
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe0c 	bl	8000660 <Run>
 8000a48:	e030      	b.n	8000aac <main+0x1dc>
	  			}else if(!IL()&&IR()){  // Si celui à gauche est sur du noir et l'autre sur du blanc
 8000a4a:	f7ff fdc7 	bl	80005dc <IL>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d028      	beq.n	8000aac <main+0x1dc>
 8000a5a:	f7ff fdd5 	bl	8000608 <IR>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d023      	beq.n	8000aac <main+0x1dc>
	  				if(RightMotorSpeed<UperSpeed){RightMotorSpeed+=SpeedStep;} // On incrémente si possible la vitesse du moteur à droite
 8000a64:	4b46      	ldr	r3, [pc, #280]	@ (8000b80 <main+0x2b0>)
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <main+0x2a0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <main+0x1b0>
 8000a70:	4b43      	ldr	r3, [pc, #268]	@ (8000b80 <main+0x2b0>)
 8000a72:	881a      	ldrh	r2, [r3, #0]
 8000a74:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <main+0x2b8>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b40      	ldr	r3, [pc, #256]	@ (8000b80 <main+0x2b0>)
 8000a7e:	801a      	strh	r2, [r3, #0]
					if(LeftMotorSpeed>LowerSpeed){LeftMotorSpeed-=SpeedStep;}   // On décrémente celui de gauche
 8000a80:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <main+0x2bc>)
 8000a82:	881a      	ldrh	r2, [r3, #0]
 8000a84:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <main+0x2b4>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d907      	bls.n	8000a9c <main+0x1cc>
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b8c <main+0x2bc>)
 8000a8e:	881a      	ldrh	r2, [r3, #0]
 8000a90:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <main+0x2b8>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b3c      	ldr	r3, [pc, #240]	@ (8000b8c <main+0x2bc>)
 8000a9a:	801a      	strh	r2, [r3, #0]
					// Tourner legèrement à gauche
					Run(LeftMotorSpeed, RightMotorSpeed);
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <main+0x2bc>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	4a37      	ldr	r2, [pc, #220]	@ (8000b80 <main+0x2b0>)
 8000aa2:	8812      	ldrh	r2, [r2, #0]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fdda 	bl	8000660 <Run>
	  			}
	  			// si les deux du milieu sont tous sur du noir, avancer
	  			Run(LeftMotorSpeed, RightMotorSpeed);
 8000aac:	4b37      	ldr	r3, [pc, #220]	@ (8000b8c <main+0x2bc>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4a33      	ldr	r2, [pc, #204]	@ (8000b80 <main+0x2b0>)
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fdd2 	bl	8000660 <Run>
 8000abc:	e098      	b.n	8000bf0 <main+0x320>
	  		}else if(OL()&&OR()&&(IL()||IR())){
 8000abe:	f7ff fd77 	bl	80005b0 <OL>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d020      	beq.n	8000b0a <main+0x23a>
 8000ac8:	f7ff fdb4 	bl	8000634 <OR>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d01b      	beq.n	8000b0a <main+0x23a>
 8000ad2:	f7ff fd83 	bl	80005dc <IL>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <main+0x216>
 8000adc:	f7ff fd94 	bl	8000608 <IR>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d011      	beq.n	8000b0a <main+0x23a>
	  			if(CurrentTIM_count-TIM_count1 >=1000){
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000af0:	db7e      	blt.n	8000bf0 <main+0x320>
					printf("++ Crosscount :  %d \r\n", crossCount);
 8000af2:	6979      	ldr	r1, [r7, #20]
 8000af4:	4826      	ldr	r0, [pc, #152]	@ (8000b90 <main+0x2c0>)
 8000af6:	f006 fffd 	bl	8007af4 <iprintf>
	  				crossCount++;
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
	  				TIM_count0 = __HAL_TIM_GET_COUNTER(&htim1);
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <main+0x294>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b06:	613b      	str	r3, [r7, #16]
	  			if(CurrentTIM_count-TIM_count1 >=1000){
 8000b08:	e072      	b.n	8000bf0 <main+0x320>
	  			}
	  		}else if(!OL()&&OR()){  // Si le capteur le plus à droite est sur du blanc == Virage à droite !
 8000b0a:	f7ff fd51 	bl	80005b0 <OL>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f083 0301 	eor.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d040      	beq.n	8000b9c <main+0x2cc>
 8000b1a:	f7ff fd8b 	bl	8000634 <OR>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d03b      	beq.n	8000b9c <main+0x2cc>
//	  			TurnRight(LowerSpeed); // Tourner à droite (moteur gauche vitesse 30)
//	  			DebutVirageD =1;
//	  			ILdetected=0;
				if(CurrentTIM_count-TIM_count0 >=500){
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b2e:	db5f      	blt.n	8000bf0 <main+0x320>
					TurnRight(LowerSpeed); // Tourner à droite (moteur gauche vitesse 30)
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <main+0x2b4>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdef 	bl	8000718 <TurnRight>
					printf("TURNRIGHT Crosscount :  %d \r\n", crossCount);
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <main+0x2c4>)
 8000b3e:	f006 ffd9 	bl	8007af4 <iprintf>
					DebutVirageD =1;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <main+0x2a8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	801a      	strh	r2, [r3, #0]
					ILdetected=0;
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <main+0x2c8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
					TIM_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <main+0x294>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b54:	60fb      	str	r3, [r7, #12]
				if(CurrentTIM_count-TIM_count0 >=500){
 8000b56:	e04b      	b.n	8000bf0 <main+0x320>
 8000b58:	2000029a 	.word	0x2000029a
 8000b5c:	42020400 	.word	0x42020400
 8000b60:	200001b0 	.word	0x200001b0
 8000b64:	20000164 	.word	0x20000164
 8000b68:	20000094 	.word	0x20000094
 8000b6c:	200002a4 	.word	0x200002a4
 8000b70:	20000004 	.word	0x20000004
 8000b74:	08008808 	.word	0x08008808
 8000b78:	2000029e 	.word	0x2000029e
 8000b7c:	2000029c 	.word	0x2000029c
 8000b80:	2000000a 	.word	0x2000000a
 8000b84:	20000006 	.word	0x20000006
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	08008828 	.word	0x08008828
 8000b94:	08008840 	.word	0x08008840
 8000b98:	200002a0 	.word	0x200002a0
				}
	  		}else if(OL()&&!OR()){  // Cas symétrique
 8000b9c:	f7ff fd08 	bl	80005b0 <OL>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80ce 	beq.w	8000d44 <main+0x474>
 8000ba8:	f7ff fd44 	bl	8000634 <OR>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 80c5 	beq.w	8000d44 <main+0x474>
//	  			TurnLeft(LowerSpeed);
//	  			DebutVirageG =1;
//	  			IRdetected=0;
				if(CurrentTIM_count-TIM_count0 >=500){
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bc4:	f2c0 80be 	blt.w	8000d44 <main+0x474>
				TurnLeft(LowerSpeed); // Tourner à droite (moteur gauche vitesse 30)
 8000bc8:	4b61      	ldr	r3, [pc, #388]	@ (8000d50 <main+0x480>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd77 	bl	80006c0 <TurnLeft>
				printf("TURNRIGHT Crosscount :  %d \r\n", crossCount);
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	485f      	ldr	r0, [pc, #380]	@ (8000d54 <main+0x484>)
 8000bd6:	f006 ff8d 	bl	8007af4 <iprintf>
				DebutVirageG =1;
 8000bda:	4b5f      	ldr	r3, [pc, #380]	@ (8000d58 <main+0x488>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	801a      	strh	r2, [r3, #0]
				IRdetected=0;
 8000be0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d5c <main+0x48c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
				TIM_count1= __HAL_TIM_GET_COUNTER(&htim1);
 8000be6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d60 <main+0x490>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bec:	60fb      	str	r3, [r7, #12]
	  		if(!OL()&&!OR()){   // Les deux extrémitées sont sur du noir
 8000bee:	e0a9      	b.n	8000d44 <main+0x474>
 8000bf0:	e0a8      	b.n	8000d44 <main+0x474>
			}
	  		}
	  		}else{
	  			if((DebutVirageG==1)&&IR()&&(IRdetected==0)){  // SI on est dans un virage et le deuxième capteur à compter de la droite detecte du banc
 8000bf2:	4b59      	ldr	r3, [pc, #356]	@ (8000d58 <main+0x488>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10c      	bne.n	8000c14 <main+0x344>
 8000bfa:	f7ff fd05 	bl	8000608 <IR>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <main+0x344>
 8000c04:	4b55      	ldr	r3, [pc, #340]	@ (8000d5c <main+0x48c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d103      	bne.n	8000c14 <main+0x344>
	  				IRdetected=1;
 8000c0c:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <main+0x48c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	801a      	strh	r2, [r3, #0]
 8000c12:	e042      	b.n	8000c9a <main+0x3ca>
	  			}
	  			else if((DebutVirageG==1)&&!IR()&&(IRdetected==1)){
 8000c14:	4b50      	ldr	r3, [pc, #320]	@ (8000d58 <main+0x488>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d13e      	bne.n	8000c9a <main+0x3ca>
 8000c1c:	f7ff fcf4 	bl	8000608 <IR>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f083 0301 	eor.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d036      	beq.n	8000c9a <main+0x3ca>
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <main+0x48c>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d132      	bne.n	8000c9a <main+0x3ca>
	  				IRdetected=0;
 8000c34:	4b49      	ldr	r3, [pc, #292]	@ (8000d5c <main+0x48c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	801a      	strh	r2, [r3, #0]
	  				DebutVirageG=0;
 8000c3a:	4b47      	ldr	r3, [pc, #284]	@ (8000d58 <main+0x488>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	801a      	strh	r2, [r3, #0]
	  				if(RightMotorSpeed<UperSpeed){RightMotorSpeed+=SpeedStep;}
 8000c40:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <main+0x494>)
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <main+0x498>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <main+0x38c>
 8000c4c:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <main+0x494>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <main+0x49c>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b42      	ldr	r3, [pc, #264]	@ (8000d64 <main+0x494>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	  				if(LeftMotorSpeed>LowerSpeed){LeftMotorSpeed-=SpeedStep;}
 8000c5c:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <main+0x4a0>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <main+0x480>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d907      	bls.n	8000c78 <main+0x3a8>
 8000c68:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <main+0x4a0>)
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <main+0x49c>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <main+0x4a0>)
 8000c76:	801a      	strh	r2, [r3, #0]
	  				int speed = (RightMotorSpeed>LeftMotorSpeed)?LeftMotorSpeed:RightMotorSpeed;
 8000c78:	4b3a      	ldr	r3, [pc, #232]	@ (8000d64 <main+0x494>)
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <main+0x4a0>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	4293      	cmp	r3, r2
 8000c82:	bf28      	it	cs
 8000c84:	4613      	movcs	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	607b      	str	r3, [r7, #4]
	  				Run(speed, speed);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	b292      	uxth	r2, r2
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fce3 	bl	8000660 <Run>
	  			}
	  			if((DebutVirageD==1)&&IL()&&(ILdetected==0)){
 8000c9a:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <main+0x4a4>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d10c      	bne.n	8000cbc <main+0x3ec>
 8000ca2:	f7ff fc9b 	bl	80005dc <IL>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d007      	beq.n	8000cbc <main+0x3ec>
 8000cac:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <main+0x4a8>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <main+0x3ec>
					ILdetected=1;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <main+0x4a8>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	e044      	b.n	8000d46 <main+0x476>
				}
	  			else if((DebutVirageD==1)&&!IL()&&(ILdetected==1)){
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <main+0x4a4>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d140      	bne.n	8000d46 <main+0x476>
 8000cc4:	f7ff fc8a 	bl	80005dc <IL>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d038      	beq.n	8000d46 <main+0x476>
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <main+0x4a8>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d134      	bne.n	8000d46 <main+0x476>
					ILdetected=0;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <main+0x4a8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
					DebutVirageD=0;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <main+0x4a4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	801a      	strh	r2, [r3, #0]
					if(LeftMotorSpeed<UperSpeed){LeftMotorSpeed+=SpeedStep;}
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <main+0x4a0>)
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <main+0x498>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <main+0x434>
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <main+0x4a0>)
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <main+0x49c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <main+0x4a0>)
 8000d02:	801a      	strh	r2, [r3, #0]
					if(RightMotorSpeed>LowerSpeed){RightMotorSpeed-=SpeedStep;}
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <main+0x494>)
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <main+0x480>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d907      	bls.n	8000d20 <main+0x450>
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <main+0x494>)
 8000d12:	881a      	ldrh	r2, [r3, #0]
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <main+0x49c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <main+0x494>)
 8000d1e:	801a      	strh	r2, [r3, #0]
					int speed = (RightMotorSpeed>LeftMotorSpeed)?LeftMotorSpeed:RightMotorSpeed;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <main+0x494>)
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <main+0x4a0>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	bf28      	it	cs
 8000d2c:	4613      	movcs	r3, r2
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	603b      	str	r3, [r7, #0]
					Run(speed, speed);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	b292      	uxth	r2, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc8f 	bl	8000660 <Run>
 8000d42:	e000      	b.n	8000d46 <main+0x476>
	  		if(!OL()&&!OR()){   // Les deux extrémitées sont sur du noir
 8000d44:	bf00      	nop
	  			}
	  		}}
	//  	}else{Stop();}
	 	  //printf("[ %i,    %i,    %i,    %i  ] \r\n ",ADC_VAL[0],ADC_VAL[1],ADC_VAL[2],ADC_VAL[3]);

	 	  HAL_Delay(5);
 8000d46:	2005      	movs	r0, #5
 8000d48:	f000 ff72 	bl	8001c30 <HAL_Delay>
	   CurrentTIM_count = __HAL_TIM_GET_COUNTER(&htim1);
 8000d4c:	e60a      	b.n	8000964 <main+0x94>
 8000d4e:	bf00      	nop
 8000d50:	20000006 	.word	0x20000006
 8000d54:	08008840 	.word	0x08008840
 8000d58:	2000029c 	.word	0x2000029c
 8000d5c:	200002a2 	.word	0x200002a2
 8000d60:	20000164 	.word	0x20000164
 8000d64:	2000000a 	.word	0x2000000a
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000029e 	.word	0x2000029e
 8000d78:	200002a0 	.word	0x200002a0

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b098      	sub	sp, #96	@ 0x60
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2248      	movs	r2, #72	@ 0x48
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f006 ff07 	bl	8007b9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000da2:	f003 f831 	bl	8003e08 <HAL_PWREx_ControlVoltageScaling>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dac:	f000 fb38 	bl	8001420 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000db0:	2310      	movs	r3, #16
 8000db2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dbc:	2360      	movs	r3, #96	@ 0x60
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000dcc:	2328      	movs	r3, #40	@ 0x28
 8000dce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 f8a1 	bl	8003f28 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000dec:	f000 fb18 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2303      	movs	r3, #3
 8000df6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2103      	movs	r1, #3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fd63 	bl	80048d4 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e14:	f000 fb04 	bl	8001420 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3760      	adds	r7, #96	@ 0x60
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e42:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e44:	4a44      	ldr	r2, [pc, #272]	@ (8000f58 <MX_ADC1_Init+0x138>)
 8000e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e48:	4b42      	ldr	r3, [pc, #264]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4e:	4b41      	ldr	r3, [pc, #260]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e54:	4b3f      	ldr	r3, [pc, #252]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e60:	4b3c      	ldr	r3, [pc, #240]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e66:	4b3b      	ldr	r3, [pc, #236]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e6c:	4b39      	ldr	r3, [pc, #228]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000e72:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea2:	482c      	ldr	r0, [pc, #176]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000ea4:	f001 f8f6 	bl	8002094 <HAL_ADC_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eae:	f000 fab7 	bl	8001420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000ebe:	f002 f91f 	bl	8003100 <HAL_ADCEx_MultiModeConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ec8:	f000 faaa 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_ADC1_Init+0x13c>)
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed8:	237f      	movs	r3, #127	@ 0x7f
 8000eda:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000edc:	2304      	movs	r3, #4
 8000ede:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481a      	ldr	r0, [pc, #104]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000eea:	f001 faf1 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ef4:	f000 fa94 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_ADC1_Init+0x140>)
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000efc:	230c      	movs	r3, #12
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000f06:	f001 fae3 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000f10:	f000 fa86 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_ADC1_Init+0x144>)
 8000f16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000f22:	f001 fad5 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000f2c:	f000 fa78 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <MX_ADC1_Init+0x148>)
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f34:	2318      	movs	r3, #24
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_ADC1_Init+0x134>)
 8000f3e:	f001 fac7 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000f48:	f000 fa6a 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000094 	.word	0x20000094
 8000f58:	42028000 	.word	0x42028000
 8000f5c:	2a000400 	.word	0x2a000400
 8000f60:	25b00200 	.word	0x25b00200
 8000f64:	2e300800 	.word	0x2e300800
 8000f68:	32601000 	.word	0x32601000

08000f6c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f70:	f002 ff2c 	bl	8003dcc <HAL_ICACHE_Enable>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000f7a:	f000 fa51 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09c      	sub	sp, #112	@ 0x70
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2234      	movs	r2, #52	@ 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fded 	bl	8007b9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fc6:	4a4c      	ldr	r2, [pc, #304]	@ (80010f8 <MX_TIM1_Init+0x174>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000fca:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fcc:	224f      	movs	r2, #79	@ 0x4f
 8000fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b48      	ldr	r3, [pc, #288]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fd6:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b45      	ldr	r3, [pc, #276]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe4:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff0:	4840      	ldr	r0, [pc, #256]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8000ff2:	f004 fc65 	bl	80058c0 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f000 fa10 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001006:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800100a:	4619      	mov	r1, r3
 800100c:	4839      	ldr	r0, [pc, #228]	@ (80010f4 <MX_TIM1_Init+0x170>)
 800100e:	f004 ff93 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001018:	f000 fa02 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800101c:	4835      	ldr	r0, [pc, #212]	@ (80010f4 <MX_TIM1_Init+0x170>)
 800101e:	f004 fd0f 	bl	8005a40 <HAL_TIM_PWM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001028:	f000 f9fa 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001038:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800103c:	4619      	mov	r1, r3
 800103e:	482d      	ldr	r0, [pc, #180]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8001040:	f005 fc82 	bl	8006948 <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800104a:	f000 f9e9 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104e:	2360      	movs	r3, #96	@ 0x60
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800105a:	2300      	movs	r3, #0
 800105c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	4820      	ldr	r0, [pc, #128]	@ (80010f4 <MX_TIM1_Init+0x170>)
 8001074:	f004 fe4c 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800107e:	f000 f9cf 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <MX_TIM1_Init+0x170>)
 800108c:	f004 fe40 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001096:	f000 f9c3 	bl	8001420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <MX_TIM1_Init+0x170>)
 80010d8:	f005 fcbe 	bl	8006a58 <HAL_TIMEx_ConfigBreakDeadTime>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80010e2:	f000 f99d 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e6:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <MX_TIM1_Init+0x170>)
 80010e8:	f000 fa9a 	bl	8001620 <HAL_TIM_MspPostInit>

}
 80010ec:	bf00      	nop
 80010ee:	3770      	adds	r7, #112	@ 0x70
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000164 	.word	0x20000164
 80010f8:	40012c00 	.word	0x40012c00

080010fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001130:	4a32      	ldr	r2, [pc, #200]	@ (80011fc <MX_TIM4_Init+0x100>)
 8001132:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001136:	224f      	movs	r2, #79	@ 0x4f
 8001138:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001142:	22c7      	movs	r2, #199	@ 0xc7
 8001144:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001152:	4829      	ldr	r0, [pc, #164]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001154:	f004 fbb4 	bl	80058c0 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800115e:	f000 f95f 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116c:	4619      	mov	r1, r3
 800116e:	4822      	ldr	r0, [pc, #136]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001170:	f004 fee2 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800117a:	f000 f951 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117e:	481e      	ldr	r0, [pc, #120]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001180:	f004 fc5e 	bl	8005a40 <HAL_TIM_PWM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800118a:	f000 f949 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 800119e:	f005 fbd3 	bl	8006948 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011a8:	f000 f93a 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	2360      	movs	r3, #96	@ 0x60
 80011ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 80011c4:	f004 fda4 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80011ce:	f000 f927 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 80011da:	f004 fd99 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80011e4:	f000 f91c 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 80011ea:	f000 fa19 	bl	8001620 <HAL_TIM_MspPostInit>

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	@ 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001b0 	.word	0x200001b0
 80011fc:	40000800 	.word	0x40000800

08001200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <MX_USART2_UART_Init+0x94>)
 8001208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800124a:	f005 fc91 	bl	8006b70 <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 f8e4 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800125c:	f006 fabe 	bl	80077dc <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001266:	f000 f8db 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800126e:	f006 faf3 	bl	8007858 <HAL_UARTEx_SetRxFifoThreshold>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 f8d2 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_USART2_UART_Init+0x90>)
 800127e:	f006 fa74 	bl	800776a <HAL_UARTEx_DisableFifoMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 f8ca 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001fc 	.word	0x200001fc
 8001294:	40004400 	.word	0x40004400

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a2:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_DMA_Init+0x50>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	201d      	movs	r0, #29
 80012d4:	f002 f893 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012d8:	201d      	movs	r0, #29
 80012da:	f002 f8aa 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a42      	ldr	r2, [pc, #264]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <MX_GPIO_Init+0x124>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a3c      	ldr	r2, [pc, #240]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b37      	ldr	r3, [pc, #220]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a36      	ldr	r2, [pc, #216]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <MX_GPIO_Init+0x124>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|AIN2_Pin|AIN1_Pin|STBY_Pin
 800134a:	2200      	movs	r2, #0
 800134c:	f241 11b0 	movw	r1, #4528	@ 0x11b0
 8001350:	4830      	ldr	r0, [pc, #192]	@ (8001414 <MX_GPIO_Init+0x128>)
 8001352:	f002 fcfd 	bl	8003d50 <HAL_GPIO_WritePin>
                          |BIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2108      	movs	r1, #8
 800135a:	482f      	ldr	r0, [pc, #188]	@ (8001418 <MX_GPIO_Init+0x12c>)
 800135c:	f002 fcf8 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : X1_Pin */
  GPIO_InitStruct.Pin = X1_Pin;
 8001360:	2310      	movs	r3, #16
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001364:	2303      	movs	r3, #3
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(X1_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	482a      	ldr	r0, [pc, #168]	@ (800141c <MX_GPIO_Init+0x130>)
 8001374:	f002 fb6c 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001378:	2301      	movs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4821      	ldr	r0, [pc, #132]	@ (8001414 <MX_GPIO_Init+0x128>)
 800138e:	f002 fb5f 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin AIN2_Pin AIN1_Pin STBY_Pin
                           BIN2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|AIN2_Pin|AIN1_Pin|STBY_Pin
 8001392:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8001396:	60fb      	str	r3, [r7, #12]
                          |BIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	481a      	ldr	r0, [pc, #104]	@ (8001414 <MX_GPIO_Init+0x128>)
 80013ac:	f002 fb50 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80013b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4813      	ldr	r0, [pc, #76]	@ (8001414 <MX_GPIO_Init+0x128>)
 80013c8:	f002 fb42 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN1_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin;
 80013cc:	2308      	movs	r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIN1_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	@ (8001418 <MX_GPIO_Init+0x12c>)
 80013e4:	f002 fb34 	bl	8003a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	200b      	movs	r0, #11
 80013ee:	f002 f806 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013f2:	200b      	movs	r0, #11
 80013f4:	f002 f81d 	bl	8003432 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2018      	movs	r0, #24
 80013fe:	f001 fffe 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001402:	2018      	movs	r0, #24
 8001404:	f002 f815 	bl	8003432 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	42020400 	.word	0x42020400
 8001418:	42021c00 	.word	0x42021c00
 800141c:	42020000 	.word	0x42020000

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <HAL_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6613      	str	r3, [r2, #96]	@ 0x60
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <HAL_MspInit+0x44>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6593      	str	r3, [r2, #88]	@ 0x58
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001462:	f002 fd2d 	bl	8003ec0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0ae      	sub	sp, #184	@ 0xb8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2294      	movs	r2, #148	@ 0x94
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f006 fb82 	bl	8007b9e <memset>
  if(hadc->Instance==ADC1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a41      	ldr	r2, [pc, #260]	@ (80015a4 <HAL_ADC_MspInit+0x130>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d17a      	bne.n	800159a <HAL_ADC_MspInit+0x126>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014be:	2307      	movs	r3, #7
 80014c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fcdd 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014e0:	f7ff ff9e 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	4a2f      	ldr	r2, [pc, #188]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 80014ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	4a29      	ldr	r2, [pc, #164]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <HAL_ADC_MspInit+0x134>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X3_Pin|X4_Pin;
 8001514:	23f0      	movs	r3, #240	@ 0xf0
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800152a:	4619      	mov	r1, r3
 800152c:	481f      	ldr	r0, [pc, #124]	@ (80015ac <HAL_ADC_MspInit+0x138>)
 800152e:	f002 fa8f 	bl	8003a50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_ADC_MspInit+0x140>)
 8001536:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 800153a:	2205      	movs	r2, #5
 800153c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001552:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001556:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 800155a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001562:	2220      	movs	r2, #32
 8001564:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 800156e:	f001 ff7b 	bl	8003468 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001578:	f7ff ff52 	bl	8001420 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800157c:	2110      	movs	r1, #16
 800157e:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001580:	f002 f995 	bl	80038ae <HAL_DMA_ConfigChannelAttributes>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800158a:	f7ff ff49 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001592:	651a      	str	r2, [r3, #80]	@ 0x50
 8001594:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <HAL_ADC_MspInit+0x13c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800159a:	bf00      	nop
 800159c:	37b8      	adds	r7, #184	@ 0xb8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	42028000 	.word	0x42028000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	42020000 	.word	0x42020000
 80015b0:	200000fc 	.word	0x200000fc
 80015b4:	40020008 	.word	0x40020008

080015b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <HAL_TIM_Base_MspInit+0x5c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10c      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015e2:	e010      	b.n	8001606 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_TIM_Base_MspInit+0x64>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10b      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <HAL_TIM_Base_MspInit+0x60>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40012c00 	.word	0x40012c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40000800 	.word	0x40000800

08001620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a23      	ldr	r2, [pc, #140]	@ (80016cc <HAL_TIM_MspPostInit+0xac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d11d      	bne.n	800167e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Servo2_Pin|Servo1_Pin;
 800165a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800166c:	2301      	movs	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	@ (80016d4 <HAL_TIM_MspPostInit+0xb4>)
 8001678:	f002 f9ea 	bl	8003a50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800167c:	e021      	b.n	80016c2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <HAL_TIM_MspPostInit+0xb8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11c      	bne.n	80016c2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80016a0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016b2:	2302      	movs	r3, #2
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	@ (80016dc <HAL_TIM_MspPostInit+0xbc>)
 80016be:	f002 f9c7 	bl	8003a50 <HAL_GPIO_Init>
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42020000 	.word	0x42020000
 80016d8:	40000800 	.word	0x40000800
 80016dc:	42020400 	.word	0x42020400

080016e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ae      	sub	sp, #184	@ 0xb8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2294      	movs	r2, #148	@ 0x94
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f006 fa4c 	bl	8007b9e <memset>
  if(huart->Instance==USART2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <HAL_UART_MspInit+0xb0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13a      	bne.n	8001786 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fbb9 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001728:	f7ff fe7a 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001736:	6593      	str	r3, [r2, #88]	@ 0x58
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175c:	230c      	movs	r3, #12
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001774:	2307      	movs	r3, #7
 8001776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 8001782:	f002 f965 	bl	8003a50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001786:	bf00      	nop
 8001788:	37b8      	adds	r7, #184	@ 0xb8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40021000 	.word	0x40021000
 8001798:	42020000 	.word	0x42020000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f9fd 	bl	8001bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80017fe:	2001      	movs	r0, #1
 8001800:	f002 fabe 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 800180c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001810:	f002 fab6 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Channel1_IRQHandler+0x10>)
 800181e:	f001 ff46 	bl	80036ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000fc 	.word	0x200000fc

0800182c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
  }

  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e009      	b.n	800188c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f813 	bl	80008ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_write+0x12>
  }
  return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f006 f980 	bl	8007c3c <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20030000 	.word	0x20030000
 8001968:	00000400 	.word	0x00000400
 800196c:	200002ac 	.word	0x200002ac
 8001970:	20000400 	.word	0x20000400

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800199e:	4b4f      	ldr	r3, [pc, #316]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80019aa:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 80019ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e005      	b.n	80019c6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80019ba:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80019c6:	4a46      	ldr	r2, [pc, #280]	@ (8001ae0 <SystemCoreClockUpdate+0x148>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d0:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d866      	bhi.n	8001aaa <SystemCoreClockUpdate+0x112>
 80019dc:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <SystemCoreClockUpdate+0x4c>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001aab 	.word	0x08001aab
 80019ec:	08001aab 	.word	0x08001aab
 80019f0:	08001aab 	.word	0x08001aab
 80019f4:	08001a21 	.word	0x08001a21
 80019f8:	08001aab 	.word	0x08001aab
 80019fc:	08001aab 	.word	0x08001aab
 8001a00:	08001aab 	.word	0x08001aab
 8001a04:	08001a29 	.word	0x08001a29
 8001a08:	08001aab 	.word	0x08001aab
 8001a0c:	08001aab 	.word	0x08001aab
 8001a10:	08001aab 	.word	0x08001aab
 8001a14:	08001a31 	.word	0x08001a31
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6013      	str	r3, [r2, #0]
      break;
 8001a1e:	e048      	b.n	8001ab2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001a22:	4a31      	ldr	r2, [pc, #196]	@ (8001ae8 <SystemCoreClockUpdate+0x150>)
 8001a24:	601a      	str	r2, [r3, #0]
      break;
 8001a26:	e044      	b.n	8001ab2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae8 <SystemCoreClockUpdate+0x150>)
 8001a2c:	601a      	str	r2, [r3, #0]
      break;
 8001a2e:	e040      	b.n	8001ab2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <SystemCoreClockUpdate+0xbe>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d006      	beq.n	8001a62 <SystemCoreClockUpdate+0xca>
 8001a54:	e00b      	b.n	8001a6e <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001a56:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <SystemCoreClockUpdate+0x150>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	613b      	str	r3, [r7, #16]
          break;
 8001a60:	e00b      	b.n	8001a7a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a62:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <SystemCoreClockUpdate+0x150>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	613b      	str	r3, [r7, #16]
          break;
 8001a6c:	e005      	b.n	8001a7a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	613b      	str	r3, [r7, #16]
          break;
 8001a78:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0e5b      	lsrs	r3, r3, #25
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001aa6:	6013      	str	r3, [r2, #0]
      break;
 8001aa8:	e003      	b.n	8001ab2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	6013      	str	r3, [r2, #0]
      break;
 8001ab0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <SystemCoreClockUpdate+0x144>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <SystemCoreClockUpdate+0x154>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <SystemCoreClockUpdate+0x14c>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08008878 	.word	0x08008878
 8001ae4:	20000010 	.word	0x20000010
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	08008860 	.word	0x08008860

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af4:	f7ff ff3e 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001af8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001afa:	e003      	b.n	8001b04 <LoopCopyDataInit>

08001afc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001afe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b02:	3104      	adds	r1, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b04:	480a      	ldr	r0, [pc, #40]	@ (8001b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b0c:	d3f6      	bcc.n	8001afc <CopyDataInit>
	ldr	r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b10:	e002      	b.n	8001b18 <LoopFillZerobss>

08001b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b14:	f842 3b04 	str.w	r3, [r2], #4

08001b18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <LoopForever+0x16>)
	cmp	r2, r3
 8001b1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b1c:	d3f9      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b1e:	f006 f893 	bl	8007c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7fe fed5 	bl	80008d0 <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b28:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001b2c:	08008924 	.word	0x08008924
	ldr	r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b34:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001b38:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001b3c:	20000400 	.word	0x20000400

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>

08001b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f001 fc4b 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001b52:	f7ff ff21 	bl	8001998 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b56:	2007      	movs	r0, #7
 8001b58:	f000 f80e 	bl	8001b78 <HAL_InitTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	71fb      	strb	r3, [r7, #7]
 8001b66:	e001      	b.n	8001b6c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b68:	f7ff fc60 	bl	800142c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_InitTick+0x6c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d023      	beq.n	8001bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_InitTick+0x70>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_InitTick+0x6c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fc53 	bl	800344e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b07      	cmp	r3, #7
 8001bb2:	d809      	bhi.n	8001bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f001 fc1f 	bl	80033fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_InitTick+0x74>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e004      	b.n	8001bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e001      	b.n	8001bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000018 	.word	0x20000018
 8001be8:	20000010 	.word	0x20000010
 8001bec:	20000014 	.word	0x20000014

08001bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000018 	.word	0x20000018
 8001c14:	200002b0 	.word	0x200002b0

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200002b0 	.word	0x200002b0

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000018 	.word	0x20000018

08001c78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3360      	adds	r3, #96	@ 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <LL_ADC_SetOffset+0x44>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	03fff000 	.word	0x03fff000

08001d28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3360      	adds	r3, #96	@ 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3360      	adds	r3, #96	@ 0x60
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	615a      	str	r2, [r3, #20]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b087      	sub	sp, #28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3330      	adds	r3, #48	@ 0x30
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	211f      	movs	r1, #31
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 011f 	and.w	r1, r3, #31
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	0e5b      	lsrs	r3, r3, #25
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0d1b      	lsrs	r3, r3, #20
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0d1b      	lsrs	r3, r3, #20
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	431a      	orrs	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0318 	and.w	r3, r3, #24
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ea8:	40d9      	lsrs	r1, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	400b      	ands	r3, r1
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	0007ffff 	.word	0x0007ffff

08001ecc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6093      	str	r3, [r2, #8]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f20:	d101      	bne.n	8001f26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f70:	d101      	bne.n	8001f76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_IsEnabled+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_IsEnabled+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d101      	bne.n	8002012 <LL_ADC_IsDisableOngoing+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_ADC_IsDisableOngoing+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d101      	bne.n	8002060 <LL_ADC_REG_IsConversionOngoing+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b08      	cmp	r3, #8
 8002080:	d101      	bne.n	8002086 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12e      	b.n	800230c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff f9d9 	bl	8001474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff19 	bl	8001f0c <LL_ADC_IsDeepPowerDownEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff feff 	bl	8001ee8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff34 	bl	8001f5c <LL_ADC_IsInternalRegulatorEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff18 	bl	8001f34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002104:	4b83      	ldr	r3, [pc, #524]	@ (8002314 <HAL_ADC_Init+0x280>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	4a83      	ldr	r2, [pc, #524]	@ (8002318 <HAL_ADC_Init+0x284>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	3301      	adds	r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002118:	e002      	b.n	8002120 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b01      	subs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff16 	bl	8001f5c <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff76 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 800215c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80c7 	bne.w	80022fa <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80c3 	bne.w	80022fa <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff23 	bl	8001fd4 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d110      	bne.n	80021b6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002194:	4861      	ldr	r0, [pc, #388]	@ (800231c <HAL_ADC_Init+0x288>)
 8002196:	f7ff ff1d 	bl	8001fd4 <LL_ADC_IsEnabled>
 800219a:	4604      	mov	r4, r0
 800219c:	4860      	ldr	r0, [pc, #384]	@ (8002320 <HAL_ADC_Init+0x28c>)
 800219e:	f7ff ff19 	bl	8001fd4 <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4323      	orrs	r3, r4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4619      	mov	r1, r3
 80021b0:	485c      	ldr	r0, [pc, #368]	@ (8002324 <HAL_ADC_Init+0x290>)
 80021b2:	f7ff fd61 	bl	8001c78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7e5b      	ldrb	r3, [r3, #25]
 80021ba:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021c6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021cc:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	3b01      	subs	r3, #1
 80021ea:	045b      	lsls	r3, r3, #17
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_ADC_Init+0x294>)
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	430b      	orrs	r3, r1
 8002220:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff21 	bl	800206e <LL_ADC_INJ_IsConversionOngoing>
 800222c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d140      	bne.n	80022b6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d13d      	bne.n	80022b6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7e1b      	ldrb	r3, [r3, #24]
 8002242:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002244:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800224c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800225c:	f023 0306 	bic.w	r3, r3, #6
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	430b      	orrs	r3, r1
 8002268:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002270:	2b01      	cmp	r3, #1
 8002272:	d118      	bne.n	80022a6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002296:	430a      	orrs	r2, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	e007      	b.n	80022b6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10c      	bne.n	80022d8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	f023 010f 	bic.w	r1, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d6:	e007      	b.n	80022e8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020f 	bic.w	r2, r2, #15
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	f023 0303 	bic.w	r3, r3, #3
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800230a:	7ffb      	ldrb	r3, [r7, #31]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3724      	adds	r7, #36	@ 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	20000010 	.word	0x20000010
 8002318:	053e2d63 	.word	0x053e2d63
 800231c:	42028000 	.word	0x42028000
 8002320:	42028100 	.word	0x42028100
 8002324:	42028300 	.word	0x42028300
 8002328:	fff0c007 	.word	0xfff0c007

0800232c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002338:	4850      	ldr	r0, [pc, #320]	@ (800247c <HAL_ADC_Start_DMA+0x150>)
 800233a:	f7ff fdc7 	bl	8001ecc <LL_ADC_GetMultimode>
 800233e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe7f 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 808e 	bne.w	800246e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_Start_DMA+0x34>
 800235c:	2302      	movs	r3, #2
 800235e:	e089      	b.n	8002474 <HAL_ADC_Start_DMA+0x148>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d002      	beq.n	800237a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b09      	cmp	r3, #9
 8002378:	d172      	bne.n	8002460 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fc92 	bl	8002ca4 <ADC_Enable>
 8002380:	4603      	mov	r3, r0
 8002382:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d165      	bne.n	8002456 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a37      	ldr	r2, [pc, #220]	@ (8002480 <HAL_ADC_Start_DMA+0x154>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d002      	beq.n	80023ae <HAL_ADC_Start_DMA+0x82>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_Start_DMA+0x84>
 80023ae:	4b35      	ldr	r3, [pc, #212]	@ (8002484 <HAL_ADC_Start_DMA+0x158>)
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d002      	beq.n	80023be <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	f023 0206 	bic.w	r2, r3, #6
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023e2:	e002      	b.n	80023ea <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ee:	4a26      	ldr	r2, [pc, #152]	@ (8002488 <HAL_ADC_Start_DMA+0x15c>)
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	4a25      	ldr	r2, [pc, #148]	@ (800248c <HAL_ADC_Start_DMA+0x160>)
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fe:	4a24      	ldr	r2, [pc, #144]	@ (8002490 <HAL_ADC_Start_DMA+0x164>)
 8002400:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	221c      	movs	r2, #28
 8002408:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0210 	orr.w	r2, r2, #16
 8002420:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3340      	adds	r3, #64	@ 0x40
 800243c:	4619      	mov	r1, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f001 f8b9 	bl	80035b8 <HAL_DMA_Start_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fde6 	bl	8002020 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002454:	e00d      	b.n	8002472 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 800245e:	e008      	b.n	8002472 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800246c:	e001      	b.n	8002472 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	42028300 	.word	0x42028300
 8002480:	42028100 	.word	0x42028100
 8002484:	42028000 	.word	0x42028000
 8002488:	08002e6f 	.word	0x08002e6f
 800248c:	08002f47 	.word	0x08002f47
 8002490:	08002f63 	.word	0x08002f63

08002494 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b0b7      	sub	sp, #220	@ 0xdc
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x22>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e3c1      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x7a6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fda2 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 83a6 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	f7ff fc5c 	bl	8001dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fd90 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 8002528:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd9c 	bl	800206e <LL_ADC_INJ_IsConversionOngoing>
 8002536:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800253a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 81c1 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 81bc 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002556:	d10f      	bne.n	8002578 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff fc63 	bl	8001e2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fc0a 	bl	8001d8a <LL_ADC_SetSamplingTimeCommonConfig>
 8002576:	e00e      	b.n	8002596 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fc52 	bl	8001e2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fbfa 	bl	8001d8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d00a      	beq.n	80025ce <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025c8:	f7ff fb8a 	bl	8001ce0 <LL_ADC_SetOffset>
 80025cc:	e17b      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fba7 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x12a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb9c 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	e01e      	b.n	8002638 <HAL_ADC_ConfigChannel+0x168>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb91 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800261c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e004      	b.n	8002636 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800262c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x180>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	e018      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1b2>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800266c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e004      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002682:	429a      	cmp	r2, r3
 8002684:	d106      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fb60 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb44 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1f0>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fb39 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	e01e      	b.n	80026fe <HAL_ADC_ConfigChannel+0x22e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fb2e 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80026de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80026e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80026f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x246>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	e018      	b.n	8002748 <HAL_ADC_ConfigChannel+0x278>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800272a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800272e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002732:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e004      	b.n	8002748 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800273e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fafd 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fae1 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x2b6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2102      	movs	r1, #2
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fad6 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	e01e      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x2f4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2102      	movs	r1, #2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff facb 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80027a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80027ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e004      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80027b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x30c>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	e016      	b.n	800280a <HAL_ADC_ConfigChannel+0x33a>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80027ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80027f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e004      	b.n	800280a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa9c 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fa80 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x378>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2103      	movs	r1, #3
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa75 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	e017      	b.n	8002878 <HAL_ADC_ConfigChannel+0x3a8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2103      	movs	r1, #3
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa6a 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002862:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800286e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x3c0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	e011      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x3e4>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800289e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80028a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80028ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d106      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	2103      	movs	r1, #3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fa47 	bl	8001d54 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fb82 	bl	8001fd4 <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 81c9 	bne.w	8002c6a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff facd 	bl	8001e84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a8f      	ldr	r2, [pc, #572]	@ (8002b2c <HAL_ADC_ConfigChannel+0x65c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f040 8131 	bne.w	8002b58 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_ADC_ConfigChannel+0x44e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b09      	cmp	r3, #9
 8002914:	bf94      	ite	ls
 8002916:	2301      	movls	r3, #1
 8002918:	2300      	movhi	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e019      	b.n	8002952 <HAL_ADC_ConfigChannel+0x482>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800292c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800292e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e003      	b.n	8002942 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800293a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2b09      	cmp	r3, #9
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002952:	2b00      	cmp	r3, #0
 8002954:	d079      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x4a2>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	069b      	lsls	r3, r3, #26
 800296c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002970:	e015      	b.n	800299e <HAL_ADC_ConfigChannel+0x4ce>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002982:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	069b      	lsls	r3, r3, #26
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4ee>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	3301      	adds	r3, #1
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	e017      	b.n	80029ee <HAL_ADC_ConfigChannel+0x51e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80029cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80029d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e003      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80029da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	ea42 0103 	orr.w	r1, r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x544>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	051b      	lsls	r3, r3, #20
 8002a12:	e018      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x576>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a46:	430b      	orrs	r3, r1
 8002a48:	e081      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x596>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a64:	e015      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x5c2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x5e2>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	e017      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x612>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002aca:	2320      	movs	r3, #32
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x63e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	3b1e      	subs	r3, #30
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	e01e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x67c>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	613b      	str	r3, [r7, #16]
  return result;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e006      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x668>
 8002b2a:	bf00      	nop
 8002b2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 021f 	and.w	r2, r3, #31
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	3b1e      	subs	r3, #30
 8002b46:	051b      	lsls	r3, r3, #20
 8002b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7ff f96b 	bl	8001e2e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b48      	ldr	r3, [pc, #288]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8082 	beq.w	8002c6a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b66:	4847      	ldr	r0, [pc, #284]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b68:	f7ff f8ac 	bl	8001cc4 <LL_ADC_GetCommonPathInternalCh>
 8002b6c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b70:	4845      	ldr	r0, [pc, #276]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b72:	f7ff fa2f 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002b76:	4604      	mov	r4, r0
 8002b78:	4844      	ldr	r0, [pc, #272]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7bc>)
 8002b7a:	f7ff fa2b 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4323      	orrs	r3, r4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d15e      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a41      	ldr	r2, [pc, #260]	@ (8002c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d127      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d121      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a39      	ldr	r2, [pc, #228]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d161      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002baa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4834      	ldr	r0, [pc, #208]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bb2:	f7ff f874 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb6:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002bce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bde:	e044      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c9c <HAL_ADC_ConfigChannel+0x7cc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d113      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d134      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481e      	ldr	r0, [pc, #120]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c0c:	f7ff f847 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c10:	e02b      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d126      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d120      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d11b      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4811      	ldr	r0, [pc, #68]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c3e:	f7ff f82e 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
 8002c42:	e012      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c56:	e008      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	37dc      	adds	r7, #220	@ 0xdc
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	80080000 	.word	0x80080000
 8002c84:	42028300 	.word	0x42028300
 8002c88:	42028000 	.word	0x42028000
 8002c8c:	42028100 	.word	0x42028100
 8002c90:	c7520000 	.word	0xc7520000
 8002c94:	20000010 	.word	0x20000010
 8002c98:	053e2d63 	.word	0x053e2d63
 8002c9c:	cb840000 	.word	0xcb840000
 8002ca0:	80000001 	.word	0x80000001

08002ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f98d 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d169      	bne.n	8002d94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <ADC_Enable+0xfc>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e055      	b.n	8002d96 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f948 	bl	8001f84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cf4:	482b      	ldr	r0, [pc, #172]	@ (8002da4 <ADC_Enable+0x100>)
 8002cf6:	f7fe ffe5 	bl	8001cc4 <LL_ADC_GetCommonPathInternalCh>
 8002cfa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d04:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <ADC_Enable+0x104>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	4a28      	ldr	r2, [pc, #160]	@ (8002dac <ADC_Enable+0x108>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d1e:	e002      	b.n	8002d26 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe ff74 	bl	8001c18 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d32:	e028      	b.n	8002d86 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f94b 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f91b 	bl	8001f84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d4e:	f7fe ff63 	bl	8001c18 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d914      	bls.n	8002d86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00d      	beq.n	8002d86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e007      	b.n	8002d96 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d1cf      	bne.n	8002d34 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	8000003f 	.word	0x8000003f
 8002da4:	42028300 	.word	0x42028300
 8002da8:	20000010 	.word	0x20000010
 8002dac:	053e2d63 	.word	0x053e2d63

08002db0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f91c 	bl	8001ffa <LL_ADC_IsDisableOngoing>
 8002dc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f903 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d047      	beq.n	8002e64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d144      	bne.n	8002e64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030d 	and.w	r3, r3, #13
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10c      	bne.n	8002e02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff f8dd 	bl	8001fac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2203      	movs	r2, #3
 8002df8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe ff0d 	bl	8001c18 <HAL_GetTick>
 8002dfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e00:	e029      	b.n	8002e56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e023      	b.n	8002e66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e1e:	f7fe fefb 	bl	8001c18 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d914      	bls.n	8002e56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e007      	b.n	8002e66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1dc      	bne.n	8002e1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d14b      	bne.n	8002f20 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d021      	beq.n	8002ee6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe ff82 	bl	8001db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d032      	beq.n	8002f18 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d12b      	bne.n	8002f18 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11f      	bne.n	8002f18 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ee4:	e018      	b.n	8002f18 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff fabb 	bl	8002494 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f1e:	e00e      	b.n	8002f3e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fac5 	bl	80024bc <HAL_ADC_ErrorCallback>
}
 8002f32:	e004      	b.n	8002f3e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff faa7 	bl	80024a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff fa97 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LL_ADC_IsEnabled>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_IsEnabled+0x18>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_IsEnabled+0x1a>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_StartCalibration>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002fce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_IsCalibrationOnGoing>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003002:	d101      	bne.n	8003008 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_ADC_REG_IsConversionOngoing>:
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d101      	bne.n	800302e <LL_ADC_REG_IsConversionOngoing+0x18>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_ADCEx_Calibration_Start+0x1c>
 8003054:	2302      	movs	r3, #2
 8003056:	e04d      	b.n	80030f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fea5 	bl	8002db0 <ADC_Disable>
 8003066:	4603      	mov	r3, r0
 8003068:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d136      	bne.n	80030de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff96 	bl	8002fbc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003090:	e014      	b.n	80030bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_ADCEx_Calibration_Start+0xc0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d90d      	bls.n	80030bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	f023 0312 	bic.w	r3, r3, #18
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e01b      	b.n	80030f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff94 	bl	8002fee <LL_ADC_IsCalibrationOnGoing>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e2      	bne.n	8003092 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f023 0303 	bic.w	r3, r3, #3
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	@ 0x58
 80030dc:	e005      	b.n	80030ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	0006cbff 	.word	0x0006cbff

08003100 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b0a1      	sub	sp, #132	@ 0x84
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e089      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003126:	2300      	movs	r3, #0
 8003128:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800312a:	2300      	movs	r3, #0
 800312c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a42      	ldr	r2, [pc, #264]	@ (800323c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003138:	4b41      	ldr	r3, [pc, #260]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e001      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e068      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff57 	bl	8003016 <LL_ADC_REG_IsConversionOngoing>
 8003168:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff51 	bl	8003016 <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d14a      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800317a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800317c:	2b00      	cmp	r3, #0
 800317e:	d147      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003182:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d027      	beq.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800318c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800319e:	035b      	lsls	r3, r3, #13
 80031a0:	430b      	orrs	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a8:	4824      	ldr	r0, [pc, #144]	@ (800323c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80031aa:	f7ff fef4 	bl	8002f96 <LL_ADC_IsEnabled>
 80031ae:	4604      	mov	r4, r0
 80031b0:	4823      	ldr	r0, [pc, #140]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80031b2:	f7ff fef0 	bl	8002f96 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4323      	orrs	r3, r4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d132      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031c6:	f023 030f 	bic.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	6811      	ldr	r1, [r2, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031da:	e023      	b.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031e8:	4814      	ldr	r0, [pc, #80]	@ (800323c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80031ea:	f7ff fed4 	bl	8002f96 <LL_ADC_IsEnabled>
 80031ee:	4604      	mov	r4, r0
 80031f0:	4813      	ldr	r0, [pc, #76]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80031f2:	f7ff fed0 	bl	8002f96 <LL_ADC_IsEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4323      	orrs	r3, r4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d112      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003206:	f023 030f 	bic.w	r3, r3, #15
 800320a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800320c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800320e:	e009      	b.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003222:	e000      	b.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800322e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003232:	4618      	mov	r0, r3
 8003234:	3784      	adds	r7, #132	@ 0x84
 8003236:	46bd      	mov	sp, r7
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	bf00      	nop
 800323c:	42028000 	.word	0x42028000
 8003240:	42028100 	.word	0x42028100
 8003244:	42028300 	.word	0x42028300

08003248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	@ (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	@ (80032e4 <__NVIC_EnableIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	@ (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0152      	lsls	r2, r2, #5
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	@ (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0152      	lsls	r2, r2, #5
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	@ 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b03      	cmp	r3, #3
 8003358:	bf28      	it	cs
 800335a:	2303      	movcs	r3, #3
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3303      	adds	r3, #3
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b04      	subs	r3, #4
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
         );
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	@ 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	2107      	movs	r1, #7
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff8e 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff29 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800340c:	f7ff ff40 	bl	8003290 <__NVIC_GetPriorityGrouping>
 8003410:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7ff ff90 	bl	800333c <NVIC_EncodePriority>
 800341c:	4602      	mov	r2, r0
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff5f 	bl	80032e8 <__NVIC_SetPriority>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff33 	bl	80032ac <__NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffa4 	bl	80033a4 <SysTick_Config>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e08d      	b.n	8003596 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_DMA_Init+0x138>)
 8003482:	429a      	cmp	r2, r3
 8003484:	d80f      	bhi.n	80034a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	4b45      	ldr	r3, [pc, #276]	@ (80035a4 <HAL_DMA_Init+0x13c>)
 800348e:	4413      	add	r3, r2
 8003490:	4a45      	ldr	r2, [pc, #276]	@ (80035a8 <HAL_DMA_Init+0x140>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	009a      	lsls	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a42      	ldr	r2, [pc, #264]	@ (80035ac <HAL_DMA_Init+0x144>)
 80034a2:	649a      	str	r2, [r3, #72]	@ 0x48
 80034a4:	e00e      	b.n	80034c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <HAL_DMA_Init+0x148>)
 80034ae:	4413      	add	r3, r2
 80034b0:	4a3d      	ldr	r2, [pc, #244]	@ (80035a8 <HAL_DMA_Init+0x140>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a3c      	ldr	r2, [pc, #240]	@ (80035b4 <HAL_DMA_Init+0x14c>)
 80034c2:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 80034da:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 80034de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa38 	bl	800398c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003524:	d102      	bne.n	800352c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003540:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_DMA_Init+0x104>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d80c      	bhi.n	800356c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa58 	bl	8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	e008      	b.n	800357e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40020407 	.word	0x40020407
 80035a4:	bffdfff8 	.word	0xbffdfff8
 80035a8:	cccccccd 	.word	0xcccccccd
 80035ac:	40020000 	.word	0x40020000
 80035b0:	bffdfbf8 	.word	0xbffdfbf8
 80035b4:	40020400 	.word	0x40020400

080035b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_DMA_Start_IT+0x20>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e066      	b.n	80036a6 <HAL_DMA_Start_IT+0xee>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d155      	bne.n	8003698 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f97c 	bl	800390e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 020e 	orr.w	r2, r2, #14
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e00f      	b.n	8003650 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 020a 	orr.w	r2, r2, #10
 800364e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003684:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e005      	b.n	80036a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f003 031c 	and.w	r3, r3, #28
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d053      	beq.n	8003782 <HAL_DMA_IRQHandler+0xd4>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04e      	beq.n	8003782 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d024      	beq.n	800373c <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	f003 021c 	and.w	r2, r3, #28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fe:	2104      	movs	r1, #4
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80c0 	beq.w	800389e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003726:	e0ba      	b.n	800389e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80b6 	beq.w	800389e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800373a:	e0b0      	b.n	800389e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375e:	f003 021c 	and.w	r2, r3, #28
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003766:	2104      	movs	r1, #4
 8003768:	fa01 f202 	lsl.w	r2, r1, r2
 800376c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8093 	beq.w	800389e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003780:	e08d      	b.n	800389e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003786:	f003 031c 	and.w	r3, r3, #28
 800378a:	2202      	movs	r2, #2
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04e      	beq.n	8003834 <HAL_DMA_IRQHandler+0x186>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d049      	beq.n	8003834 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d06e      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037cc:	e069      	b.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d065      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037de:	e060      	b.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020a 	bic.w	r2, r2, #10
 80037fc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	f003 021c 	and.w	r2, r3, #28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	2102      	movs	r1, #2
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d03b      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003832:	e036      	b.n	80038a2 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003838:	f003 031c 	and.w	r3, r3, #28
 800383c:	2208      	movs	r2, #8
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02e      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x1f8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d029      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020e 	bic.w	r2, r2, #14
 8003860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	f003 021c 	and.w	r2, r3, #28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800389c:	e002      	b.n	80038a4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80038a2:	bf00      	nop
  return;
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
}
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	72fb      	strb	r3, [r7, #11]
    return status;
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	e01b      	b.n	8003902 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e003      	b.n	80038f8 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038f6:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  return status;
 8003900:	7afb      	ldrb	r3, [r7, #11]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003924:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393c:	f003 021c 	and.w	r2, r3, #28
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b10      	cmp	r3, #16
 800395a:	d108      	bne.n	800396e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800396c:	e007      	b.n	800397e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	60da      	str	r2, [r3, #12]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800399c:	429a      	cmp	r2, r3
 800399e:	d80a      	bhi.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039ac:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039b4:	e007      	b.n	80039c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039c0:	4413      	add	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3b08      	subs	r3, #8
 80039ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0a      	ldr	r2, [pc, #40]	@ (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40020407 	.word	0x40020407
 80039fc:	40020820 	.word	0x40020820
 8003a00:	cccccccd 	.word	0xcccccccd
 8003a04:	40020880 	.word	0x40020880

08003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a08      	ldr	r2, [pc, #32]	@ (8003a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	1000823f 	.word	0x1000823f
 8003a4c:	40020940 	.word	0x40020940

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a5e:	e158      	b.n	8003d12 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 814a 	beq.w	8003d0c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d005      	beq.n	8003a90 <HAL_GPIO_Init+0x40>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d130      	bne.n	8003af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0201 	and.w	r2, r3, #1
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d017      	beq.n	8003b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d123      	bne.n	8003b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	6939      	ldr	r1, [r7, #16]
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a4 	beq.w	8003d0c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3318      	adds	r3, #24
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a52      	ldr	r2, [pc, #328]	@ (8003d34 <HAL_GPIO_Init+0x2e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d025      	beq.n	8003c3c <HAL_GPIO_Init+0x1ec>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a51      	ldr	r2, [pc, #324]	@ (8003d38 <HAL_GPIO_Init+0x2e8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01f      	beq.n	8003c38 <HAL_GPIO_Init+0x1e8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a50      	ldr	r2, [pc, #320]	@ (8003d3c <HAL_GPIO_Init+0x2ec>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d019      	beq.n	8003c34 <HAL_GPIO_Init+0x1e4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a4f      	ldr	r2, [pc, #316]	@ (8003d40 <HAL_GPIO_Init+0x2f0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_GPIO_Init+0x1e0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_GPIO_Init+0x2f4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00d      	beq.n	8003c2c <HAL_GPIO_Init+0x1dc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_GPIO_Init+0x2f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <HAL_GPIO_Init+0x1d8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_GPIO_Init+0x2fc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_GPIO_Init+0x1d4>
 8003c20:	2306      	movs	r3, #6
 8003c22:	e00c      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c24:	2307      	movs	r3, #7
 8003c26:	e00a      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c28:	2305      	movs	r3, #5
 8003c2a:	e008      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	e006      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c30:	2303      	movs	r3, #3
 8003c32:	e004      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e002      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_GPIO_Init+0x1ee>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	f002 0203 	and.w	r2, r2, #3
 8003c44:	00d2      	lsls	r2, r2, #3
 8003c46:	4093      	lsls	r3, r2
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003c4e:	4938      	ldr	r1, [pc, #224]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	3318      	adds	r3, #24
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c5c:	4b34      	ldr	r3, [pc, #208]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c80:	4a2b      	ldr	r2, [pc, #172]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c86:	4b2a      	ldr	r3, [pc, #168]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cd6:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d04:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <HAL_GPIO_Init+0x2e0>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f47f ae9f 	bne.w	8003a60 <HAL_GPIO_Init+0x10>
  }
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	4002f400 	.word	0x4002f400
 8003d34:	42020000 	.word	0x42020000
 8003d38:	42020400 	.word	0x42020400
 8003d3c:	42020800 	.word	0x42020800
 8003d40:	42020c00 	.word	0x42020c00
 8003d44:	42021000 	.word	0x42021000
 8003d48:	42021400 	.word	0x42021400
 8003d4c:	42021800 	.word	0x42021800

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d6c:	e002      	b.n	8003d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003d96:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fd0e 	bl	80007c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003db0:	4a05      	ldr	r2, [pc, #20]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fd2f 	bl	800081c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	4002f400 	.word	0x4002f400

08003dcc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_ICACHE_Enable+0x1c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <HAL_ICACHE_Enable+0x1c>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40030400 	.word	0x40030400

08003dec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40007000 	.word	0x40007000

08003e08 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003e10:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e18:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003e1a:	f000 f861 	bl	8003ee0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e24:	d101      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e03e      	b.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003e2a:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e36:	d101      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e035      	b.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d101      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e02f      	b.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e48:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003e50:	4917      	ldr	r1, [pc, #92]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003e58:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	09db      	lsrs	r3, r3, #7
 8003e66:	2232      	movs	r2, #50	@ 0x32
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	08db      	lsrs	r3, r3, #3
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e78:	e002      	b.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8c:	d102      	bne.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f2      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e94:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea0:	d101      	bne.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e000      	b.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	20000010 	.word	0x20000010
 8003eb8:	0a7c5ac5 	.word	0x0a7c5ac5
 8003ebc:	cccccccd 	.word	0xcccccccd

08003ec0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ece:	6093      	str	r3, [r2, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40007000 	.word	0x40007000

08003ee0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	e00a      	b.n	8003f14 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	e001      	b.n	8003f14 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40007000 	.word	0x40007000

08003f28 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f000 bcc2 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3c:	4b99      	ldr	r3, [pc, #612]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f46:	4b97      	ldr	r3, [pc, #604]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80e9 	beq.w	8004130 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d006      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4a>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	f040 8083 	bne.w	8004072 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d17f      	bne.n	8004072 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f72:	4b8c      	ldr	r3, [pc, #560]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_RCC_OscConfig+0x64>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f000 bc9a 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f90:	4b84      	ldr	r3, [pc, #528]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x7e>
 8003f9c:	4b81      	ldr	r3, [pc, #516]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCC_OscConfig+0x8a>
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d224      	bcs.n	8004000 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fe9a 	bl	8004cf4 <RCC_SetFlashLatencyFromMSIRange>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f000 bc7a 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fcc:	4b75      	ldr	r3, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a74      	ldr	r2, [pc, #464]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	f043 0308 	orr.w	r3, r3, #8
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	496f      	ldr	r1, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fea:	4b6e      	ldr	r3, [pc, #440]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	496a      	ldr	r1, [pc, #424]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
 8003ffe:	e026      	b.n	800404e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004000:	4b68      	ldr	r3, [pc, #416]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a67      	ldr	r2, [pc, #412]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b65      	ldr	r3, [pc, #404]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	4962      	ldr	r1, [pc, #392]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401e:	4b61      	ldr	r3, [pc, #388]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	495d      	ldr	r1, [pc, #372]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fe59 	bl	8004cf4 <RCC_SetFlashLatencyFromMSIRange>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f000 bc39 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800404e:	f000 fe15 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004052:	4603      	mov	r3, r0
 8004054:	4a54      	ldr	r2, [pc, #336]	@ (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004056:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004058:	4b54      	ldr	r3, [pc, #336]	@ (80041ac <HAL_RCC_OscConfig+0x284>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fd fd8b 	bl	8001b78 <HAL_InitTick>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d060      	beq.n	800412e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	f000 bc27 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d039      	beq.n	80040ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800407a:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a49      	ldr	r2, [pc, #292]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004086:	f7fd fdc7 	bl	8001c18 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408c:	e00f      	b.n	80040ae <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800408e:	f7fd fdc3 	bl	8001c18 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d908      	bls.n	80040ae <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409c:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	f000 bc09 	b.w	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ae:	4b3d      	ldr	r3, [pc, #244]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0e9      	beq.n	800408e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ba:	4b3a      	ldr	r3, [pc, #232]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	4934      	ldr	r1, [pc, #208]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d8:	4b32      	ldr	r3, [pc, #200]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	492f      	ldr	r1, [pc, #188]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	e020      	b.n	8004130 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040ee:	4b2d      	ldr	r3, [pc, #180]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2c      	ldr	r2, [pc, #176]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fd8d 	bl	8001c18 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004100:	e00e      	b.n	8004120 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004102:	f7fd fd89 	bl	8001c18 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d907      	bls.n	8004120 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004110:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e3cf      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004120:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ea      	bne.n	8004102 <HAL_RCC_OscConfig+0x1da>
 800412c:	e000      	b.n	8004130 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800412e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d07e      	beq.n	800423a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x226>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d10e      	bne.n	8004166 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d10b      	bne.n	8004166 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414e:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d06e      	beq.n	8004238 <HAL_RCC_OscConfig+0x310>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d16a      	bne.n	8004238 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e3ac      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x256>
 8004170:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0b      	ldr	r2, [pc, #44]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e024      	b.n	80041c8 <HAL_RCC_OscConfig+0x2a0>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004186:	d113      	bne.n	80041b0 <HAL_RCC_OscConfig+0x288>
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a02      	ldr	r2, [pc, #8]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e012      	b.n	80041c8 <HAL_RCC_OscConfig+0x2a0>
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	20000010 	.word	0x20000010
 80041ac:	20000014 	.word	0x20000014
 80041b0:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8a      	ldr	r2, [pc, #552]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b88      	ldr	r3, [pc, #544]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a87      	ldr	r2, [pc, #540]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d019      	beq.n	8004204 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fd22 	bl	8001c18 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d6:	e00e      	b.n	80041f6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd fd1e 	bl	8001c18 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	@ 0x64
 80041e4:	d907      	bls.n	80041f6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e6:	4b7e      	ldr	r3, [pc, #504]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e364      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b7a      	ldr	r3, [pc, #488]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ea      	beq.n	80041d8 <HAL_RCC_OscConfig+0x2b0>
 8004202:	e01a      	b.n	800423a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fd08 	bl	8001c18 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	e00e      	b.n	800422a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fd04 	bl	8001c18 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	@ 0x64
 8004218:	d907      	bls.n	800422a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421a:	4b71      	ldr	r3, [pc, #452]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e34a      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	4b6d      	ldr	r3, [pc, #436]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ea      	bne.n	800420c <HAL_RCC_OscConfig+0x2e4>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d06c      	beq.n	8004320 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d005      	beq.n	8004258 <HAL_RCC_OscConfig+0x330>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d119      	bne.n	8004286 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d116      	bne.n	8004286 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x348>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e327      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b5b      	ldr	r3, [pc, #364]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	4958      	ldr	r1, [pc, #352]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	e04c      	b.n	8004320 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d029      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428e:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a53      	ldr	r2, [pc, #332]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fd fcbd 	bl	8001c18 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a0:	e00e      	b.n	80042c0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a2:	f7fd fcb9 	bl	8001c18 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d907      	bls.n	80042c0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b0:	4b4b      	ldr	r3, [pc, #300]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e2ff      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c0:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ea      	beq.n	80042a2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	4941      	ldr	r1, [pc, #260]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
 80042e0:	e01e      	b.n	8004320 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e2:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3e      	ldr	r2, [pc, #248]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd fc93 	bl	8001c18 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f4:	e00e      	b.n	8004314 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f6:	f7fd fc8f 	bl	8001c18 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d907      	bls.n	8004314 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004304:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e2d5      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ea      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d062      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d038      	beq.n	80043a6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d108      	bne.n	800434e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800433c:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004342:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800434c:	e007      	b.n	800435e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004354:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004356:	f043 0310 	orr.w	r3, r3, #16
 800435a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004364:	4a1e      	ldr	r2, [pc, #120]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd fc53 	bl	8001c18 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004374:	e00f      	b.n	8004396 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd fc4f 	bl	8001c18 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b07      	cmp	r3, #7
 8004382:	d908      	bls.n	8004396 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004384:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e294      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004396:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0e8      	beq.n	8004376 <HAL_RCC_OscConfig+0x44e>
 80043a4:	e025      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a6:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ac:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fc2f 	bl	8001c18 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043bc:	e012      	b.n	80043e4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fc2b 	bl	8001c18 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d90b      	bls.n	80043e4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e270      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e4:	4ba8      	ldr	r3, [pc, #672]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 812d 	beq.w	800465a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004404:	4ba0      	ldr	r3, [pc, #640]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10d      	bne.n	800442c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b9d      	ldr	r3, [pc, #628]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	4a9c      	ldr	r2, [pc, #624]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	@ 0x58
 800441c:	4b9a      	ldr	r3, [pc, #616]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004428:	2301      	movs	r3, #1
 800442a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442c:	4b97      	ldr	r3, [pc, #604]	@ (800468c <HAL_RCC_OscConfig+0x764>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11e      	bne.n	8004476 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004438:	4b94      	ldr	r3, [pc, #592]	@ (800468c <HAL_RCC_OscConfig+0x764>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a93      	ldr	r2, [pc, #588]	@ (800468c <HAL_RCC_OscConfig+0x764>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004444:	f7fd fbe8 	bl	8001c18 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	e00e      	b.n	800446a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fd fbe4 	bl	8001c18 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d907      	bls.n	800446a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445a:	4b8c      	ldr	r3, [pc, #560]	@ (800468c <HAL_RCC_OscConfig+0x764>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e22a      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446a:	4b88      	ldr	r3, [pc, #544]	@ (800468c <HAL_RCC_OscConfig+0x764>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ea      	beq.n	800444c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01f      	beq.n	80044c2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800448e:	4b7e      	ldr	r3, [pc, #504]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	4a7c      	ldr	r2, [pc, #496]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800449e:	4b7a      	ldr	r3, [pc, #488]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a4:	4a78      	ldr	r2, [pc, #480]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ae:	e018      	b.n	80044e2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044b0:	4b75      	ldr	r3, [pc, #468]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	4a74      	ldr	r2, [pc, #464]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044c0:	e00f      	b.n	80044e2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044c2:	4b71      	ldr	r3, [pc, #452]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c8:	4a6f      	ldr	r2, [pc, #444]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80044da:	f023 0304 	bic.w	r3, r3, #4
 80044de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d068      	beq.n	80045bc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fd fb95 	bl	8001c18 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f0:	e011      	b.n	8004516 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fd fb91 	bl	8001c18 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d908      	bls.n	8004516 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004504:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1d4      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	4b5c      	ldr	r3, [pc, #368]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0e6      	beq.n	80044f2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d022      	beq.n	8004576 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004530:	4b55      	ldr	r3, [pc, #340]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	4a54      	ldr	r2, [pc, #336]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004540:	e011      	b.n	8004566 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fd fb69 	bl	8001c18 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d908      	bls.n	8004566 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004554:	4b4c      	ldr	r3, [pc, #304]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1ac      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004566:	4b48      	ldr	r3, [pc, #288]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e6      	beq.n	8004542 <HAL_RCC_OscConfig+0x61a>
 8004574:	e068      	b.n	8004648 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004576:	4b44      	ldr	r3, [pc, #272]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457c:	4a42      	ldr	r2, [pc, #264]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800457e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004586:	e011      	b.n	80045ac <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fd fb46 	bl	8001c18 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d908      	bls.n	80045ac <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800459a:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e189      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ac:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <HAL_RCC_OscConfig+0x660>
 80045ba:	e045      	b.n	8004648 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fb2c 	bl	8001c18 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c2:	e011      	b.n	80045e8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fd fb28 	bl	8001c18 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d908      	bls.n	80045e8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e16b      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e6      	bne.n	80045c4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80045f6:	4b24      	ldr	r3, [pc, #144]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d021      	beq.n	8004648 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004604:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800460c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004614:	e011      	b.n	800463a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd faff 	bl	8001c18 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d908      	bls.n	800463a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004628:	4b17      	ldr	r3, [pc, #92]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e142      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800463a:	4b13      	ldr	r3, [pc, #76]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004648:	7ffb      	ldrb	r3, [r7, #31]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d04f      	beq.n	8004706 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <HAL_RCC_OscConfig+0x760>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd facb 	bl	8001c18 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x788>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004690:	f7fd fac2 	bl	8001c18 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d908      	bls.n	80046b0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800469e:	4b8a      	ldr	r3, [pc, #552]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e107      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046b0:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0e8      	beq.n	8004690 <HAL_RCC_OscConfig+0x768>
 80046be:	e022      	b.n	8004706 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046c0:	4b81      	ldr	r3, [pc, #516]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046c6:	4a80      	ldr	r2, [pc, #512]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd faa2 	bl	8001c18 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046d6:	e00f      	b.n	80046f8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d8:	f7fd fa9e 	bl	8001c18 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d908      	bls.n	80046f8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e6:	4b78      	ldr	r3, [pc, #480]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0e3      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f8:	4b73      	ldr	r3, [pc, #460]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80046fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e8      	bne.n	80046d8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80d7 	beq.w	80048be <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004710:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b0c      	cmp	r3, #12
 800471a:	f000 8091 	beq.w	8004840 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	2b02      	cmp	r3, #2
 8004724:	d166      	bne.n	80047f4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b68      	ldr	r3, [pc, #416]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a67      	ldr	r2, [pc, #412]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 800472c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fd fa71 	bl	8001c18 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004738:	e00e      	b.n	8004758 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd fa6d 	bl	8001c18 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d907      	bls.n	8004758 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004748:	4b5f      	ldr	r3, [pc, #380]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0b3      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ea      	bne.n	800473a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004764:	4b58      	ldr	r3, [pc, #352]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4b58      	ldr	r3, [pc, #352]	@ (80048cc <HAL_RCC_OscConfig+0x9a4>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004774:	3a01      	subs	r2, #1
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800477e:	0212      	lsls	r2, r2, #8
 8004780:	4311      	orrs	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004786:	0852      	lsrs	r2, r2, #1
 8004788:	3a01      	subs	r2, #1
 800478a:	0552      	lsls	r2, r2, #21
 800478c:	4311      	orrs	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004792:	0852      	lsrs	r2, r2, #1
 8004794:	3a01      	subs	r2, #1
 8004796:	0652      	lsls	r2, r2, #25
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800479e:	06d2      	lsls	r2, r2, #27
 80047a0:	430a      	orrs	r2, r1
 80047a2:	4949      	ldr	r1, [pc, #292]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a46      	ldr	r2, [pc, #280]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b4:	4b44      	ldr	r3, [pc, #272]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a43      	ldr	r2, [pc, #268]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fa2a 	bl	8001c18 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c6:	e00e      	b.n	80047e6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd fa26 	bl	8001c18 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d907      	bls.n	80047e6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b3c      	ldr	r3, [pc, #240]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e06c      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e6:	4b38      	ldr	r3, [pc, #224]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ea      	beq.n	80047c8 <HAL_RCC_OscConfig+0x8a0>
 80047f2:	e064      	b.n	80048be <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a33      	ldr	r2, [pc, #204]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fa0a 	bl	8001c18 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004806:	e00e      	b.n	8004826 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd fa06 	bl	8001c18 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d907      	bls.n	8004826 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004816:	4b2c      	ldr	r3, [pc, #176]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e04c      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004826:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ea      	bne.n	8004808 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004832:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	4924      	ldr	r1, [pc, #144]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 8004838:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <HAL_RCC_OscConfig+0x9a8>)
 800483a:	4013      	ands	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
 800483e:	e03e      	b.n	80048be <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e039      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800484c:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCC_OscConfig+0x9a0>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0203 	and.w	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	429a      	cmp	r2, r3
 800485e:	d12c      	bne.n	80048ba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486a:	3b01      	subs	r3, #1
 800486c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d123      	bne.n	80048ba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11b      	bne.n	80048ba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d113      	bne.n	80048ba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	3b01      	subs	r3, #1
 80048b4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d001      	beq.n	80048be <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	019f800c 	.word	0x019f800c
 80048d0:	feeefffc 	.word	0xfeeefffc

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e11c      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b90      	ldr	r3, [pc, #576]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 020f 	bic.w	r2, r3, #15
 8004902:	498b      	ldr	r1, [pc, #556]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b89      	ldr	r3, [pc, #548]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e104      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004934:	429a      	cmp	r2, r3
 8004936:	d908      	bls.n	800494a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004938:	4b7e      	ldr	r3, [pc, #504]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	497b      	ldr	r1, [pc, #492]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8085 	beq.w	8004a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d11f      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004960:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0da      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004970:	f000 fa24 	bl	8004dbc <RCC_GetSysClockFreqFromPLLSource>
 8004974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4a6f      	ldr	r2, [pc, #444]	@ (8004b38 <HAL_RCC_ClockConfig+0x264>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d947      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800497e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d141      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800498a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004992:	4a68      	ldr	r2, [pc, #416]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004998:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e036      	b.n	8004a0e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a8:	4b62      	ldr	r3, [pc, #392]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d115      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b6      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0aa      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d0:	4b58      	ldr	r3, [pc, #352]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a2      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049e0:	f000 f8b0 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4a53      	ldr	r2, [pc, #332]	@ (8004b38 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d90f      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049ee:	4b51      	ldr	r3, [pc, #324]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a02:	4a4c      	ldr	r2, [pc, #304]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a0a:	2380      	movs	r3, #128	@ 0x80
 8004a0c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4946      	ldr	r1, [pc, #280]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fd f8fa 	bl	8001c18 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	e013      	b.n	8004a50 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fd f8f6 	bl	8001c18 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d90a      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e06a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a50:	4b38      	ldr	r3, [pc, #224]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 020c 	and.w	r2, r3, #12
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d1e2      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b80      	cmp	r3, #128	@ 0x80
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a68:	4b32      	ldr	r3, [pc, #200]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a31      	ldr	r2, [pc, #196]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a72:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d010      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d208      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4925      	ldr	r1, [pc, #148]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa2:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d210      	bcs.n	8004ad2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 020f 	bic.w	r2, r3, #15
 8004ab8:	491d      	ldr	r1, [pc, #116]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e029      	b.n	8004b26 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4912      	ldr	r1, [pc, #72]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d009      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b10:	f000 f8b4 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x268>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd f82a 	bl	8001b78 <HAL_InitTick>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	04c4b400 	.word	0x04c4b400
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	20000014 	.word	0x20000014

08004b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b5c:	4b44      	ldr	r3, [pc, #272]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d121      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d11e      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b78:	4b3d      	ldr	r3, [pc, #244]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b84:	4b3a      	ldr	r3, [pc, #232]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e005      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b94:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004ba0:	4a34      	ldr	r2, [pc, #208]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x130>)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d102      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x134>)
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e004      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x134>)
 8004bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d146      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bd2:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bdc:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3301      	adds	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0xb4>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d00d      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0xce>
 8004bf6:	e019      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x134>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c02:	68d2      	ldr	r2, [r2, #12]
 8004c04:	0a12      	lsrs	r2, r2, #8
 8004c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	617b      	str	r3, [r7, #20]
        break;
 8004c10:	e019      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c12:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x134>)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c1c:	68d2      	ldr	r2, [r2, #12]
 8004c1e:	0a12      	lsrs	r2, r2, #8
 8004c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
        break;
 8004c2a:	e00c      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	4a0e      	ldr	r2, [pc, #56]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	0a12      	lsrs	r2, r2, #8
 8004c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	617b      	str	r3, [r7, #20]
        break;
 8004c44:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004c46:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	0e5b      	lsrs	r3, r3, #25
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	3301      	adds	r3, #1
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c60:	69bb      	ldr	r3, [r7, #24]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	@ 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	08008878 	.word	0x08008878
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004c80:	f7ff ff60 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCC_GetHCLKFreq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	08008860 	.word	0x08008860

08004ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca8:	f7ff ffe8 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	@ (8004cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	08008870 	.word	0x08008870

08004ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd0:	f7ff ffd4 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0adb      	lsrs	r3, r3, #11
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	@ (8004cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	08008870 	.word	0x08008870

08004cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d00:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d0c:	f7ff f86e 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004d10:	6138      	str	r0, [r7, #16]
 8004d12:	e014      	b.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d14:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d18:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d2c:	f7ff f85e 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004d30:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d32:	4b20      	ldr	r3, [pc, #128]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d36:	4a1f      	ldr	r2, [pc, #124]	@ (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4a:	d10b      	bne.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b80      	cmp	r3, #128	@ 0x80
 8004d50:	d919      	bls.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d56:	d902      	bls.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d58:	2302      	movs	r3, #2
 8004d5a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004d5c:	e013      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d5e:	2301      	movs	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004d62:	e010      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b80      	cmp	r3, #128	@ 0x80
 8004d68:	d902      	bls.n	8004d70 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e00a      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d102      	bne.n	8004d7c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d76:	2302      	movs	r3, #2
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e004      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b70      	cmp	r3, #112	@ 0x70
 8004d80:	d101      	bne.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d82:	2301      	movs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d86:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 020f 	bic.w	r2, r3, #15
 8004d8e:	490a      	ldr	r1, [pc, #40]	@ (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004d96:	4b08      	ldr	r3, [pc, #32]	@ (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40022000 	.word	0x40022000

08004dbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dc2:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d015      	beq.n	8004e0c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d839      	bhi.n	8004e5a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d01c      	beq.n	8004e26 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d133      	bne.n	8004e5a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df2:	4a26      	ldr	r2, [pc, #152]	@ (8004e8c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004dfc:	68d2      	ldr	r2, [r2, #12]
 8004dfe:	0a12      	lsrs	r2, r2, #8
 8004e00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	613b      	str	r3, [r7, #16]
      break;
 8004e0a:	e029      	b.n	8004e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e16:	68d2      	ldr	r2, [r2, #12]
 8004e18:	0a12      	lsrs	r2, r2, #8
 8004e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
      break;
 8004e24:	e01c      	b.n	8004e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e26:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e32:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e005      	b.n	8004e4e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e42:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004e4e:	4a10      	ldr	r2, [pc, #64]	@ (8004e90 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	613b      	str	r3, [r7, #16]
        break;
 8004e58:	e002      	b.n	8004e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
      break;
 8004e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	0e5b      	lsrs	r3, r3, #25
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e7a:	683b      	ldr	r3, [r7, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	08008878 	.word	0x08008878

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d040      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb4:	2b80      	cmp	r3, #128	@ 0x80
 8004eb6:	d02a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004eb8:	2b80      	cmp	r3, #128	@ 0x80
 8004eba:	d825      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ebc:	2b60      	cmp	r3, #96	@ 0x60
 8004ebe:	d026      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ec0:	2b60      	cmp	r3, #96	@ 0x60
 8004ec2:	d821      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	d006      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d81d      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d010      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ed4:	e018      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4a8e      	ldr	r2, [pc, #568]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ee2:	e015      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fb56 	bl	800559c <RCCEx_PLLSAI1_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3320      	adds	r3, #32
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc33 	bl	8005768 <RCCEx_PLLSAI2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f06:	e003      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	77fb      	strb	r3, [r7, #31]
        break;
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f10:	7ffb      	ldrb	r3, [r7, #31]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f16:	4b7f      	ldr	r3, [pc, #508]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f1c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f24:	497b      	ldr	r1, [pc, #492]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d047      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d030      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4c:	d82a      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f52:	d02a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f58:	d824      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5e:	d008      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f64:	d81e      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6e:	d010      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f70:	e018      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f72:	4b68      	ldr	r3, [pc, #416]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a67      	ldr	r2, [pc, #412]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f7e:	e015      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fb08 	bl	800559c <RCCEx_PLLSAI1_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f90:	e00c      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3320      	adds	r3, #32
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fbe5 	bl	8005768 <RCCEx_PLLSAI2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fa2:	e003      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
        break;
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	7ffb      	ldrb	r3, [r7, #31]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fb2:	4b58      	ldr	r3, [pc, #352]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	4954      	ldr	r1, [pc, #336]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004fc8:	e001      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80ab 	beq.w	8005132 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe0:	4b4c      	ldr	r3, [pc, #304]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10d      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	4b49      	ldr	r3, [pc, #292]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff0:	4a48      	ldr	r2, [pc, #288]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff8:	4b46      	ldr	r3, [pc, #280]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005008:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a42      	ldr	r2, [pc, #264]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005014:	f7fc fe00 	bl	8001c18 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501a:	e00f      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fc fdfc 	bl	8001c18 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d908      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800503a:	e006      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503c:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0e9      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005048:	e000      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800504a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800504c:	7ffb      	ldrb	r3, [r7, #31]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d164      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005052:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01f      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	d019      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005070:	4b28      	ldr	r3, [pc, #160]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800507a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800507c:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	4a24      	ldr	r2, [pc, #144]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800508c:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005092:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800509c:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01f      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fc fdb3 	bl	8001c18 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b4:	e012      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fc fdaf 	bl	8001c18 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d909      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80050da:	e007      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0e5      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80050ec:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f4:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005104:	4903      	ldr	r1, [pc, #12]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800510c:	e008      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	77bb      	strb	r3, [r7, #30]
 8005112:	e005      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005114:	40021000 	.word	0x40021000
 8005118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	7ffb      	ldrb	r3, [r7, #31]
 800511e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005126:	4b9c      	ldr	r3, [pc, #624]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512a:	4a9b      	ldr	r2, [pc, #620]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005130:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800513e:	4b96      	ldr	r3, [pc, #600]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f023 0203 	bic.w	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	4992      	ldr	r1, [pc, #584]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005160:	4b8d      	ldr	r3, [pc, #564]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 020c 	bic.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	498a      	ldr	r1, [pc, #552]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005182:	4b85      	ldr	r3, [pc, #532]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	4981      	ldr	r1, [pc, #516]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	4979      	ldr	r1, [pc, #484]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051c6:	4b74      	ldr	r3, [pc, #464]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d4:	4970      	ldr	r1, [pc, #448]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f6:	4968      	ldr	r1, [pc, #416]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520a:	4b63      	ldr	r3, [pc, #396]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005218:	495f      	ldr	r1, [pc, #380]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800522c:	4b5a      	ldr	r3, [pc, #360]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523a:	4957      	ldr	r1, [pc, #348]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800524e:	4b52      	ldr	r3, [pc, #328]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005254:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800525c:	494e      	ldr	r1, [pc, #312]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d031      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005278:	d00e      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800527a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800527e:	d814      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005288:	d10f      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528a:	4b43      	ldr	r3, [pc, #268]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4a42      	ldr	r2, [pc, #264]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005294:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005296:	e00c      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f97c 	bl	800559c <RCCEx_PLLSAI1_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	77fb      	strb	r3, [r7, #31]
        break;
 80052ae:	e000      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80052b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052b8:	4b37      	ldr	r3, [pc, #220]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c6:	4934      	ldr	r1, [pc, #208]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052ce:	e001      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ee:	492a      	ldr	r1, [pc, #168]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005302:	4b25      	ldr	r3, [pc, #148]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005308:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005310:	4921      	ldr	r1, [pc, #132]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005324:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	4919      	ldr	r1, [pc, #100]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005346:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800534c:	f023 0203 	bic.w	r2, r3, #3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	4910      	ldr	r1, [pc, #64]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02b      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005376:	4908      	ldr	r1, [pc, #32]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005388:	4b03      	ldr	r3, [pc, #12]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a02      	ldr	r2, [pc, #8]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005392:	60d3      	str	r3, [r2, #12]
 8005394:	e014      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f8f5 	bl	800559c <RCCEx_PLLSAI1_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80053b6:	7ffb      	ldrb	r3, [r7, #31]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d04a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053d4:	d108      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80053d6:	4b70      	ldr	r3, [pc, #448]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80053e6:	e012      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80053e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053f6:	4968      	ldr	r1, [pc, #416]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80053fe:	4b66      	ldr	r3, [pc, #408]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005404:	4a64      	ldr	r2, [pc, #400]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005406:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800540a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005412:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005416:	d10d      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f8bc 	bl	800559c <RCCEx_PLLSAI1_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005428:	7ffb      	ldrb	r3, [r7, #31]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d019      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	77bb      	strb	r3, [r7, #30]
 8005432:	e016      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543e:	4b56      	ldr	r3, [pc, #344]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4a55      	ldr	r2, [pc, #340]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005448:	60d3      	str	r3, [r2, #12]
 800544a:	e00a      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005454:	d105      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005456:	4b50      	ldr	r3, [pc, #320]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a4f      	ldr	r2, [pc, #316]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d028      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800546e:	4b4a      	ldr	r3, [pc, #296]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800547c:	4946      	ldr	r1, [pc, #280]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548c:	d106      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548e:	4b42      	ldr	r3, [pc, #264]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	4a41      	ldr	r2, [pc, #260]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005494:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005498:	60d3      	str	r3, [r2, #12]
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f875 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054b6:	7ffb      	ldrb	r3, [r7, #31]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80054bc:	7ffb      	ldrb	r3, [r7, #31]
 80054be:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01e      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054cc:	4b32      	ldr	r3, [pc, #200]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054dc:	492e      	ldr	r1, [pc, #184]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ee:	d10c      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	2102      	movs	r1, #2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f850 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005506:	7ffb      	ldrb	r3, [r7, #31]
 8005508:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800551c:	f023 0204 	bic.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005526:	491c      	ldr	r1, [pc, #112]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800553a:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800553c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005540:	f023 0218 	bic.w	r2, r3, #24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	4913      	ldr	r1, [pc, #76]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d017      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005564:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800556e:	490a      	ldr	r1, [pc, #40]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800557c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005580:	d105      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005582:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800558e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40021000 	.word	0x40021000

0800559c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d018      	beq.n	80055e4 <RCCEx_PLLSAI1_Config+0x48>
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d81f      	bhi.n	80055f6 <RCCEx_PLLSAI1_Config+0x5a>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d002      	beq.n	80055c0 <RCCEx_PLLSAI1_Config+0x24>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d009      	beq.n	80055d2 <RCCEx_PLLSAI1_Config+0x36>
 80055be:	e01a      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055c0:	4b65      	ldr	r3, [pc, #404]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d117      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d0:	e014      	b.n	80055fc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055d2:	4b61      	ldr	r3, [pc, #388]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d110      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e2:	e00d      	b.n	8005600 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80055e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f4:	e006      	b.n	8005604 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
      break;
 80055fa:	e004      	b.n	8005606 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005604:	bf00      	nop
  }

  if (status == HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 809f 	bne.w	800574c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800560e:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a51      	ldr	r2, [pc, #324]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005614:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561a:	f7fc fafd 	bl	8001c18 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005620:	e00f      	b.n	8005642 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005622:	f7fc faf9 	bl	8001c18 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d908      	bls.n	8005642 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005630:	4b49      	ldr	r3, [pc, #292]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005640:	e006      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005642:	4b45      	ldr	r3, [pc, #276]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e9      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0x86>
 800564e:	e000      	b.n	8005652 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005650:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d179      	bne.n	800574c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d116      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565e:	4b3e      	ldr	r3, [pc, #248]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	4b3e      	ldr	r3, [pc, #248]	@ (800575c <RCCEx_PLLSAI1_Config+0x1c0>)
 8005664:	4013      	ands	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6892      	ldr	r2, [r2, #8]
 800566a:	0211      	lsls	r1, r2, #8
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68d2      	ldr	r2, [r2, #12]
 8005670:	06d2      	lsls	r2, r2, #27
 8005672:	4311      	orrs	r1, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6852      	ldr	r2, [r2, #4]
 8005678:	3a01      	subs	r2, #1
 800567a:	0112      	lsls	r2, r2, #4
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	4934      	ldr	r1, [pc, #208]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]
 800568a:	e033      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d118      	bne.n	80056c4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	4b32      	ldr	r3, [pc, #200]	@ (8005760 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6892      	ldr	r2, [r2, #8]
 800569e:	0211      	lsls	r1, r2, #8
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6912      	ldr	r2, [r2, #16]
 80056a4:	0852      	lsrs	r2, r2, #1
 80056a6:	3a01      	subs	r2, #1
 80056a8:	0552      	lsls	r2, r2, #21
 80056aa:	4311      	orrs	r1, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	3a01      	subs	r2, #1
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	4311      	orrs	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	4926      	ldr	r1, [pc, #152]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	610b      	str	r3, [r1, #16]
 80056c2:	e017      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c4:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <RCCEx_PLLSAI1_Config+0x1c8>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6892      	ldr	r2, [r2, #8]
 80056d0:	0211      	lsls	r1, r2, #8
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6952      	ldr	r2, [r2, #20]
 80056d6:	0852      	lsrs	r2, r2, #1
 80056d8:	3a01      	subs	r2, #1
 80056da:	0652      	lsls	r2, r2, #25
 80056dc:	4311      	orrs	r1, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6852      	ldr	r2, [r2, #4]
 80056e2:	3a01      	subs	r2, #1
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	491a      	ldr	r1, [pc, #104]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056f4:	4b18      	ldr	r3, [pc, #96]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a17      	ldr	r2, [pc, #92]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fc fa8a 	bl	8001c18 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005706:	e00f      	b.n	8005728 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005708:	f7fc fa86 	bl	8001c18 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d908      	bls.n	8005728 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005716:	4b10      	ldr	r3, [pc, #64]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005726:	e006      	b.n	8005736 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005728:	4b0b      	ldr	r3, [pc, #44]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0e9      	beq.n	8005708 <RCCEx_PLLSAI1_Config+0x16c>
 8005734:	e000      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005736:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800573e:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	4904      	ldr	r1, [pc, #16]	@ (8005758 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005748:	4313      	orrs	r3, r2
 800574a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000
 800575c:	07ff800c 	.word	0x07ff800c
 8005760:	ff9f800c 	.word	0xff9f800c
 8005764:	f9ff800c 	.word	0xf9ff800c

08005768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d018      	beq.n	80057b0 <RCCEx_PLLSAI2_Config+0x48>
 800577e:	2b03      	cmp	r3, #3
 8005780:	d81f      	bhi.n	80057c2 <RCCEx_PLLSAI2_Config+0x5a>
 8005782:	2b01      	cmp	r3, #1
 8005784:	d002      	beq.n	800578c <RCCEx_PLLSAI2_Config+0x24>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d009      	beq.n	800579e <RCCEx_PLLSAI2_Config+0x36>
 800578a:	e01a      	b.n	80057c2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578c:	4b4a      	ldr	r3, [pc, #296]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d117      	bne.n	80057c8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579c:	e014      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800579e:	4b46      	ldr	r3, [pc, #280]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d110      	bne.n	80057cc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ae:	e00d      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80057b0:	4b41      	ldr	r3, [pc, #260]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c0:	e006      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e004      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80057d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d169      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057d8:	4b37      	ldr	r3, [pc, #220]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a36      	ldr	r2, [pc, #216]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80057de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e4:	f7fc fa18 	bl	8001c18 <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ea:	e00f      	b.n	800580c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057ec:	f7fc fa14 	bl	8001c18 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d908      	bls.n	800580c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057fa:	4b2f      	ldr	r3, [pc, #188]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800580a:	e006      	b.n	800581a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800580c:	4b2a      	ldr	r3, [pc, #168]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e9      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x84>
 8005818:	e000      	b.n	800581c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800581a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d144      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d115      	bne.n	8005854 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005828:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <RCCEx_PLLSAI2_Config+0x154>)
 800582e:	4013      	ands	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6892      	ldr	r2, [r2, #8]
 8005834:	0211      	lsls	r1, r2, #8
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	06d2      	lsls	r2, r2, #27
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6852      	ldr	r2, [r2, #4]
 8005842:	3a01      	subs	r2, #1
 8005844:	0112      	lsls	r2, r2, #4
 8005846:	4311      	orrs	r1, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	491a      	ldr	r1, [pc, #104]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 8005850:	4313      	orrs	r3, r2
 8005852:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005854:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fc f9da 	bl	8001c18 <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005866:	e00f      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005868:	f7fc f9d6 	bl	8001c18 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d908      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005876:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005886:	e006      	b.n	8005896 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0e9      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x100>
 8005894:	e000      	b.n	8005898 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005896:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800589e:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4904      	ldr	r1, [pc, #16]	@ (80058b8 <RCCEx_PLLSAI2_Config+0x150>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	07ff800c 	.word	0x07ff800c

080058c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e049      	b.n	8005966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb fe66 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fbe4 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e047      	b.n	8005a18 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	@ (8005a24 <HAL_TIM_Base_Start+0xb4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a2:	d018      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a28 <HAL_TIM_Base_Start+0xb8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_TIM_Base_Start+0xbc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a30 <HAL_TIM_Base_Start+0xc0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_TIM_Base_Start+0xc4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_TIM_Base_Start+0x66>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <HAL_TIM_Base_Start+0xc8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d115      	bne.n	8005a02 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <HAL_TIM_Base_Start+0xcc>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d015      	beq.n	8005a14 <HAL_TIM_Base_Start+0xa4>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ee:	d011      	beq.n	8005a14 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	e008      	b.n	8005a14 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40013400 	.word	0x40013400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	00010007 	.word	0x00010007

08005a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e049      	b.n	8005ae6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f841 	bl	8005aee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f000 fb24 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_TIM_PWM_Start+0x24>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e03c      	b.n	8005ba2 <HAL_TIM_PWM_Start+0x9e>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d109      	bne.n	8005b42 <HAL_TIM_PWM_Start+0x3e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e02f      	b.n	8005ba2 <HAL_TIM_PWM_Start+0x9e>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x58>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e022      	b.n	8005ba2 <HAL_TIM_PWM_Start+0x9e>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d109      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x72>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e015      	b.n	8005ba2 <HAL_TIM_PWM_Start+0x9e>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d109      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x8c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e008      	b.n	8005ba2 <HAL_TIM_PWM_Start+0x9e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	bf14      	ite	ne
 8005b9c:	2301      	movne	r3, #1
 8005b9e:	2300      	moveq	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e09c      	b.n	8005ce4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <HAL_TIM_PWM_Start+0xb6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_PWM_Start+0xfe>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_PWM_Start+0xc6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bc8:	e01b      	b.n	8005c02 <HAL_TIM_PWM_Start+0xfe>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_PWM_Start+0xd6>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bd8:	e013      	b.n	8005c02 <HAL_TIM_PWM_Start+0xfe>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start+0xe6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be8:	e00b      	b.n	8005c02 <HAL_TIM_PWM_Start+0xfe>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0xf6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf8:	e003      	b.n	8005c02 <HAL_TIM_PWM_Start+0xfe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2201      	movs	r2, #1
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fe76 	bl	80068fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a35      	ldr	r2, [pc, #212]	@ (8005cec <HAL_TIM_PWM_Start+0x1e8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x13e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a34      	ldr	r2, [pc, #208]	@ (8005cf0 <HAL_TIM_PWM_Start+0x1ec>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x13e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a32      	ldr	r2, [pc, #200]	@ (8005cf4 <HAL_TIM_PWM_Start+0x1f0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x13e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a31      	ldr	r2, [pc, #196]	@ (8005cf8 <HAL_TIM_PWM_Start+0x1f4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x13e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <HAL_TIM_PWM_Start+0x1f8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x142>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_TIM_PWM_Start+0x144>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	@ (8005cec <HAL_TIM_PWM_Start+0x1e8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6e:	d018      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <HAL_TIM_PWM_Start+0x1fc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a21      	ldr	r2, [pc, #132]	@ (8005d04 <HAL_TIM_PWM_Start+0x200>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <HAL_TIM_PWM_Start+0x204>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <HAL_TIM_PWM_Start+0x1ec>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x19e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	@ (8005cf4 <HAL_TIM_PWM_Start+0x1f0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d115      	bne.n	8005cce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <HAL_TIM_PWM_Start+0x208>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	d015      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1dc>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cba:	d011      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ccc:	e008      	b.n	8005ce0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e000      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	00010007 	.word	0x00010007

08005d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0ff      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b14      	cmp	r3, #20
 8005d3a:	f200 80f0 	bhi.w	8005f1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005f1f 	.word	0x08005f1f
 8005d4c:	08005f1f 	.word	0x08005f1f
 8005d50:	08005f1f 	.word	0x08005f1f
 8005d54:	08005dd9 	.word	0x08005dd9
 8005d58:	08005f1f 	.word	0x08005f1f
 8005d5c:	08005f1f 	.word	0x08005f1f
 8005d60:	08005f1f 	.word	0x08005f1f
 8005d64:	08005e1b 	.word	0x08005e1b
 8005d68:	08005f1f 	.word	0x08005f1f
 8005d6c:	08005f1f 	.word	0x08005f1f
 8005d70:	08005f1f 	.word	0x08005f1f
 8005d74:	08005e5b 	.word	0x08005e5b
 8005d78:	08005f1f 	.word	0x08005f1f
 8005d7c:	08005f1f 	.word	0x08005f1f
 8005d80:	08005f1f 	.word	0x08005f1f
 8005d84:	08005e9d 	.word	0x08005e9d
 8005d88:	08005f1f 	.word	0x08005f1f
 8005d8c:	08005f1f 	.word	0x08005f1f
 8005d90:	08005f1f 	.word	0x08005f1f
 8005d94:	08005edd 	.word	0x08005edd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fa3a 	bl	8006218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0204 	bic.w	r2, r2, #4
 8005dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6999      	ldr	r1, [r3, #24]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	619a      	str	r2, [r3, #24]
      break;
 8005dd6:	e0a5      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 faaa 	bl	8006338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	619a      	str	r2, [r3, #24]
      break;
 8005e18:	e084      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fb13 	bl	800644c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0208 	orr.w	r2, r2, #8
 8005e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0204 	bic.w	r2, r2, #4
 8005e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69d9      	ldr	r1, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	61da      	str	r2, [r3, #28]
      break;
 8005e58:	e064      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fb7b 	bl	800655c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	021a      	lsls	r2, r3, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	61da      	str	r2, [r3, #28]
      break;
 8005e9a:	e043      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fbc4 	bl	8006630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0208 	orr.w	r2, r2, #8
 8005eb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0204 	bic.w	r2, r2, #4
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005eda:	e023      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fc08 	bl	80066f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	021a      	lsls	r2, r3, #8
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f1c:	e002      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
      break;
 8005f22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_ConfigClockSource+0x1c>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e0b6      	b.n	80060c2 <HAL_TIM_ConfigClockSource+0x18a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f90:	d03e      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0xd8>
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f96:	f200 8087 	bhi.w	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9e:	f000 8086 	beq.w	80060ae <HAL_TIM_ConfigClockSource+0x176>
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	d87f      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fa8:	2b70      	cmp	r3, #112	@ 0x70
 8005faa:	d01a      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0xaa>
 8005fac:	2b70      	cmp	r3, #112	@ 0x70
 8005fae:	d87b      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fb0:	2b60      	cmp	r3, #96	@ 0x60
 8005fb2:	d050      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x11e>
 8005fb4:	2b60      	cmp	r3, #96	@ 0x60
 8005fb6:	d877      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fb8:	2b50      	cmp	r3, #80	@ 0x50
 8005fba:	d03c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0xfe>
 8005fbc:	2b50      	cmp	r3, #80	@ 0x50
 8005fbe:	d873      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fc0:	2b40      	cmp	r3, #64	@ 0x40
 8005fc2:	d058      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x13e>
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d86f      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fc8:	2b30      	cmp	r3, #48	@ 0x30
 8005fca:	d064      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15e>
 8005fcc:	2b30      	cmp	r3, #48	@ 0x30
 8005fce:	d86b      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d060      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15e>
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d867      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d05c      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15e>
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d05a      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15e>
 8005fe0:	e062      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff2:	f000 fc63 	bl	80068bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	609a      	str	r2, [r3, #8]
      break;
 800600e:	e04f      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	f000 fc4c 	bl	80068bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006032:	609a      	str	r2, [r3, #8]
      break;
 8006034:	e03c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006042:	461a      	mov	r2, r3
 8006044:	f000 fbbe 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2150      	movs	r1, #80	@ 0x50
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fc17 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 8006054:	e02c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006062:	461a      	mov	r2, r3
 8006064:	f000 fbdd 	bl	8006822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2160      	movs	r1, #96	@ 0x60
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fc07 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 8006074:	e01c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006082:	461a      	mov	r2, r3
 8006084:	f000 fb9e 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2140      	movs	r1, #64	@ 0x40
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fbf7 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 8006094:	e00c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 fbee 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 80060a6:	e003      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
      break;
 80060ac:	e000      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a46      	ldr	r2, [pc, #280]	@ (80061f8 <TIM_Base_SetConfig+0x12c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ea:	d00f      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a43      	ldr	r2, [pc, #268]	@ (80061fc <TIM_Base_SetConfig+0x130>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a42      	ldr	r2, [pc, #264]	@ (8006200 <TIM_Base_SetConfig+0x134>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a41      	ldr	r2, [pc, #260]	@ (8006204 <TIM_Base_SetConfig+0x138>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a40      	ldr	r2, [pc, #256]	@ (8006208 <TIM_Base_SetConfig+0x13c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d108      	bne.n	800611e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <TIM_Base_SetConfig+0x12c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01f      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612c:	d01b      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a32      	ldr	r2, [pc, #200]	@ (80061fc <TIM_Base_SetConfig+0x130>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d017      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a31      	ldr	r2, [pc, #196]	@ (8006200 <TIM_Base_SetConfig+0x134>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a30      	ldr	r2, [pc, #192]	@ (8006204 <TIM_Base_SetConfig+0x138>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2f      	ldr	r2, [pc, #188]	@ (8006208 <TIM_Base_SetConfig+0x13c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2e      	ldr	r2, [pc, #184]	@ (800620c <TIM_Base_SetConfig+0x140>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <TIM_Base_SetConfig+0x144>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2c      	ldr	r2, [pc, #176]	@ (8006214 <TIM_Base_SetConfig+0x148>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <TIM_Base_SetConfig+0x12c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <TIM_Base_SetConfig+0x13c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a17      	ldr	r2, [pc, #92]	@ (800620c <TIM_Base_SetConfig+0x140>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <TIM_Base_SetConfig+0x144>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <TIM_Base_SetConfig+0x148>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d103      	bne.n	80061cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d105      	bne.n	80061ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]
  }
}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f023 0201 	bic.w	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 0302 	bic.w	r3, r3, #2
 8006264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a2c      	ldr	r2, [pc, #176]	@ (8006324 <TIM_OC1_SetConfig+0x10c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_OC1_SetConfig+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <TIM_OC1_SetConfig+0x110>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_OC1_SetConfig+0x80>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <TIM_OC1_SetConfig+0x114>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC1_SetConfig+0x80>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a29      	ldr	r2, [pc, #164]	@ (8006330 <TIM_OC1_SetConfig+0x118>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC1_SetConfig+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <TIM_OC1_SetConfig+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10c      	bne.n	80062b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0308 	bic.w	r3, r3, #8
 800629e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006324 <TIM_OC1_SetConfig+0x10c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00f      	beq.n	80062da <TIM_OC1_SetConfig+0xc2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006328 <TIM_OC1_SetConfig+0x110>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00b      	beq.n	80062da <TIM_OC1_SetConfig+0xc2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a19      	ldr	r2, [pc, #100]	@ (800632c <TIM_OC1_SetConfig+0x114>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <TIM_OC1_SetConfig+0xc2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a18      	ldr	r2, [pc, #96]	@ (8006330 <TIM_OC1_SetConfig+0x118>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_OC1_SetConfig+0xc2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <TIM_OC1_SetConfig+0x11c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d111      	bne.n	80062fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800

08006338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f023 0210 	bic.w	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0320 	bic.w	r3, r3, #32
 8006386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a28      	ldr	r2, [pc, #160]	@ (8006438 <TIM_OC2_SetConfig+0x100>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_OC2_SetConfig+0x6c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a27      	ldr	r2, [pc, #156]	@ (800643c <TIM_OC2_SetConfig+0x104>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10d      	bne.n	80063c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <TIM_OC2_SetConfig+0x100>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00f      	beq.n	80063e8 <TIM_OC2_SetConfig+0xb0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <TIM_OC2_SetConfig+0x104>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_OC2_SetConfig+0xb0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <TIM_OC2_SetConfig+0x108>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_OC2_SetConfig+0xb0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <TIM_OC2_SetConfig+0x10c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC2_SetConfig+0xb0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <TIM_OC2_SetConfig+0x110>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d113      	bne.n	8006410 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800

0800644c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a27      	ldr	r2, [pc, #156]	@ (8006548 <TIM_OC3_SetConfig+0xfc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC3_SetConfig+0x6a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a26      	ldr	r2, [pc, #152]	@ (800654c <TIM_OC3_SetConfig+0x100>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10d      	bne.n	80064d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <TIM_OC3_SetConfig+0xfc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_OC3_SetConfig+0xae>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <TIM_OC3_SetConfig+0x100>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_OC3_SetConfig+0xae>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006550 <TIM_OC3_SetConfig+0x104>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC3_SetConfig+0xae>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a19      	ldr	r2, [pc, #100]	@ (8006554 <TIM_OC3_SetConfig+0x108>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC3_SetConfig+0xae>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <TIM_OC3_SetConfig+0x10c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d113      	bne.n	8006522 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	031b      	lsls	r3, r3, #12
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <TIM_OC4_SetConfig+0xc0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00f      	beq.n	80065e0 <TIM_OC4_SetConfig+0x84>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a17      	ldr	r2, [pc, #92]	@ (8006620 <TIM_OC4_SetConfig+0xc4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_OC4_SetConfig+0x84>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a16      	ldr	r2, [pc, #88]	@ (8006624 <TIM_OC4_SetConfig+0xc8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_OC4_SetConfig+0x84>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <TIM_OC4_SetConfig+0xcc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC4_SetConfig+0x84>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a14      	ldr	r2, [pc, #80]	@ (800662c <TIM_OC4_SetConfig+0xd0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800

08006630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800665e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <TIM_OC5_SetConfig+0xb4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00f      	beq.n	80066aa <TIM_OC5_SetConfig+0x7a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <TIM_OC5_SetConfig+0xb8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00b      	beq.n	80066aa <TIM_OC5_SetConfig+0x7a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <TIM_OC5_SetConfig+0xbc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_OC5_SetConfig+0x7a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a14      	ldr	r2, [pc, #80]	@ (80066f0 <TIM_OC5_SetConfig+0xc0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC5_SetConfig+0x7a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a13      	ldr	r2, [pc, #76]	@ (80066f4 <TIM_OC5_SetConfig+0xc4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d109      	bne.n	80066be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800673e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	051b      	lsls	r3, r3, #20
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <TIM_OC6_SetConfig+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_OC6_SetConfig+0x7c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <TIM_OC6_SetConfig+0xbc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_OC6_SetConfig+0x7c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a16      	ldr	r2, [pc, #88]	@ (80067b8 <TIM_OC6_SetConfig+0xc0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_OC6_SetConfig+0x7c>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <TIM_OC6_SetConfig+0xc4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC6_SetConfig+0x7c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <TIM_OC6_SetConfig+0xc8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800677a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	029b      	lsls	r3, r3, #10
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800

080067c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 030a 	bic.w	r3, r3, #10
 8006800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006822:	b480      	push	{r7}
 8006824:	b087      	sub	sp, #28
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f023 0210 	bic.w	r2, r3, #16
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800684c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800685e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f043 0307 	orr.w	r3, r3, #7
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	431a      	orrs	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	609a      	str	r2, [r3, #8]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2201      	movs	r2, #1
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1a      	ldr	r2, [r3, #32]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	43db      	mvns	r3, r3
 800691e:	401a      	ands	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	fa01 f303 	lsl.w	r3, r1, r3
 8006934:	431a      	orrs	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e068      	b.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2e      	ldr	r2, [pc, #184]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d108      	bne.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800699a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d2:	d018      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a18      	ldr	r2, [pc, #96]	@ (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a13      	ldr	r2, [pc, #76]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a14      	ldr	r2, [pc, #80]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d10c      	bne.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40000c00 	.word	0x40000c00
 8006a54:	40014000 	.word	0x40014000

08006a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e073      	b.n	8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d11c      	bne.n	8006b4a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	051b      	lsls	r3, r3, #20
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400

08006b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e042      	b.n	8006c08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fa fda3 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2224      	movs	r2, #36	@ 0x24
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fbb6 	bl	800732c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f8b3 	bl	8006d2c <UART_SetConfig>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e01b      	b.n	8006c08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc35 	bl	8007470 <UART_CheckIdleState>
 8006c06:	4603      	mov	r3, r0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d17b      	bne.n	8006d22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_UART_Transmit+0x26>
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e074      	b.n	8006d24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2221      	movs	r2, #33	@ 0x21
 8006c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c4a:	f7fa ffe5 	bl	8001c18 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c68:	d108      	bne.n	8006c7c <HAL_UART_Transmit+0x6c>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e003      	b.n	8006c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c84:	e030      	b.n	8006ce8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fc97 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e03d      	b.n	8006d24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e007      	b.n	8006cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1c8      	bne.n	8006c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2140      	movs	r1, #64	@ 0x40
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fc60 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e006      	b.n	8006d24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d22:	2302      	movs	r3, #2
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d30:	b08c      	sub	sp, #48	@ 0x30
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4baa      	ldr	r3, [pc, #680]	@ (8007004 <UART_SetConfig+0x2d8>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a9f      	ldr	r2, [pc, #636]	@ (8007008 <UART_SetConfig+0x2dc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d004      	beq.n	8006d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d94:	4313      	orrs	r3, r2
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	f023 010f 	bic.w	r1, r3, #15
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a90      	ldr	r2, [pc, #576]	@ (800700c <UART_SetConfig+0x2e0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d125      	bne.n	8006e1c <UART_SetConfig+0xf0>
 8006dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d81a      	bhi.n	8006e14 <UART_SetConfig+0xe8>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <UART_SetConfig+0xb8>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006dfd 	.word	0x08006dfd
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfa:	e116      	b.n	800702a <UART_SetConfig+0x2fe>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e02:	e112      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0a:	e10e      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e12:	e10a      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1a:	e106      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7c      	ldr	r2, [pc, #496]	@ (8007014 <UART_SetConfig+0x2e8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d138      	bne.n	8006e98 <UART_SetConfig+0x16c>
 8006e26:	4b7a      	ldr	r3, [pc, #488]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2c:	f003 030c 	and.w	r3, r3, #12
 8006e30:	2b0c      	cmp	r3, #12
 8006e32:	d82d      	bhi.n	8006e90 <UART_SetConfig+0x164>
 8006e34:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <UART_SetConfig+0x110>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e71 	.word	0x08006e71
 8006e40:	08006e91 	.word	0x08006e91
 8006e44:	08006e91 	.word	0x08006e91
 8006e48:	08006e91 	.word	0x08006e91
 8006e4c:	08006e81 	.word	0x08006e81
 8006e50:	08006e91 	.word	0x08006e91
 8006e54:	08006e91 	.word	0x08006e91
 8006e58:	08006e91 	.word	0x08006e91
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e91 	.word	0x08006e91
 8006e64:	08006e91 	.word	0x08006e91
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e0d8      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e0d4      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e0d0      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8e:	e0cc      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e96:	e0c8      	b.n	800702a <UART_SetConfig+0x2fe>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8007018 <UART_SetConfig+0x2ec>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d125      	bne.n	8006eee <UART_SetConfig+0x1c2>
 8006ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006eac:	2b30      	cmp	r3, #48	@ 0x30
 8006eae:	d016      	beq.n	8006ede <UART_SetConfig+0x1b2>
 8006eb0:	2b30      	cmp	r3, #48	@ 0x30
 8006eb2:	d818      	bhi.n	8006ee6 <UART_SetConfig+0x1ba>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d00a      	beq.n	8006ece <UART_SetConfig+0x1a2>
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d814      	bhi.n	8006ee6 <UART_SetConfig+0x1ba>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <UART_SetConfig+0x19a>
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d008      	beq.n	8006ed6 <UART_SetConfig+0x1aa>
 8006ec4:	e00f      	b.n	8006ee6 <UART_SetConfig+0x1ba>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ecc:	e0ad      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed4:	e0a9      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006edc:	e0a5      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ede:	2308      	movs	r3, #8
 8006ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee4:	e0a1      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eec:	e09d      	b.n	800702a <UART_SetConfig+0x2fe>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800701c <UART_SetConfig+0x2f0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d125      	bne.n	8006f44 <UART_SetConfig+0x218>
 8006ef8:	4b45      	ldr	r3, [pc, #276]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f04:	d016      	beq.n	8006f34 <UART_SetConfig+0x208>
 8006f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f08:	d818      	bhi.n	8006f3c <UART_SetConfig+0x210>
 8006f0a:	2b80      	cmp	r3, #128	@ 0x80
 8006f0c:	d00a      	beq.n	8006f24 <UART_SetConfig+0x1f8>
 8006f0e:	2b80      	cmp	r3, #128	@ 0x80
 8006f10:	d814      	bhi.n	8006f3c <UART_SetConfig+0x210>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <UART_SetConfig+0x1f0>
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d008      	beq.n	8006f2c <UART_SetConfig+0x200>
 8006f1a:	e00f      	b.n	8006f3c <UART_SetConfig+0x210>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e082      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e07e      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f32:	e07a      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3a:	e076      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f42:	e072      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a35      	ldr	r2, [pc, #212]	@ (8007020 <UART_SetConfig+0x2f4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d12a      	bne.n	8006fa4 <UART_SetConfig+0x278>
 8006f4e:	4b30      	ldr	r3, [pc, #192]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f5c:	d01a      	beq.n	8006f94 <UART_SetConfig+0x268>
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f62:	d81b      	bhi.n	8006f9c <UART_SetConfig+0x270>
 8006f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f68:	d00c      	beq.n	8006f84 <UART_SetConfig+0x258>
 8006f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f6e:	d815      	bhi.n	8006f9c <UART_SetConfig+0x270>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <UART_SetConfig+0x250>
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f78:	d008      	beq.n	8006f8c <UART_SetConfig+0x260>
 8006f7a:	e00f      	b.n	8006f9c <UART_SetConfig+0x270>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e052      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f84:	2302      	movs	r3, #2
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e04e      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e04a      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f94:	2308      	movs	r3, #8
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e046      	b.n	800702a <UART_SetConfig+0x2fe>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	e042      	b.n	800702a <UART_SetConfig+0x2fe>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a17      	ldr	r2, [pc, #92]	@ (8007008 <UART_SetConfig+0x2dc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d13a      	bne.n	8007024 <UART_SetConfig+0x2f8>
 8006fae:	4b18      	ldr	r3, [pc, #96]	@ (8007010 <UART_SetConfig+0x2e4>)
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fbc:	d01a      	beq.n	8006ff4 <UART_SetConfig+0x2c8>
 8006fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fc2:	d81b      	bhi.n	8006ffc <UART_SetConfig+0x2d0>
 8006fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fc8:	d00c      	beq.n	8006fe4 <UART_SetConfig+0x2b8>
 8006fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fce:	d815      	bhi.n	8006ffc <UART_SetConfig+0x2d0>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <UART_SetConfig+0x2b0>
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd8:	d008      	beq.n	8006fec <UART_SetConfig+0x2c0>
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x2d0>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e022      	b.n	800702a <UART_SetConfig+0x2fe>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e01e      	b.n	800702a <UART_SetConfig+0x2fe>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e01a      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e016      	b.n	800702a <UART_SetConfig+0x2fe>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x2fe>
 8007004:	cfff69f3 	.word	0xcfff69f3
 8007008:	40008000 	.word	0x40008000
 800700c:	40013800 	.word	0x40013800
 8007010:	40021000 	.word	0x40021000
 8007014:	40004400 	.word	0x40004400
 8007018:	40004800 	.word	0x40004800
 800701c:	40004c00 	.word	0x40004c00
 8007020:	40005000 	.word	0x40005000
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4ab0      	ldr	r2, [pc, #704]	@ (80072f0 <UART_SetConfig+0x5c4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	f040 809b 	bne.w	800716c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800703a:	2b08      	cmp	r3, #8
 800703c:	d827      	bhi.n	800708e <UART_SetConfig+0x362>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <UART_SetConfig+0x318>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007069 	.word	0x08007069
 8007048:	08007071 	.word	0x08007071
 800704c:	08007079 	.word	0x08007079
 8007050:	0800708f 	.word	0x0800708f
 8007054:	0800707f 	.word	0x0800707f
 8007058:	0800708f 	.word	0x0800708f
 800705c:	0800708f 	.word	0x0800708f
 8007060:	0800708f 	.word	0x0800708f
 8007064:	08007087 	.word	0x08007087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007068:	f7fd fe1c 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 800706c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706e:	e014      	b.n	800709a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007070:	f7fd fe2c 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8007074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007076:	e010      	b.n	800709a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007078:	4b9e      	ldr	r3, [pc, #632]	@ (80072f4 <UART_SetConfig+0x5c8>)
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800707c:	e00d      	b.n	800709a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800707e:	f7fd fd61 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8007082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007084:	e009      	b.n	800709a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800708c:	e005      	b.n	800709a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007098:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8130 	beq.w	8007302 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	4a94      	ldr	r2, [pc, #592]	@ (80072f8 <UART_SetConfig+0x5cc>)
 80070a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ac:	461a      	mov	r2, r3
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	4413      	add	r3, r2
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d305      	bcc.n	80070d2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d903      	bls.n	80070da <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070d8:	e113      	b.n	8007302 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	2200      	movs	r2, #0
 80070de:	60bb      	str	r3, [r7, #8]
 80070e0:	60fa      	str	r2, [r7, #12]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	4a84      	ldr	r2, [pc, #528]	@ (80072f8 <UART_SetConfig+0x5cc>)
 80070e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2200      	movs	r2, #0
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070fc:	f7f9 f89a 	bl	8000234 <__aeabi_uldivmod>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4610      	mov	r0, r2
 8007106:	4619      	mov	r1, r3
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	020b      	lsls	r3, r1, #8
 8007112:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007116:	0202      	lsls	r2, r0, #8
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	6849      	ldr	r1, [r1, #4]
 800711c:	0849      	lsrs	r1, r1, #1
 800711e:	2000      	movs	r0, #0
 8007120:	460c      	mov	r4, r1
 8007122:	4605      	mov	r5, r0
 8007124:	eb12 0804 	adds.w	r8, r2, r4
 8007128:	eb43 0905 	adc.w	r9, r3, r5
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	469a      	mov	sl, r3
 8007134:	4693      	mov	fp, r2
 8007136:	4652      	mov	r2, sl
 8007138:	465b      	mov	r3, fp
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 f879 	bl	8000234 <__aeabi_uldivmod>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4613      	mov	r3, r2
 8007148:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007150:	d308      	bcc.n	8007164 <UART_SetConfig+0x438>
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007158:	d204      	bcs.n	8007164 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	e0ce      	b.n	8007302 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800716a:	e0ca      	b.n	8007302 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007174:	d166      	bne.n	8007244 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007176:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800717a:	2b08      	cmp	r3, #8
 800717c:	d827      	bhi.n	80071ce <UART_SetConfig+0x4a2>
 800717e:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <UART_SetConfig+0x458>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b9 	.word	0x080071b9
 8007190:	080071cf 	.word	0x080071cf
 8007194:	080071bf 	.word	0x080071bf
 8007198:	080071cf 	.word	0x080071cf
 800719c:	080071cf 	.word	0x080071cf
 80071a0:	080071cf 	.word	0x080071cf
 80071a4:	080071c7 	.word	0x080071c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a8:	f7fd fd7c 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 80071ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ae:	e014      	b.n	80071da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b0:	f7fd fd8c 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071b6:	e010      	b.n	80071da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b8:	4b4e      	ldr	r3, [pc, #312]	@ (80072f4 <UART_SetConfig+0x5c8>)
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071bc:	e00d      	b.n	80071da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071be:	f7fd fcc1 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80071c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071c4:	e009      	b.n	80071da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071cc:	e005      	b.n	80071da <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8090 	beq.w	8007302 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e6:	4a44      	ldr	r2, [pc, #272]	@ (80072f8 <UART_SetConfig+0x5cc>)
 80071e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f4:	005a      	lsls	r2, r3, #1
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	441a      	add	r2, r3
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	d916      	bls.n	800723c <UART_SetConfig+0x510>
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007214:	d212      	bcs.n	800723c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f023 030f 	bic.w	r3, r3, #15
 800721e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	b29a      	uxth	r2, r3
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	4313      	orrs	r3, r2
 8007230:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	8bfa      	ldrh	r2, [r7, #30]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	e062      	b.n	8007302 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007242:	e05e      	b.n	8007302 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007244:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007248:	2b08      	cmp	r3, #8
 800724a:	d828      	bhi.n	800729e <UART_SetConfig+0x572>
 800724c:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <UART_SetConfig+0x528>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	0800729f 	.word	0x0800729f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
 8007274:	08007297 	.word	0x08007297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fd fd14 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 800727c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800727e:	e014      	b.n	80072aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fd fd24 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8007284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007286:	e010      	b.n	80072aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <UART_SetConfig+0x5c8>)
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800728c:	e00d      	b.n	80072aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728e:	f7fd fc59 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8007292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007294:	e009      	b.n	80072aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800729c:	e005      	b.n	80072aa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072a8:	bf00      	nop
    }

    if (pclk != 0U)
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d028      	beq.n	8007302 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	4a10      	ldr	r2, [pc, #64]	@ (80072f8 <UART_SetConfig+0x5cc>)
 80072b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ba:	461a      	mov	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	fbb3 f2f2 	udiv	r2, r3, r2
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	441a      	add	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d910      	bls.n	80072fc <UART_SetConfig+0x5d0>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e0:	d20c      	bcs.n	80072fc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60da      	str	r2, [r3, #12]
 80072ec:	e009      	b.n	8007302 <UART_SetConfig+0x5d6>
 80072ee:	bf00      	nop
 80072f0:	40008000 	.word	0x40008000
 80072f4:	00f42400 	.word	0x00f42400
 80072f8:	080088b8 	.word	0x080088b8
      }
      else
      {
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2201      	movs	r2, #1
 8007306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2201      	movs	r2, #1
 800730e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2200      	movs	r2, #0
 800731c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800731e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007322:	4618      	mov	r0, r3
 8007324:	3730      	adds	r7, #48	@ 0x30
 8007326:	46bd      	mov	sp, r7
 8007328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800732c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800742a:	d10a      	bne.n	8007442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  }
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b098      	sub	sp, #96	@ 0x60
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007480:	f7fa fbca 	bl	8001c18 <HAL_GetTick>
 8007484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d12f      	bne.n	80074f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f88e 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d022      	beq.n	80074f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e063      	b.n	80075bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d149      	bne.n	8007596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800750a:	2200      	movs	r2, #0
 800750c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f857 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d03c      	beq.n	8007596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	623b      	str	r3, [r7, #32]
   return(result);
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800753a:	633b      	str	r3, [r7, #48]	@ 0x30
 800753c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	60fb      	str	r3, [r7, #12]
   return(result);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800756e:	61fa      	str	r2, [r7, #28]
 8007570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	69b9      	ldr	r1, [r7, #24]
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	617b      	str	r3, [r7, #20]
   return(result);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e012      	b.n	80075bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3758      	adds	r7, #88	@ 0x58
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d4:	e04f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d04b      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fa fb1b 	bl	8001c18 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e04e      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d037      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b80      	cmp	r3, #128	@ 0x80
 800760a:	d034      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d031      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d110      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2208      	movs	r2, #8
 8007626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f838 	bl	800769e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2208      	movs	r2, #8
 8007632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e029      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800764c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007650:	d111      	bne.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800765a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f81e 	bl	800769e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e00f      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	429a      	cmp	r2, r3
 8007684:	bf0c      	ite	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	2300      	movne	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	429a      	cmp	r2, r3
 8007692:	d0a0      	beq.n	80075d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800769e:	b480      	push	{r7}
 80076a0:	b095      	sub	sp, #84	@ 0x54
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ee:	f023 0301 	bic.w	r3, r3, #1
 80076f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e3      	bne.n	80076d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d118      	bne.n	800774a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	60bb      	str	r3, [r7, #8]
   return(result);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f023 0310 	bic.w	r3, r3, #16
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6979      	ldr	r1, [r7, #20]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	613b      	str	r3, [r7, #16]
   return(result);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e6      	bne.n	8007718 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800775e:	bf00      	nop
 8007760:	3754      	adds	r7, #84	@ 0x54
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_UARTEx_DisableFifoMode+0x16>
 800777c:	2302      	movs	r3, #2
 800777e:	e027      	b.n	80077d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2224      	movs	r2, #36	@ 0x24
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e02d      	b.n	8007850 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	@ 0x24
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f84f 	bl	80078d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800786c:	2302      	movs	r3, #2
 800786e:	e02d      	b.n	80078cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2224      	movs	r2, #36	@ 0x24
 800787c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f811 	bl	80078d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078f4:	e031      	b.n	800795a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078f6:	2308      	movs	r3, #8
 80078f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078fa:	2308      	movs	r3, #8
 80078fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	0e5b      	lsrs	r3, r3, #25
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	0f5b      	lsrs	r3, r3, #29
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	7b3a      	ldrb	r2, [r7, #12]
 8007922:	4911      	ldr	r1, [pc, #68]	@ (8007968 <UARTEx_SetNbDataToProcess+0x94>)
 8007924:	5c8a      	ldrb	r2, [r1, r2]
 8007926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800792a:	7b3a      	ldrb	r2, [r7, #12]
 800792c:	490f      	ldr	r1, [pc, #60]	@ (800796c <UARTEx_SetNbDataToProcess+0x98>)
 800792e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007930:	fb93 f3f2 	sdiv	r3, r3, r2
 8007934:	b29a      	uxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	7b7a      	ldrb	r2, [r7, #13]
 8007940:	4909      	ldr	r1, [pc, #36]	@ (8007968 <UARTEx_SetNbDataToProcess+0x94>)
 8007942:	5c8a      	ldrb	r2, [r1, r2]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007948:	7b7a      	ldrb	r2, [r7, #13]
 800794a:	4908      	ldr	r1, [pc, #32]	@ (800796c <UARTEx_SetNbDataToProcess+0x98>)
 800794c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800794e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	080088d0 	.word	0x080088d0
 800796c:	080088d8 	.word	0x080088d8

08007970 <std>:
 8007970:	2300      	movs	r3, #0
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	6083      	str	r3, [r0, #8]
 8007978:	8181      	strh	r1, [r0, #12]
 800797a:	4619      	mov	r1, r3
 800797c:	6643      	str	r3, [r0, #100]	@ 0x64
 800797e:	81c2      	strh	r2, [r0, #14]
 8007980:	2208      	movs	r2, #8
 8007982:	6183      	str	r3, [r0, #24]
 8007984:	e9c0 3300 	strd	r3, r3, [r0]
 8007988:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798c:	305c      	adds	r0, #92	@ 0x5c
 800798e:	f000 f906 	bl	8007b9e <memset>
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <std+0x58>)
 8007994:	6224      	str	r4, [r4, #32]
 8007996:	6263      	str	r3, [r4, #36]	@ 0x24
 8007998:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <std+0x5c>)
 800799a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800799c:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <std+0x60>)
 800799e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <std+0x64>)
 80079a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80079a4:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <std+0x68>)
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d006      	beq.n	80079b8 <std+0x48>
 80079aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ae:	4294      	cmp	r4, r2
 80079b0:	d002      	beq.n	80079b8 <std+0x48>
 80079b2:	33d0      	adds	r3, #208	@ 0xd0
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d105      	bne.n	80079c4 <std+0x54>
 80079b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c0:	f000 b966 	b.w	8007c90 <__retarget_lock_init_recursive>
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	bf00      	nop
 80079c8:	08007b19 	.word	0x08007b19
 80079cc:	08007b3b 	.word	0x08007b3b
 80079d0:	08007b73 	.word	0x08007b73
 80079d4:	08007b97 	.word	0x08007b97
 80079d8:	200002b4 	.word	0x200002b4

080079dc <stdio_exit_handler>:
 80079dc:	4a02      	ldr	r2, [pc, #8]	@ (80079e8 <stdio_exit_handler+0xc>)
 80079de:	4903      	ldr	r1, [pc, #12]	@ (80079ec <stdio_exit_handler+0x10>)
 80079e0:	4803      	ldr	r0, [pc, #12]	@ (80079f0 <stdio_exit_handler+0x14>)
 80079e2:	f000 b869 	b.w	8007ab8 <_fwalk_sglue>
 80079e6:	bf00      	nop
 80079e8:	2000001c 	.word	0x2000001c
 80079ec:	08008535 	.word	0x08008535
 80079f0:	2000002c 	.word	0x2000002c

080079f4 <cleanup_stdio>:
 80079f4:	6841      	ldr	r1, [r0, #4]
 80079f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <cleanup_stdio+0x34>)
 80079f8:	4299      	cmp	r1, r3
 80079fa:	b510      	push	{r4, lr}
 80079fc:	4604      	mov	r4, r0
 80079fe:	d001      	beq.n	8007a04 <cleanup_stdio+0x10>
 8007a00:	f000 fd98 	bl	8008534 <_fflush_r>
 8007a04:	68a1      	ldr	r1, [r4, #8]
 8007a06:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <cleanup_stdio+0x38>)
 8007a08:	4299      	cmp	r1, r3
 8007a0a:	d002      	beq.n	8007a12 <cleanup_stdio+0x1e>
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fd91 	bl	8008534 <_fflush_r>
 8007a12:	68e1      	ldr	r1, [r4, #12]
 8007a14:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <cleanup_stdio+0x3c>)
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d004      	beq.n	8007a24 <cleanup_stdio+0x30>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a20:	f000 bd88 	b.w	8008534 <_fflush_r>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop
 8007a28:	200002b4 	.word	0x200002b4
 8007a2c:	2000031c 	.word	0x2000031c
 8007a30:	20000384 	.word	0x20000384

08007a34 <global_stdio_init.part.0>:
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <global_stdio_init.part.0+0x30>)
 8007a38:	2104      	movs	r1, #4
 8007a3a:	4c0b      	ldr	r4, [pc, #44]	@ (8007a68 <global_stdio_init.part.0+0x34>)
 8007a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a6c <global_stdio_init.part.0+0x38>)
 8007a3e:	4620      	mov	r0, r4
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7ff ff94 	bl	8007970 <std>
 8007a48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2109      	movs	r1, #9
 8007a50:	f7ff ff8e 	bl	8007970 <std>
 8007a54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a58:	2202      	movs	r2, #2
 8007a5a:	2112      	movs	r1, #18
 8007a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a60:	f7ff bf86 	b.w	8007970 <std>
 8007a64:	200003ec 	.word	0x200003ec
 8007a68:	200002b4 	.word	0x200002b4
 8007a6c:	080079dd 	.word	0x080079dd

08007a70 <__sfp_lock_acquire>:
 8007a70:	4801      	ldr	r0, [pc, #4]	@ (8007a78 <__sfp_lock_acquire+0x8>)
 8007a72:	f000 b90e 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	200003f5 	.word	0x200003f5

08007a7c <__sfp_lock_release>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	@ (8007a84 <__sfp_lock_release+0x8>)
 8007a7e:	f000 b909 	b.w	8007c94 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	200003f5 	.word	0x200003f5

08007a88 <__sinit>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	f7ff fff0 	bl	8007a70 <__sfp_lock_acquire>
 8007a90:	6a23      	ldr	r3, [r4, #32]
 8007a92:	b11b      	cbz	r3, 8007a9c <__sinit+0x14>
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f7ff bff0 	b.w	8007a7c <__sfp_lock_release>
 8007a9c:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <__sinit+0x28>)
 8007a9e:	6223      	str	r3, [r4, #32]
 8007aa0:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <__sinit+0x2c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f5      	bne.n	8007a94 <__sinit+0xc>
 8007aa8:	f7ff ffc4 	bl	8007a34 <global_stdio_init.part.0>
 8007aac:	e7f2      	b.n	8007a94 <__sinit+0xc>
 8007aae:	bf00      	nop
 8007ab0:	080079f5 	.word	0x080079f5
 8007ab4:	200003ec 	.word	0x200003ec

08007ab8 <_fwalk_sglue>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	4607      	mov	r7, r0
 8007abe:	4688      	mov	r8, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8007acc:	d505      	bpl.n	8007ada <_fwalk_sglue+0x22>
 8007ace:	6824      	ldr	r4, [r4, #0]
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <_fwalk_sglue+0xc>
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d907      	bls.n	8007af0 <_fwalk_sglue+0x38>
 8007ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <_fwalk_sglue+0x38>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c0      	blx	r8
 8007aee:	4306      	orrs	r6, r0
 8007af0:	3568      	adds	r5, #104	@ 0x68
 8007af2:	e7e9      	b.n	8007ac8 <_fwalk_sglue+0x10>

08007af4 <iprintf>:
 8007af4:	b40f      	push	{r0, r1, r2, r3}
 8007af6:	b507      	push	{r0, r1, r2, lr}
 8007af8:	4906      	ldr	r1, [pc, #24]	@ (8007b14 <iprintf+0x20>)
 8007afa:	ab04      	add	r3, sp, #16
 8007afc:	6808      	ldr	r0, [r1, #0]
 8007afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b02:	6881      	ldr	r1, [r0, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f000 f9e9 	bl	8007edc <_vfiprintf_r>
 8007b0a:	b003      	add	sp, #12
 8007b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b10:	b004      	add	sp, #16
 8007b12:	4770      	bx	lr
 8007b14:	20000028 	.word	0x20000028

08007b18 <__sread>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b20:	f000 f868 	bl	8007bf4 <_read_r>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	bfab      	itete	ge
 8007b28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b2c:	181b      	addge	r3, r3, r0
 8007b2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b32:	bfac      	ite	ge
 8007b34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b36:	81a3      	strhlt	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__swrite>:
 8007b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3e:	461f      	mov	r7, r3
 8007b40:	898b      	ldrh	r3, [r1, #12]
 8007b42:	4605      	mov	r5, r0
 8007b44:	460c      	mov	r4, r1
 8007b46:	05db      	lsls	r3, r3, #23
 8007b48:	4616      	mov	r6, r2
 8007b4a:	d505      	bpl.n	8007b58 <__swrite+0x1e>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	f000 f83c 	bl	8007bd0 <_lseek_r>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b60:	4628      	mov	r0, r5
 8007b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	463b      	mov	r3, r7
 8007b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	f000 b853 	b.w	8007c18 <_write_r>

08007b72 <__sseek>:
 8007b72:	b510      	push	{r4, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 f829 	bl	8007bd0 <_lseek_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	bf15      	itete	ne
 8007b84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b8e:	81a3      	strheq	r3, [r4, #12]
 8007b90:	bf18      	it	ne
 8007b92:	81a3      	strhne	r3, [r4, #12]
 8007b94:	bd10      	pop	{r4, pc}

08007b96 <__sclose>:
 8007b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9a:	f000 b809 	b.w	8007bb0 <_close_r>

08007b9e <memset>:
 8007b9e:	4402      	add	r2, r0
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d100      	bne.n	8007ba8 <memset+0xa>
 8007ba6:	4770      	bx	lr
 8007ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bac:	e7f9      	b.n	8007ba2 <memset+0x4>
	...

08007bb0 <_close_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d05      	ldr	r5, [pc, #20]	@ (8007bcc <_close_r+0x1c>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7f9 fe6f 	bl	800189e <_close>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_close_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_close_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	200003f0 	.word	0x200003f0

08007bd0 <_lseek_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4d06      	ldr	r5, [pc, #24]	@ (8007bf0 <_lseek_r+0x20>)
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 fe84 	bl	80018ec <_lseek>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_lseek_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_lseek_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200003f0 	.word	0x200003f0

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4d06      	ldr	r5, [pc, #24]	@ (8007c14 <_read_r+0x20>)
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7f9 fe12 	bl	800182c <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200003f0 	.word	0x200003f0

08007c18 <_write_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4d06      	ldr	r5, [pc, #24]	@ (8007c38 <_write_r+0x20>)
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7f9 fe1d 	bl	8001866 <_write>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_write_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_write_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200003f0 	.word	0x200003f0

08007c3c <__errno>:
 8007c3c:	4b01      	ldr	r3, [pc, #4]	@ (8007c44 <__errno+0x8>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000028 	.word	0x20000028

08007c48 <__libc_init_array>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c80 <__libc_init_array+0x38>)
 8007c4c:	2600      	movs	r6, #0
 8007c4e:	4c0d      	ldr	r4, [pc, #52]	@ (8007c84 <__libc_init_array+0x3c>)
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	d109      	bne.n	8007c6c <__libc_init_array+0x24>
 8007c58:	4d0b      	ldr	r5, [pc, #44]	@ (8007c88 <__libc_init_array+0x40>)
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007c8c <__libc_init_array+0x44>)
 8007c5e:	f000 fdc7 	bl	80087f0 <_init>
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	d105      	bne.n	8007c76 <__libc_init_array+0x2e>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c70:	3601      	adds	r6, #1
 8007c72:	4798      	blx	r3
 8007c74:	e7ee      	b.n	8007c54 <__libc_init_array+0xc>
 8007c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	4798      	blx	r3
 8007c7e:	e7f2      	b.n	8007c66 <__libc_init_array+0x1e>
 8007c80:	0800891c 	.word	0x0800891c
 8007c84:	0800891c 	.word	0x0800891c
 8007c88:	0800891c 	.word	0x0800891c
 8007c8c:	08008920 	.word	0x08008920

08007c90 <__retarget_lock_init_recursive>:
 8007c90:	4770      	bx	lr

08007c92 <__retarget_lock_acquire_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <__retarget_lock_release_recursive>:
 8007c94:	4770      	bx	lr
	...

08007c98 <_free_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	d041      	beq.n	8007d24 <_free_r+0x8c>
 8007ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca4:	1f0c      	subs	r4, r1, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bfb8      	it	lt
 8007caa:	18e4      	addlt	r4, r4, r3
 8007cac:	f000 f8e0 	bl	8007e70 <__malloc_lock>
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d28 <_free_r+0x90>)
 8007cb2:	6813      	ldr	r3, [r2, #0]
 8007cb4:	b933      	cbnz	r3, 8007cc4 <_free_r+0x2c>
 8007cb6:	6063      	str	r3, [r4, #4]
 8007cb8:	6014      	str	r4, [r2, #0]
 8007cba:	4628      	mov	r0, r5
 8007cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc0:	f000 b8dc 	b.w	8007e7c <__malloc_unlock>
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	d908      	bls.n	8007cda <_free_r+0x42>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	1821      	adds	r1, r4, r0
 8007ccc:	428b      	cmp	r3, r1
 8007cce:	bf01      	itttt	eq
 8007cd0:	6819      	ldreq	r1, [r3, #0]
 8007cd2:	685b      	ldreq	r3, [r3, #4]
 8007cd4:	1809      	addeq	r1, r1, r0
 8007cd6:	6021      	streq	r1, [r4, #0]
 8007cd8:	e7ed      	b.n	8007cb6 <_free_r+0x1e>
 8007cda:	461a      	mov	r2, r3
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	b10b      	cbz	r3, 8007ce4 <_free_r+0x4c>
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	d9fa      	bls.n	8007cda <_free_r+0x42>
 8007ce4:	6811      	ldr	r1, [r2, #0]
 8007ce6:	1850      	adds	r0, r2, r1
 8007ce8:	42a0      	cmp	r0, r4
 8007cea:	d10b      	bne.n	8007d04 <_free_r+0x6c>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	4401      	add	r1, r0
 8007cf0:	1850      	adds	r0, r2, r1
 8007cf2:	6011      	str	r1, [r2, #0]
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	d1e0      	bne.n	8007cba <_free_r+0x22>
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4408      	add	r0, r1
 8007cfe:	6053      	str	r3, [r2, #4]
 8007d00:	6010      	str	r0, [r2, #0]
 8007d02:	e7da      	b.n	8007cba <_free_r+0x22>
 8007d04:	d902      	bls.n	8007d0c <_free_r+0x74>
 8007d06:	230c      	movs	r3, #12
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	e7d6      	b.n	8007cba <_free_r+0x22>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	1821      	adds	r1, r4, r0
 8007d10:	428b      	cmp	r3, r1
 8007d12:	bf02      	ittt	eq
 8007d14:	6819      	ldreq	r1, [r3, #0]
 8007d16:	685b      	ldreq	r3, [r3, #4]
 8007d18:	1809      	addeq	r1, r1, r0
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	bf08      	it	eq
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	6054      	str	r4, [r2, #4]
 8007d22:	e7ca      	b.n	8007cba <_free_r+0x22>
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	bf00      	nop
 8007d28:	200003fc 	.word	0x200003fc

08007d2c <sbrk_aligned>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d6c <sbrk_aligned+0x40>)
 8007d30:	460c      	mov	r4, r1
 8007d32:	4605      	mov	r5, r0
 8007d34:	6831      	ldr	r1, [r6, #0]
 8007d36:	b911      	cbnz	r1, 8007d3e <sbrk_aligned+0x12>
 8007d38:	f000 fcb8 	bl	80086ac <_sbrk_r>
 8007d3c:	6030      	str	r0, [r6, #0]
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 fcb3 	bl	80086ac <_sbrk_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	d103      	bne.n	8007d52 <sbrk_aligned+0x26>
 8007d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d4e:	4620      	mov	r0, r4
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	1cc4      	adds	r4, r0, #3
 8007d54:	f024 0403 	bic.w	r4, r4, #3
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d0f8      	beq.n	8007d4e <sbrk_aligned+0x22>
 8007d5c:	1a21      	subs	r1, r4, r0
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 fca4 	bl	80086ac <_sbrk_r>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d1f2      	bne.n	8007d4e <sbrk_aligned+0x22>
 8007d68:	e7ef      	b.n	8007d4a <sbrk_aligned+0x1e>
 8007d6a:	bf00      	nop
 8007d6c:	200003f8 	.word	0x200003f8

08007d70 <_malloc_r>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	1ccd      	adds	r5, r1, #3
 8007d76:	4606      	mov	r6, r0
 8007d78:	f025 0503 	bic.w	r5, r5, #3
 8007d7c:	3508      	adds	r5, #8
 8007d7e:	2d0c      	cmp	r5, #12
 8007d80:	bf38      	it	cc
 8007d82:	250c      	movcc	r5, #12
 8007d84:	2d00      	cmp	r5, #0
 8007d86:	db01      	blt.n	8007d8c <_malloc_r+0x1c>
 8007d88:	42a9      	cmp	r1, r5
 8007d8a:	d904      	bls.n	8007d96 <_malloc_r+0x26>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	6033      	str	r3, [r6, #0]
 8007d90:	2000      	movs	r0, #0
 8007d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e6c <_malloc_r+0xfc>
 8007d9a:	f000 f869 	bl	8007e70 <__malloc_lock>
 8007d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007da2:	461c      	mov	r4, r3
 8007da4:	bb44      	cbnz	r4, 8007df8 <_malloc_r+0x88>
 8007da6:	4629      	mov	r1, r5
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ffbf 	bl	8007d2c <sbrk_aligned>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	4604      	mov	r4, r0
 8007db2:	d158      	bne.n	8007e66 <_malloc_r+0xf6>
 8007db4:	f8d8 4000 	ldr.w	r4, [r8]
 8007db8:	4627      	mov	r7, r4
 8007dba:	2f00      	cmp	r7, #0
 8007dbc:	d143      	bne.n	8007e46 <_malloc_r+0xd6>
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d04b      	beq.n	8007e5a <_malloc_r+0xea>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	eb04 0903 	add.w	r9, r4, r3
 8007dcc:	f000 fc6e 	bl	80086ac <_sbrk_r>
 8007dd0:	4581      	cmp	r9, r0
 8007dd2:	d142      	bne.n	8007e5a <_malloc_r+0xea>
 8007dd4:	6821      	ldr	r1, [r4, #0]
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	1a6d      	subs	r5, r5, r1
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7ff ffa6 	bl	8007d2c <sbrk_aligned>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d03a      	beq.n	8007e5a <_malloc_r+0xea>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	442b      	add	r3, r5
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	f8d8 3000 	ldr.w	r3, [r8]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	bb62      	cbnz	r2, 8007e4c <_malloc_r+0xdc>
 8007df2:	f8c8 7000 	str.w	r7, [r8]
 8007df6:	e00f      	b.n	8007e18 <_malloc_r+0xa8>
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	1b52      	subs	r2, r2, r5
 8007dfc:	d420      	bmi.n	8007e40 <_malloc_r+0xd0>
 8007dfe:	2a0b      	cmp	r2, #11
 8007e00:	d917      	bls.n	8007e32 <_malloc_r+0xc2>
 8007e02:	1961      	adds	r1, r4, r5
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	6025      	str	r5, [r4, #0]
 8007e08:	bf18      	it	ne
 8007e0a:	6059      	strne	r1, [r3, #4]
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	bf08      	it	eq
 8007e10:	f8c8 1000 	streq.w	r1, [r8]
 8007e14:	5162      	str	r2, [r4, r5]
 8007e16:	604b      	str	r3, [r1, #4]
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 f82f 	bl	8007e7c <__malloc_unlock>
 8007e1e:	f104 000b 	add.w	r0, r4, #11
 8007e22:	1d23      	adds	r3, r4, #4
 8007e24:	f020 0007 	bic.w	r0, r0, #7
 8007e28:	1ac2      	subs	r2, r0, r3
 8007e2a:	bf1c      	itt	ne
 8007e2c:	1a1b      	subne	r3, r3, r0
 8007e2e:	50a3      	strne	r3, [r4, r2]
 8007e30:	e7af      	b.n	8007d92 <_malloc_r+0x22>
 8007e32:	6862      	ldr	r2, [r4, #4]
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	bf0c      	ite	eq
 8007e38:	f8c8 2000 	streq.w	r2, [r8]
 8007e3c:	605a      	strne	r2, [r3, #4]
 8007e3e:	e7eb      	b.n	8007e18 <_malloc_r+0xa8>
 8007e40:	4623      	mov	r3, r4
 8007e42:	6864      	ldr	r4, [r4, #4]
 8007e44:	e7ae      	b.n	8007da4 <_malloc_r+0x34>
 8007e46:	463c      	mov	r4, r7
 8007e48:	687f      	ldr	r7, [r7, #4]
 8007e4a:	e7b6      	b.n	8007dba <_malloc_r+0x4a>
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d1fb      	bne.n	8007e4c <_malloc_r+0xdc>
 8007e54:	2300      	movs	r3, #0
 8007e56:	6053      	str	r3, [r2, #4]
 8007e58:	e7de      	b.n	8007e18 <_malloc_r+0xa8>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	f000 f80c 	bl	8007e7c <__malloc_unlock>
 8007e64:	e794      	b.n	8007d90 <_malloc_r+0x20>
 8007e66:	6005      	str	r5, [r0, #0]
 8007e68:	e7d6      	b.n	8007e18 <_malloc_r+0xa8>
 8007e6a:	bf00      	nop
 8007e6c:	200003fc 	.word	0x200003fc

08007e70 <__malloc_lock>:
 8007e70:	4801      	ldr	r0, [pc, #4]	@ (8007e78 <__malloc_lock+0x8>)
 8007e72:	f7ff bf0e 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	200003f4 	.word	0x200003f4

08007e7c <__malloc_unlock>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	@ (8007e84 <__malloc_unlock+0x8>)
 8007e7e:	f7ff bf09 	b.w	8007c94 <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	200003f4 	.word	0x200003f4

08007e88 <__sfputc_r>:
 8007e88:	6893      	ldr	r3, [r2, #8]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	b410      	push	{r4}
 8007e90:	6093      	str	r3, [r2, #8]
 8007e92:	da08      	bge.n	8007ea6 <__sfputc_r+0x1e>
 8007e94:	6994      	ldr	r4, [r2, #24]
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	db01      	blt.n	8007e9e <__sfputc_r+0x16>
 8007e9a:	290a      	cmp	r1, #10
 8007e9c:	d103      	bne.n	8007ea6 <__sfputc_r+0x1e>
 8007e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea2:	f000 bb6f 	b.w	8008584 <__swbuf_r>
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	1c58      	adds	r0, r3, #1
 8007eaa:	6010      	str	r0, [r2, #0]
 8007eac:	4608      	mov	r0, r1
 8007eae:	7019      	strb	r1, [r3, #0]
 8007eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <__sfputs_r>:
 8007eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb8:	4606      	mov	r6, r0
 8007eba:	460f      	mov	r7, r1
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	18d5      	adds	r5, r2, r3
 8007ec0:	42ac      	cmp	r4, r5
 8007ec2:	d101      	bne.n	8007ec8 <__sfputs_r+0x12>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e007      	b.n	8007ed8 <__sfputs_r+0x22>
 8007ec8:	463a      	mov	r2, r7
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f7ff ffda 	bl	8007e88 <__sfputc_r>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d1f3      	bne.n	8007ec0 <__sfputs_r+0xa>
 8007ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007edc <_vfiprintf_r>:
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	b09d      	sub	sp, #116	@ 0x74
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	4698      	mov	r8, r3
 8007ee8:	4606      	mov	r6, r0
 8007eea:	b118      	cbz	r0, 8007ef4 <_vfiprintf_r+0x18>
 8007eec:	6a03      	ldr	r3, [r0, #32]
 8007eee:	b90b      	cbnz	r3, 8007ef4 <_vfiprintf_r+0x18>
 8007ef0:	f7ff fdca 	bl	8007a88 <__sinit>
 8007ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ef6:	07d9      	lsls	r1, r3, #31
 8007ef8:	d405      	bmi.n	8007f06 <_vfiprintf_r+0x2a>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	059a      	lsls	r2, r3, #22
 8007efe:	d402      	bmi.n	8007f06 <_vfiprintf_r+0x2a>
 8007f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f02:	f7ff fec6 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	071b      	lsls	r3, r3, #28
 8007f0a:	d501      	bpl.n	8007f10 <_vfiprintf_r+0x34>
 8007f0c:	692b      	ldr	r3, [r5, #16]
 8007f0e:	b99b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x5c>
 8007f10:	4629      	mov	r1, r5
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 fb74 	bl	8008600 <__swsetup_r>
 8007f18:	b170      	cbz	r0, 8007f38 <_vfiprintf_r+0x5c>
 8007f1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f1c:	07dc      	lsls	r4, r3, #31
 8007f1e:	d504      	bpl.n	8007f2a <_vfiprintf_r+0x4e>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	b01d      	add	sp, #116	@ 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	0598      	lsls	r0, r3, #22
 8007f2e:	d4f7      	bmi.n	8007f20 <_vfiprintf_r+0x44>
 8007f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f32:	f7ff feaf 	bl	8007c94 <__retarget_lock_release_recursive>
 8007f36:	e7f3      	b.n	8007f20 <_vfiprintf_r+0x44>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3e:	f04f 0901 	mov.w	r9, #1
 8007f42:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80080f8 <_vfiprintf_r+0x21c>
 8007f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f48:	2320      	movs	r3, #32
 8007f4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f4e:	2330      	movs	r3, #48	@ 0x30
 8007f50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f54:	4623      	mov	r3, r4
 8007f56:	469a      	mov	sl, r3
 8007f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f5c:	b10a      	cbz	r2, 8007f62 <_vfiprintf_r+0x86>
 8007f5e:	2a25      	cmp	r2, #37	@ 0x25
 8007f60:	d1f9      	bne.n	8007f56 <_vfiprintf_r+0x7a>
 8007f62:	ebba 0b04 	subs.w	fp, sl, r4
 8007f66:	d00b      	beq.n	8007f80 <_vfiprintf_r+0xa4>
 8007f68:	465b      	mov	r3, fp
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff ffa1 	bl	8007eb6 <__sfputs_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	f000 80a7 	beq.w	80080c8 <_vfiprintf_r+0x1ec>
 8007f7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f7c:	445a      	add	r2, fp
 8007f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f80:	f89a 3000 	ldrb.w	r3, [sl]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 809f 	beq.w	80080c8 <_vfiprintf_r+0x1ec>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	f10a 0a01 	add.w	sl, sl, #1
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa2:	4654      	mov	r4, sl
 8007fa4:	2205      	movs	r2, #5
 8007fa6:	4854      	ldr	r0, [pc, #336]	@ (80080f8 <_vfiprintf_r+0x21c>)
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	f000 fb8e 	bl	80086cc <memchr>
 8007fb0:	9a04      	ldr	r2, [sp, #16]
 8007fb2:	b9d8      	cbnz	r0, 8007fec <_vfiprintf_r+0x110>
 8007fb4:	06d1      	lsls	r1, r2, #27
 8007fb6:	bf44      	itt	mi
 8007fb8:	2320      	movmi	r3, #32
 8007fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fbe:	0713      	lsls	r3, r2, #28
 8007fc0:	bf44      	itt	mi
 8007fc2:	232b      	movmi	r3, #43	@ 0x2b
 8007fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fce:	d015      	beq.n	8007ffc <_vfiprintf_r+0x120>
 8007fd0:	9a07      	ldr	r2, [sp, #28]
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f04f 0c0a 	mov.w	ip, #10
 8007fda:	4621      	mov	r1, r4
 8007fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe0:	3b30      	subs	r3, #48	@ 0x30
 8007fe2:	2b09      	cmp	r3, #9
 8007fe4:	d94b      	bls.n	800807e <_vfiprintf_r+0x1a2>
 8007fe6:	b1b0      	cbz	r0, 8008016 <_vfiprintf_r+0x13a>
 8007fe8:	9207      	str	r2, [sp, #28]
 8007fea:	e014      	b.n	8008016 <_vfiprintf_r+0x13a>
 8007fec:	eba0 0308 	sub.w	r3, r0, r8
 8007ff0:	46a2      	mov	sl, r4
 8007ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	e7d2      	b.n	8007fa2 <_vfiprintf_r+0xc6>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	1d19      	adds	r1, r3, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	9103      	str	r1, [sp, #12]
 8008006:	bfbb      	ittet	lt
 8008008:	425b      	neglt	r3, r3
 800800a:	f042 0202 	orrlt.w	r2, r2, #2
 800800e:	9307      	strge	r3, [sp, #28]
 8008010:	9307      	strlt	r3, [sp, #28]
 8008012:	bfb8      	it	lt
 8008014:	9204      	strlt	r2, [sp, #16]
 8008016:	7823      	ldrb	r3, [r4, #0]
 8008018:	2b2e      	cmp	r3, #46	@ 0x2e
 800801a:	d10a      	bne.n	8008032 <_vfiprintf_r+0x156>
 800801c:	7863      	ldrb	r3, [r4, #1]
 800801e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008020:	d132      	bne.n	8008088 <_vfiprintf_r+0x1ac>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	3402      	adds	r4, #2
 8008026:	1d1a      	adds	r2, r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800802e:	9203      	str	r2, [sp, #12]
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008108 <_vfiprintf_r+0x22c>
 8008036:	2203      	movs	r2, #3
 8008038:	7821      	ldrb	r1, [r4, #0]
 800803a:	4650      	mov	r0, sl
 800803c:	f000 fb46 	bl	80086cc <memchr>
 8008040:	b138      	cbz	r0, 8008052 <_vfiprintf_r+0x176>
 8008042:	eba0 000a 	sub.w	r0, r0, sl
 8008046:	2240      	movs	r2, #64	@ 0x40
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	3401      	adds	r4, #1
 800804c:	4082      	lsls	r2, r0
 800804e:	4313      	orrs	r3, r2
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	2206      	movs	r2, #6
 8008058:	4828      	ldr	r0, [pc, #160]	@ (80080fc <_vfiprintf_r+0x220>)
 800805a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800805e:	f000 fb35 	bl	80086cc <memchr>
 8008062:	2800      	cmp	r0, #0
 8008064:	d03f      	beq.n	80080e6 <_vfiprintf_r+0x20a>
 8008066:	4b26      	ldr	r3, [pc, #152]	@ (8008100 <_vfiprintf_r+0x224>)
 8008068:	bb1b      	cbnz	r3, 80080b2 <_vfiprintf_r+0x1d6>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	3308      	adds	r3, #8
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008078:	443b      	add	r3, r7
 800807a:	9309      	str	r3, [sp, #36]	@ 0x24
 800807c:	e76a      	b.n	8007f54 <_vfiprintf_r+0x78>
 800807e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008082:	460c      	mov	r4, r1
 8008084:	2001      	movs	r0, #1
 8008086:	e7a8      	b.n	8007fda <_vfiprintf_r+0xfe>
 8008088:	2300      	movs	r3, #0
 800808a:	3401      	adds	r4, #1
 800808c:	f04f 0c0a 	mov.w	ip, #10
 8008090:	4619      	mov	r1, r3
 8008092:	9305      	str	r3, [sp, #20]
 8008094:	4620      	mov	r0, r4
 8008096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800809a:	3a30      	subs	r2, #48	@ 0x30
 800809c:	2a09      	cmp	r2, #9
 800809e:	d903      	bls.n	80080a8 <_vfiprintf_r+0x1cc>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c6      	beq.n	8008032 <_vfiprintf_r+0x156>
 80080a4:	9105      	str	r1, [sp, #20]
 80080a6:	e7c4      	b.n	8008032 <_vfiprintf_r+0x156>
 80080a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ac:	4604      	mov	r4, r0
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7f0      	b.n	8008094 <_vfiprintf_r+0x1b8>
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	462a      	mov	r2, r5
 80080b6:	a904      	add	r1, sp, #16
 80080b8:	4630      	mov	r0, r6
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4b11      	ldr	r3, [pc, #68]	@ (8008104 <_vfiprintf_r+0x228>)
 80080be:	f3af 8000 	nop.w
 80080c2:	4607      	mov	r7, r0
 80080c4:	1c78      	adds	r0, r7, #1
 80080c6:	d1d6      	bne.n	8008076 <_vfiprintf_r+0x19a>
 80080c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ca:	07d9      	lsls	r1, r3, #31
 80080cc:	d405      	bmi.n	80080da <_vfiprintf_r+0x1fe>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d402      	bmi.n	80080da <_vfiprintf_r+0x1fe>
 80080d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080d6:	f7ff fddd 	bl	8007c94 <__retarget_lock_release_recursive>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	065b      	lsls	r3, r3, #25
 80080de:	f53f af1f 	bmi.w	8007f20 <_vfiprintf_r+0x44>
 80080e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080e4:	e71e      	b.n	8007f24 <_vfiprintf_r+0x48>
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	462a      	mov	r2, r5
 80080ea:	a904      	add	r1, sp, #16
 80080ec:	4630      	mov	r0, r6
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	4b04      	ldr	r3, [pc, #16]	@ (8008104 <_vfiprintf_r+0x228>)
 80080f2:	f000 f87d 	bl	80081f0 <_printf_i>
 80080f6:	e7e4      	b.n	80080c2 <_vfiprintf_r+0x1e6>
 80080f8:	080088e0 	.word	0x080088e0
 80080fc:	080088ea 	.word	0x080088ea
 8008100:	00000000 	.word	0x00000000
 8008104:	08007eb7 	.word	0x08007eb7
 8008108:	080088e6 	.word	0x080088e6

0800810c <_printf_common>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	4616      	mov	r6, r2
 8008112:	4698      	mov	r8, r3
 8008114:	688a      	ldr	r2, [r1, #8]
 8008116:	4607      	mov	r7, r0
 8008118:	690b      	ldr	r3, [r1, #16]
 800811a:	460c      	mov	r4, r1
 800811c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008120:	4293      	cmp	r3, r2
 8008122:	bfb8      	it	lt
 8008124:	4613      	movlt	r3, r2
 8008126:	6033      	str	r3, [r6, #0]
 8008128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800812c:	b10a      	cbz	r2, 8008132 <_printf_common+0x26>
 800812e:	3301      	adds	r3, #1
 8008130:	6033      	str	r3, [r6, #0]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	0699      	lsls	r1, r3, #26
 8008136:	bf42      	ittt	mi
 8008138:	6833      	ldrmi	r3, [r6, #0]
 800813a:	3302      	addmi	r3, #2
 800813c:	6033      	strmi	r3, [r6, #0]
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	f015 0506 	ands.w	r5, r5, #6
 8008144:	d106      	bne.n	8008154 <_printf_common+0x48>
 8008146:	f104 0a19 	add.w	sl, r4, #25
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	6832      	ldr	r2, [r6, #0]
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc2b      	bgt.n	80081ac <_printf_common+0xa0>
 8008154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008158:	6822      	ldr	r2, [r4, #0]
 800815a:	3b00      	subs	r3, #0
 800815c:	bf18      	it	ne
 800815e:	2301      	movne	r3, #1
 8008160:	0692      	lsls	r2, r2, #26
 8008162:	d430      	bmi.n	80081c6 <_printf_common+0xba>
 8008164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008168:	4641      	mov	r1, r8
 800816a:	4638      	mov	r0, r7
 800816c:	47c8      	blx	r9
 800816e:	3001      	adds	r0, #1
 8008170:	d023      	beq.n	80081ba <_printf_common+0xae>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	341a      	adds	r4, #26
 8008176:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800817a:	f003 0306 	and.w	r3, r3, #6
 800817e:	2b04      	cmp	r3, #4
 8008180:	bf0a      	itet	eq
 8008182:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008186:	2500      	movne	r5, #0
 8008188:	6833      	ldreq	r3, [r6, #0]
 800818a:	f04f 0600 	mov.w	r6, #0
 800818e:	bf08      	it	eq
 8008190:	1aed      	subeq	r5, r5, r3
 8008192:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008196:	bf08      	it	eq
 8008198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800819c:	4293      	cmp	r3, r2
 800819e:	bfc4      	itt	gt
 80081a0:	1a9b      	subgt	r3, r3, r2
 80081a2:	18ed      	addgt	r5, r5, r3
 80081a4:	42b5      	cmp	r5, r6
 80081a6:	d11a      	bne.n	80081de <_printf_common+0xd2>
 80081a8:	2000      	movs	r0, #0
 80081aa:	e008      	b.n	80081be <_printf_common+0xb2>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4652      	mov	r2, sl
 80081b0:	4641      	mov	r1, r8
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c8      	blx	r9
 80081b6:	3001      	adds	r0, #1
 80081b8:	d103      	bne.n	80081c2 <_printf_common+0xb6>
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c2:	3501      	adds	r5, #1
 80081c4:	e7c1      	b.n	800814a <_printf_common+0x3e>
 80081c6:	18e1      	adds	r1, r4, r3
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	2030      	movs	r0, #48	@ 0x30
 80081cc:	3302      	adds	r3, #2
 80081ce:	4422      	add	r2, r4
 80081d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081dc:	e7c2      	b.n	8008164 <_printf_common+0x58>
 80081de:	2301      	movs	r3, #1
 80081e0:	4622      	mov	r2, r4
 80081e2:	4641      	mov	r1, r8
 80081e4:	4638      	mov	r0, r7
 80081e6:	47c8      	blx	r9
 80081e8:	3001      	adds	r0, #1
 80081ea:	d0e6      	beq.n	80081ba <_printf_common+0xae>
 80081ec:	3601      	adds	r6, #1
 80081ee:	e7d9      	b.n	80081a4 <_printf_common+0x98>

080081f0 <_printf_i>:
 80081f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f4:	7e0f      	ldrb	r7, [r1, #24]
 80081f6:	4691      	mov	r9, r2
 80081f8:	4680      	mov	r8, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	2f78      	cmp	r7, #120	@ 0x78
 80081fe:	469a      	mov	sl, r3
 8008200:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008206:	d807      	bhi.n	8008218 <_printf_i+0x28>
 8008208:	2f62      	cmp	r7, #98	@ 0x62
 800820a:	d80a      	bhi.n	8008222 <_printf_i+0x32>
 800820c:	2f00      	cmp	r7, #0
 800820e:	f000 80d1 	beq.w	80083b4 <_printf_i+0x1c4>
 8008212:	2f58      	cmp	r7, #88	@ 0x58
 8008214:	f000 80b8 	beq.w	8008388 <_printf_i+0x198>
 8008218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800821c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008220:	e03a      	b.n	8008298 <_printf_i+0xa8>
 8008222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008226:	2b15      	cmp	r3, #21
 8008228:	d8f6      	bhi.n	8008218 <_printf_i+0x28>
 800822a:	a101      	add	r1, pc, #4	@ (adr r1, 8008230 <_printf_i+0x40>)
 800822c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008230:	08008289 	.word	0x08008289
 8008234:	0800829d 	.word	0x0800829d
 8008238:	08008219 	.word	0x08008219
 800823c:	08008219 	.word	0x08008219
 8008240:	08008219 	.word	0x08008219
 8008244:	08008219 	.word	0x08008219
 8008248:	0800829d 	.word	0x0800829d
 800824c:	08008219 	.word	0x08008219
 8008250:	08008219 	.word	0x08008219
 8008254:	08008219 	.word	0x08008219
 8008258:	08008219 	.word	0x08008219
 800825c:	0800839b 	.word	0x0800839b
 8008260:	080082c7 	.word	0x080082c7
 8008264:	08008355 	.word	0x08008355
 8008268:	08008219 	.word	0x08008219
 800826c:	08008219 	.word	0x08008219
 8008270:	080083bd 	.word	0x080083bd
 8008274:	08008219 	.word	0x08008219
 8008278:	080082c7 	.word	0x080082c7
 800827c:	08008219 	.word	0x08008219
 8008280:	08008219 	.word	0x08008219
 8008284:	0800835d 	.word	0x0800835d
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	1d1a      	adds	r2, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6032      	str	r2, [r6, #0]
 8008290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008298:	2301      	movs	r3, #1
 800829a:	e09c      	b.n	80083d6 <_printf_i+0x1e6>
 800829c:	6833      	ldr	r3, [r6, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6031      	str	r1, [r6, #0]
 80082a4:	0606      	lsls	r6, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xbc>
 80082a8:	681d      	ldr	r5, [r3, #0]
 80082aa:	e003      	b.n	80082b4 <_printf_i+0xc4>
 80082ac:	0645      	lsls	r5, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xb8>
 80082b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	da03      	bge.n	80082c0 <_printf_i+0xd0>
 80082b8:	232d      	movs	r3, #45	@ 0x2d
 80082ba:	426d      	negs	r5, r5
 80082bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c0:	4858      	ldr	r0, [pc, #352]	@ (8008424 <_printf_i+0x234>)
 80082c2:	230a      	movs	r3, #10
 80082c4:	e011      	b.n	80082ea <_printf_i+0xfa>
 80082c6:	6821      	ldr	r1, [r4, #0]
 80082c8:	6833      	ldr	r3, [r6, #0]
 80082ca:	0608      	lsls	r0, r1, #24
 80082cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80082d0:	d402      	bmi.n	80082d8 <_printf_i+0xe8>
 80082d2:	0649      	lsls	r1, r1, #25
 80082d4:	bf48      	it	mi
 80082d6:	b2ad      	uxthmi	r5, r5
 80082d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	4851      	ldr	r0, [pc, #324]	@ (8008424 <_printf_i+0x234>)
 80082de:	bf14      	ite	ne
 80082e0:	230a      	movne	r3, #10
 80082e2:	2308      	moveq	r3, #8
 80082e4:	2100      	movs	r1, #0
 80082e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082ea:	6866      	ldr	r6, [r4, #4]
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	60a6      	str	r6, [r4, #8]
 80082f0:	db05      	blt.n	80082fe <_printf_i+0x10e>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	432e      	orrs	r6, r5
 80082f6:	f021 0104 	bic.w	r1, r1, #4
 80082fa:	6021      	str	r1, [r4, #0]
 80082fc:	d04b      	beq.n	8008396 <_printf_i+0x1a6>
 80082fe:	4616      	mov	r6, r2
 8008300:	fbb5 f1f3 	udiv	r1, r5, r3
 8008304:	fb03 5711 	mls	r7, r3, r1, r5
 8008308:	5dc7      	ldrb	r7, [r0, r7]
 800830a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800830e:	462f      	mov	r7, r5
 8008310:	460d      	mov	r5, r1
 8008312:	42bb      	cmp	r3, r7
 8008314:	d9f4      	bls.n	8008300 <_printf_i+0x110>
 8008316:	2b08      	cmp	r3, #8
 8008318:	d10b      	bne.n	8008332 <_printf_i+0x142>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	07df      	lsls	r7, r3, #31
 800831e:	d508      	bpl.n	8008332 <_printf_i+0x142>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	6861      	ldr	r1, [r4, #4]
 8008324:	4299      	cmp	r1, r3
 8008326:	bfde      	ittt	le
 8008328:	2330      	movle	r3, #48	@ 0x30
 800832a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800832e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008332:	1b92      	subs	r2, r2, r6
 8008334:	6122      	str	r2, [r4, #16]
 8008336:	464b      	mov	r3, r9
 8008338:	aa03      	add	r2, sp, #12
 800833a:	4621      	mov	r1, r4
 800833c:	4640      	mov	r0, r8
 800833e:	f8cd a000 	str.w	sl, [sp]
 8008342:	f7ff fee3 	bl	800810c <_printf_common>
 8008346:	3001      	adds	r0, #1
 8008348:	d14a      	bne.n	80083e0 <_printf_i+0x1f0>
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	b004      	add	sp, #16
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	f043 0320 	orr.w	r3, r3, #32
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	2778      	movs	r7, #120	@ 0x78
 800835e:	4832      	ldr	r0, [pc, #200]	@ (8008428 <_printf_i+0x238>)
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008366:	061f      	lsls	r7, r3, #24
 8008368:	6831      	ldr	r1, [r6, #0]
 800836a:	f851 5b04 	ldr.w	r5, [r1], #4
 800836e:	d402      	bmi.n	8008376 <_printf_i+0x186>
 8008370:	065f      	lsls	r7, r3, #25
 8008372:	bf48      	it	mi
 8008374:	b2ad      	uxthmi	r5, r5
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	bf44      	itt	mi
 800837c:	f043 0320 	orrmi.w	r3, r3, #32
 8008380:	6023      	strmi	r3, [r4, #0]
 8008382:	b11d      	cbz	r5, 800838c <_printf_i+0x19c>
 8008384:	2310      	movs	r3, #16
 8008386:	e7ad      	b.n	80082e4 <_printf_i+0xf4>
 8008388:	4826      	ldr	r0, [pc, #152]	@ (8008424 <_printf_i+0x234>)
 800838a:	e7e9      	b.n	8008360 <_printf_i+0x170>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f023 0320 	bic.w	r3, r3, #32
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	e7f6      	b.n	8008384 <_printf_i+0x194>
 8008396:	4616      	mov	r6, r2
 8008398:	e7bd      	b.n	8008316 <_printf_i+0x126>
 800839a:	6833      	ldr	r3, [r6, #0]
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	1d18      	adds	r0, r3, #4
 80083a0:	6961      	ldr	r1, [r4, #20]
 80083a2:	6030      	str	r0, [r6, #0]
 80083a4:	062e      	lsls	r6, r5, #24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	d501      	bpl.n	80083ae <_printf_i+0x1be>
 80083aa:	6019      	str	r1, [r3, #0]
 80083ac:	e002      	b.n	80083b4 <_printf_i+0x1c4>
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d5fb      	bpl.n	80083aa <_printf_i+0x1ba>
 80083b2:	8019      	strh	r1, [r3, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	4616      	mov	r6, r2
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	e7bc      	b.n	8008336 <_printf_i+0x146>
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	2100      	movs	r1, #0
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	6032      	str	r2, [r6, #0]
 80083c4:	681e      	ldr	r6, [r3, #0]
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 f97f 	bl	80086cc <memchr>
 80083ce:	b108      	cbz	r0, 80083d4 <_printf_i+0x1e4>
 80083d0:	1b80      	subs	r0, r0, r6
 80083d2:	6060      	str	r0, [r4, #4]
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	2300      	movs	r3, #0
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083de:	e7aa      	b.n	8008336 <_printf_i+0x146>
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	4632      	mov	r2, r6
 80083e4:	4649      	mov	r1, r9
 80083e6:	4640      	mov	r0, r8
 80083e8:	47d0      	blx	sl
 80083ea:	3001      	adds	r0, #1
 80083ec:	d0ad      	beq.n	800834a <_printf_i+0x15a>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	079b      	lsls	r3, r3, #30
 80083f2:	d413      	bmi.n	800841c <_printf_i+0x22c>
 80083f4:	68e0      	ldr	r0, [r4, #12]
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	4298      	cmp	r0, r3
 80083fa:	bfb8      	it	lt
 80083fc:	4618      	movlt	r0, r3
 80083fe:	e7a6      	b.n	800834e <_printf_i+0x15e>
 8008400:	2301      	movs	r3, #1
 8008402:	4632      	mov	r2, r6
 8008404:	4649      	mov	r1, r9
 8008406:	4640      	mov	r0, r8
 8008408:	47d0      	blx	sl
 800840a:	3001      	adds	r0, #1
 800840c:	d09d      	beq.n	800834a <_printf_i+0x15a>
 800840e:	3501      	adds	r5, #1
 8008410:	68e3      	ldr	r3, [r4, #12]
 8008412:	9903      	ldr	r1, [sp, #12]
 8008414:	1a5b      	subs	r3, r3, r1
 8008416:	42ab      	cmp	r3, r5
 8008418:	dcf2      	bgt.n	8008400 <_printf_i+0x210>
 800841a:	e7eb      	b.n	80083f4 <_printf_i+0x204>
 800841c:	2500      	movs	r5, #0
 800841e:	f104 0619 	add.w	r6, r4, #25
 8008422:	e7f5      	b.n	8008410 <_printf_i+0x220>
 8008424:	080088f1 	.word	0x080088f1
 8008428:	08008902 	.word	0x08008902

0800842c <__sflush_r>:
 800842c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008434:	0716      	lsls	r6, r2, #28
 8008436:	4605      	mov	r5, r0
 8008438:	460c      	mov	r4, r1
 800843a:	d454      	bmi.n	80084e6 <__sflush_r+0xba>
 800843c:	684b      	ldr	r3, [r1, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dc02      	bgt.n	8008448 <__sflush_r+0x1c>
 8008442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd48      	ble.n	80084da <__sflush_r+0xae>
 8008448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800844a:	2e00      	cmp	r6, #0
 800844c:	d045      	beq.n	80084da <__sflush_r+0xae>
 800844e:	2300      	movs	r3, #0
 8008450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008454:	682f      	ldr	r7, [r5, #0]
 8008456:	6a21      	ldr	r1, [r4, #32]
 8008458:	602b      	str	r3, [r5, #0]
 800845a:	d030      	beq.n	80084be <__sflush_r+0x92>
 800845c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	0759      	lsls	r1, r3, #29
 8008462:	d505      	bpl.n	8008470 <__sflush_r+0x44>
 8008464:	6863      	ldr	r3, [r4, #4]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800846a:	b10b      	cbz	r3, 8008470 <__sflush_r+0x44>
 800846c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008474:	6a21      	ldr	r1, [r4, #32]
 8008476:	4628      	mov	r0, r5
 8008478:	47b0      	blx	r6
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	d106      	bne.n	800848e <__sflush_r+0x62>
 8008480:	6829      	ldr	r1, [r5, #0]
 8008482:	291d      	cmp	r1, #29
 8008484:	d82b      	bhi.n	80084de <__sflush_r+0xb2>
 8008486:	4a2a      	ldr	r2, [pc, #168]	@ (8008530 <__sflush_r+0x104>)
 8008488:	40ca      	lsrs	r2, r1
 800848a:	07d6      	lsls	r6, r2, #31
 800848c:	d527      	bpl.n	80084de <__sflush_r+0xb2>
 800848e:	2200      	movs	r2, #0
 8008490:	04d9      	lsls	r1, r3, #19
 8008492:	6062      	str	r2, [r4, #4]
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	d504      	bpl.n	80084a4 <__sflush_r+0x78>
 800849a:	1c42      	adds	r2, r0, #1
 800849c:	d101      	bne.n	80084a2 <__sflush_r+0x76>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b903      	cbnz	r3, 80084a4 <__sflush_r+0x78>
 80084a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80084a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	b1b9      	cbz	r1, 80084da <__sflush_r+0xae>
 80084aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084ae:	4299      	cmp	r1, r3
 80084b0:	d002      	beq.n	80084b8 <__sflush_r+0x8c>
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7ff fbf0 	bl	8007c98 <_free_r>
 80084b8:	2300      	movs	r3, #0
 80084ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80084bc:	e00d      	b.n	80084da <__sflush_r+0xae>
 80084be:	2301      	movs	r3, #1
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	4602      	mov	r2, r0
 80084c6:	1c50      	adds	r0, r2, #1
 80084c8:	d1c9      	bne.n	800845e <__sflush_r+0x32>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0c6      	beq.n	800845e <__sflush_r+0x32>
 80084d0:	2b1d      	cmp	r3, #29
 80084d2:	d001      	beq.n	80084d8 <__sflush_r+0xac>
 80084d4:	2b16      	cmp	r3, #22
 80084d6:	d11d      	bne.n	8008514 <__sflush_r+0xe8>
 80084d8:	602f      	str	r7, [r5, #0]
 80084da:	2000      	movs	r0, #0
 80084dc:	e021      	b.n	8008522 <__sflush_r+0xf6>
 80084de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	e01a      	b.n	800851c <__sflush_r+0xf0>
 80084e6:	690f      	ldr	r7, [r1, #16]
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	d0f6      	beq.n	80084da <__sflush_r+0xae>
 80084ec:	0793      	lsls	r3, r2, #30
 80084ee:	680e      	ldr	r6, [r1, #0]
 80084f0:	600f      	str	r7, [r1, #0]
 80084f2:	bf0c      	ite	eq
 80084f4:	694b      	ldreq	r3, [r1, #20]
 80084f6:	2300      	movne	r3, #0
 80084f8:	eba6 0807 	sub.w	r8, r6, r7
 80084fc:	608b      	str	r3, [r1, #8]
 80084fe:	f1b8 0f00 	cmp.w	r8, #0
 8008502:	ddea      	ble.n	80084da <__sflush_r+0xae>
 8008504:	4643      	mov	r3, r8
 8008506:	463a      	mov	r2, r7
 8008508:	6a21      	ldr	r1, [r4, #32]
 800850a:	4628      	mov	r0, r5
 800850c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800850e:	47b0      	blx	r6
 8008510:	2800      	cmp	r0, #0
 8008512:	dc08      	bgt.n	8008526 <__sflush_r+0xfa>
 8008514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008526:	4407      	add	r7, r0
 8008528:	eba8 0800 	sub.w	r8, r8, r0
 800852c:	e7e7      	b.n	80084fe <__sflush_r+0xd2>
 800852e:	bf00      	nop
 8008530:	20400001 	.word	0x20400001

08008534 <_fflush_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	690b      	ldr	r3, [r1, #16]
 8008538:	4605      	mov	r5, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b913      	cbnz	r3, 8008544 <_fflush_r+0x10>
 800853e:	2500      	movs	r5, #0
 8008540:	4628      	mov	r0, r5
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	b118      	cbz	r0, 800854e <_fflush_r+0x1a>
 8008546:	6a03      	ldr	r3, [r0, #32]
 8008548:	b90b      	cbnz	r3, 800854e <_fflush_r+0x1a>
 800854a:	f7ff fa9d 	bl	8007a88 <__sinit>
 800854e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0f3      	beq.n	800853e <_fflush_r+0xa>
 8008556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008558:	07d0      	lsls	r0, r2, #31
 800855a:	d404      	bmi.n	8008566 <_fflush_r+0x32>
 800855c:	0599      	lsls	r1, r3, #22
 800855e:	d402      	bmi.n	8008566 <_fflush_r+0x32>
 8008560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008562:	f7ff fb96 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8008566:	4628      	mov	r0, r5
 8008568:	4621      	mov	r1, r4
 800856a:	f7ff ff5f 	bl	800842c <__sflush_r>
 800856e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008570:	4605      	mov	r5, r0
 8008572:	07da      	lsls	r2, r3, #31
 8008574:	d4e4      	bmi.n	8008540 <_fflush_r+0xc>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	059b      	lsls	r3, r3, #22
 800857a:	d4e1      	bmi.n	8008540 <_fflush_r+0xc>
 800857c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800857e:	f7ff fb89 	bl	8007c94 <__retarget_lock_release_recursive>
 8008582:	e7dd      	b.n	8008540 <_fflush_r+0xc>

08008584 <__swbuf_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	4614      	mov	r4, r2
 800858a:	4605      	mov	r5, r0
 800858c:	b118      	cbz	r0, 8008596 <__swbuf_r+0x12>
 800858e:	6a03      	ldr	r3, [r0, #32]
 8008590:	b90b      	cbnz	r3, 8008596 <__swbuf_r+0x12>
 8008592:	f7ff fa79 	bl	8007a88 <__sinit>
 8008596:	69a3      	ldr	r3, [r4, #24]
 8008598:	60a3      	str	r3, [r4, #8]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	071a      	lsls	r2, r3, #28
 800859e:	d501      	bpl.n	80085a4 <__swbuf_r+0x20>
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	b943      	cbnz	r3, 80085b6 <__swbuf_r+0x32>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 f82a 	bl	8008600 <__swsetup_r>
 80085ac:	b118      	cbz	r0, 80085b6 <__swbuf_r+0x32>
 80085ae:	f04f 37ff 	mov.w	r7, #4294967295
 80085b2:	4638      	mov	r0, r7
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	b2f6      	uxtb	r6, r6
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	4637      	mov	r7, r6
 80085be:	1a98      	subs	r0, r3, r2
 80085c0:	6963      	ldr	r3, [r4, #20]
 80085c2:	4283      	cmp	r3, r0
 80085c4:	dc05      	bgt.n	80085d2 <__swbuf_r+0x4e>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7ff ffb3 	bl	8008534 <_fflush_r>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d1ed      	bne.n	80085ae <__swbuf_r+0x2a>
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	60a3      	str	r3, [r4, #8]
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	6022      	str	r2, [r4, #0]
 80085de:	701e      	strb	r6, [r3, #0]
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	6962      	ldr	r2, [r4, #20]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d004      	beq.n	80085f2 <__swbuf_r+0x6e>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	07db      	lsls	r3, r3, #31
 80085ec:	d5e1      	bpl.n	80085b2 <__swbuf_r+0x2e>
 80085ee:	2e0a      	cmp	r6, #10
 80085f0:	d1df      	bne.n	80085b2 <__swbuf_r+0x2e>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7ff ff9d 	bl	8008534 <_fflush_r>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0d9      	beq.n	80085b2 <__swbuf_r+0x2e>
 80085fe:	e7d6      	b.n	80085ae <__swbuf_r+0x2a>

08008600 <__swsetup_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4b29      	ldr	r3, [pc, #164]	@ (80086a8 <__swsetup_r+0xa8>)
 8008604:	4605      	mov	r5, r0
 8008606:	460c      	mov	r4, r1
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	b118      	cbz	r0, 8008614 <__swsetup_r+0x14>
 800860c:	6a03      	ldr	r3, [r0, #32]
 800860e:	b90b      	cbnz	r3, 8008614 <__swsetup_r+0x14>
 8008610:	f7ff fa3a 	bl	8007a88 <__sinit>
 8008614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008618:	0719      	lsls	r1, r3, #28
 800861a:	d422      	bmi.n	8008662 <__swsetup_r+0x62>
 800861c:	06da      	lsls	r2, r3, #27
 800861e:	d407      	bmi.n	8008630 <__swsetup_r+0x30>
 8008620:	2209      	movs	r2, #9
 8008622:	602a      	str	r2, [r5, #0]
 8008624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	e033      	b.n	8008698 <__swsetup_r+0x98>
 8008630:	0758      	lsls	r0, r3, #29
 8008632:	d512      	bpl.n	800865a <__swsetup_r+0x5a>
 8008634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008636:	b141      	cbz	r1, 800864a <__swsetup_r+0x4a>
 8008638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800863c:	4299      	cmp	r1, r3
 800863e:	d002      	beq.n	8008646 <__swsetup_r+0x46>
 8008640:	4628      	mov	r0, r5
 8008642:	f7ff fb29 	bl	8007c98 <_free_r>
 8008646:	2300      	movs	r3, #0
 8008648:	6363      	str	r3, [r4, #52]	@ 0x34
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	2300      	movs	r3, #0
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f043 0308 	orr.w	r3, r3, #8
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	b94b      	cbnz	r3, 800867a <__swsetup_r+0x7a>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800866c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008670:	d003      	beq.n	800867a <__swsetup_r+0x7a>
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f85c 	bl	8008732 <__smakebuf_r>
 800867a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867e:	f013 0201 	ands.w	r2, r3, #1
 8008682:	d00a      	beq.n	800869a <__swsetup_r+0x9a>
 8008684:	2200      	movs	r2, #0
 8008686:	60a2      	str	r2, [r4, #8]
 8008688:	6962      	ldr	r2, [r4, #20]
 800868a:	4252      	negs	r2, r2
 800868c:	61a2      	str	r2, [r4, #24]
 800868e:	6922      	ldr	r2, [r4, #16]
 8008690:	b942      	cbnz	r2, 80086a4 <__swsetup_r+0xa4>
 8008692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008696:	d1c5      	bne.n	8008624 <__swsetup_r+0x24>
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	0799      	lsls	r1, r3, #30
 800869c:	bf58      	it	pl
 800869e:	6962      	ldrpl	r2, [r4, #20]
 80086a0:	60a2      	str	r2, [r4, #8]
 80086a2:	e7f4      	b.n	800868e <__swsetup_r+0x8e>
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7f7      	b.n	8008698 <__swsetup_r+0x98>
 80086a8:	20000028 	.word	0x20000028

080086ac <_sbrk_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	2300      	movs	r3, #0
 80086b0:	4d05      	ldr	r5, [pc, #20]	@ (80086c8 <_sbrk_r+0x1c>)
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7f9 f926 	bl	8001908 <_sbrk>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_sbrk_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_sbrk_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	200003f0 	.word	0x200003f0

080086cc <memchr>:
 80086cc:	b2c9      	uxtb	r1, r1
 80086ce:	4603      	mov	r3, r0
 80086d0:	4402      	add	r2, r0
 80086d2:	b510      	push	{r4, lr}
 80086d4:	4293      	cmp	r3, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	d101      	bne.n	80086de <memchr+0x12>
 80086da:	2000      	movs	r0, #0
 80086dc:	e003      	b.n	80086e6 <memchr+0x1a>
 80086de:	7804      	ldrb	r4, [r0, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	428c      	cmp	r4, r1
 80086e4:	d1f6      	bne.n	80086d4 <memchr+0x8>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <__swhatbuf_r>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	b096      	sub	sp, #88	@ 0x58
 80086f2:	4615      	mov	r5, r2
 80086f4:	2900      	cmp	r1, #0
 80086f6:	461e      	mov	r6, r3
 80086f8:	da0c      	bge.n	8008714 <__swhatbuf_r+0x2c>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	2100      	movs	r1, #0
 80086fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008702:	bf14      	ite	ne
 8008704:	2340      	movne	r3, #64	@ 0x40
 8008706:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800870a:	2000      	movs	r0, #0
 800870c:	6031      	str	r1, [r6, #0]
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	b016      	add	sp, #88	@ 0x58
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	466a      	mov	r2, sp
 8008716:	f000 f849 	bl	80087ac <_fstat_r>
 800871a:	2800      	cmp	r0, #0
 800871c:	dbed      	blt.n	80086fa <__swhatbuf_r+0x12>
 800871e:	9901      	ldr	r1, [sp, #4]
 8008720:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008724:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008728:	4259      	negs	r1, r3
 800872a:	4159      	adcs	r1, r3
 800872c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008730:	e7eb      	b.n	800870a <__swhatbuf_r+0x22>

08008732 <__smakebuf_r>:
 8008732:	898b      	ldrh	r3, [r1, #12]
 8008734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008736:	079d      	lsls	r5, r3, #30
 8008738:	4606      	mov	r6, r0
 800873a:	460c      	mov	r4, r1
 800873c:	d507      	bpl.n	800874e <__smakebuf_r+0x1c>
 800873e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	2301      	movs	r3, #1
 8008748:	6163      	str	r3, [r4, #20]
 800874a:	b003      	add	sp, #12
 800874c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800874e:	ab01      	add	r3, sp, #4
 8008750:	466a      	mov	r2, sp
 8008752:	f7ff ffc9 	bl	80086e8 <__swhatbuf_r>
 8008756:	9f00      	ldr	r7, [sp, #0]
 8008758:	4605      	mov	r5, r0
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7ff fb07 	bl	8007d70 <_malloc_r>
 8008762:	b948      	cbnz	r0, 8008778 <__smakebuf_r+0x46>
 8008764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008768:	059a      	lsls	r2, r3, #22
 800876a:	d4ee      	bmi.n	800874a <__smakebuf_r+0x18>
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	e7e2      	b.n	800873e <__smakebuf_r+0xc>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008788:	b15b      	cbz	r3, 80087a2 <__smakebuf_r+0x70>
 800878a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878e:	4630      	mov	r0, r6
 8008790:	f000 f81e 	bl	80087d0 <_isatty_r>
 8008794:	b128      	cbz	r0, 80087a2 <__smakebuf_r+0x70>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	431d      	orrs	r5, r3
 80087a6:	81a5      	strh	r5, [r4, #12]
 80087a8:	e7cf      	b.n	800874a <__smakebuf_r+0x18>
	...

080087ac <_fstat_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	2300      	movs	r3, #0
 80087b0:	4d06      	ldr	r5, [pc, #24]	@ (80087cc <_fstat_r+0x20>)
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	f7f9 f87c 	bl	80018b6 <_fstat>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d102      	bne.n	80087c8 <_fstat_r+0x1c>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b103      	cbz	r3, 80087c8 <_fstat_r+0x1c>
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	200003f0 	.word	0x200003f0

080087d0 <_isatty_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	2300      	movs	r3, #0
 80087d4:	4d05      	ldr	r5, [pc, #20]	@ (80087ec <_isatty_r+0x1c>)
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 f87b 	bl	80018d6 <_isatty>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_isatty_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_isatty_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	200003f0 	.word	0x200003f0

080087f0 <_init>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr

080087fc <_fini>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	bf00      	nop
 8008800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008802:	bc08      	pop	{r3}
 8008804:	469e      	mov	lr, r3
 8008806:	4770      	bx	lr
